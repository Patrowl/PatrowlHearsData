{"publishedDate": "2020-03-23T23:15Z", "lastModifiedDate": "2024-11-21T05:33Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2020-5252", "ASSIGNER": "security-advisories@github.com"}, "description": {"description_data": [{"lang": "en", "value": "The command-line \"safety\" package for Python has a potential security issue. There are two Python characteristics that allow malicious code to \u201cpoison-pill\u201d command-line Safety package detection routines by disguising, or obfuscating, other malicious or non-secure packages. This vulnerability is considered to be of low severity because the attack makes use of an existing Python condition, not the Safety tool itself. This can happen if: You are running Safety in a Python environment that you don\u2019t trust. You are running Safety from the same Python environment where you have your dependencies installed. Dependency packages are being installed arbitrarily or without proper verification. Users can mitigate this issue by doing any of the following: Perform a static analysis by installing Docker and running the Safety Docker image: $ docker run --rm -it pyupio/safety check -r requirements.txt Run Safety against a static dependencies list, such as the requirements.txt file, in a separate, clean Python environment. Run Safety from a Continuous Integration pipeline. Use PyUp.io, which runs Safety in a controlled environment and checks Python for dependencies without any need to install them. Use PyUp's Online Requirements Checker."}, {"lang": "es", "value": "El paquete \"safety\" de la l\u00ednea de comandos para Python presenta un posible problema de seguridad. Existen dos caracter\u00edsticas de Python que permiten c\u00f3digo malicioso en las rutinas de detecci\u00f3n del paquete Safety de la l\u00ednea de comandos \u201cpoison-pill\u201d al disfrazar u ofuscar otros paquetes maliciosos o no seguros. Esta vulnerabilidad es considerada de baja gravedad porque el ataque usa una condici\u00f3n de Python existente, no la herramienta Safety en s\u00ed. Esto puede ocurrir si: Usted est\u00e1 ejecutando Safety en un entorno Python en el que no conf\u00eda. Usted est\u00e1 ejecutando Safety desde el mismo entorno Python donde tiene instaladas sus dependencias. Los paquetes de dependencia est\u00e1n siendo instalados arbitrariamente o sin la verificaci\u00f3n apropiada. Los usuarios pueden mitigar este problema haciendo lo siguiente: Realice un an\u00e1lisis est\u00e1tico instalando Docker y ejecutando la imagen Safety Docker: $ docker run --rm -it pyupio/safety check -r requirements.txt. Ejecute Safety contra una lista de dependencias est\u00e1ticas, como el archivo require.txt, en un entorno Python limpio y separado. Ejecute Safety desde una tuber\u00eda Continuous Integration. Use PyUp.io, que ejecuta Safety en un entorno controlado y compruebe las dependencias de Python sin necesidad de instalarlas. Utilice Online Requirements Checker de PyUp."}]}, "references": {"reference_data": [{"url": "https://github.com/akoumjian/python-safety-vuln", "name": "", "refsource": "", "tags": ["Product", "Third Party Advisory"]}, {"url": "https://github.com/pyupio/safety/security/advisories/GHSA-7q25-qrjw-6fg2", "name": "", "refsource": "", "tags": ["Mitigation", "Third Party Advisory"]}, {"url": "https://pyup.io/posts/patched-vulnerability/", "name": "", "refsource": "", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/akoumjian/python-safety-vuln", "name": "", "refsource": "", "tags": ["Product", "Third Party Advisory"]}, {"url": "https://github.com/pyupio/safety/security/advisories/GHSA-7q25-qrjw-6fg2", "name": "", "refsource": "", "tags": ["Mitigation", "Third Party Advisory"]}, {"url": "https://pyup.io/posts/patched-vulnerability/", "name": "", "refsource": "", "tags": ["Vendor Advisory"]}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "CWE-807"}, {"lang": "en", "value": "NVD-CWE-noinfo"}]}]}}, "impact": {"baseMetricV2": {"cvssV2": {"version": "2.0", "vectorString": "AV:L/AC:M/Au:N/C:N/I:P/A:N", "baseScore": 1.9, "accessVector": "LOCAL", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE"}, "exploitabilityScore": 3.4, "impactScore": 2.9, "severity": "LOW", "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}, "baseMetricV3": {"exploitabilityScore": 0.5, "impactScore": 3.6, "cvssV3": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:H/PR:H/UI:N/S:U/C:N/I:H/A:N", "baseScore": 4.1, "baseSeverity": "MEDIUM", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE"}}}, "configurations": {"CVE_data_version": "4.0", "nodes": [{"operator": "OR", "negate": false, "children": [], "cpe_match": [{"vulnerable": true, "cpe23Uri": "cpe:2.3:a:pyup:safety:*:*:*:*:*:*:*:*", "matchCriteriaId": "F91326EC-20B5-4675-B3C5-AFB5F513669B", "cpe_name": [], "versionEndIncluding": "1.8.6"}]}]}}