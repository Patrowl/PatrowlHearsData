{"publishedDate": "2020-06-18T19:15Z", "lastModifiedDate": "2024-11-21T05:00Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2020-12887", "ASSIGNER": "cve@mitre.org"}, "description": {"description_data": [{"lang": "en", "value": "Memory leaks were discovered in the CoAP library in Arm Mbed OS 5.15.3 when using the Arm mbed-coap library 5.1.5. The CoAP parser is responsible for parsing received CoAP packets. The function sn_coap_parser_options_parse() parses the CoAP option number field of all options present in the input packet. Each option number is calculated as a sum of the previous option number and a delta of the current option. The delta and the previous option number are expressed as unsigned 16-bit integers. Due to lack of overflow detection, it is possible to craft a packet that wraps the option number around and results in the same option number being processed again in a single packet. Certain options allocate memory by calling a memory allocation function. In the cases of COAP_OPTION_URI_QUERY, COAP_OPTION_URI_PATH, COAP_OPTION_LOCATION_QUERY, and COAP_OPTION_ETAG, there is no check on whether memory has already been allocated, which in conjunction with the option number integer overflow may lead to multiple assignments of allocated memory to a single pointer. This has been demonstrated to lead to memory leak by buffer orphaning. As a result, the memory is never freed."}, {"lang": "es", "value": "Se detectaron p\u00e9rdidas de la memoria en la biblioteca CoAP en Arm Mbed OS versi\u00f3n 5.15.3 cuando se usa la biblioteca Arm mbed-coap versi\u00f3n 5.1.5. El analizador CoAP es responsable de analizar los paquetes CoAP recibidos. La funci\u00f3n sn_coap_parser_options_parse() analiza el campo CoAP option number de todas las opciones presentes en el paquete de entrada. Cada n\u00famero de opci\u00f3n es calculado como una suma del n\u00famero de opci\u00f3n previo y un delta de la opci\u00f3n actual. El delta y el n\u00famero de opci\u00f3n anterior son expresados como enteros de 16 bits sin signo. Debido a la falta de detecci\u00f3n de desbordamiento, es posible crear un paquete que contenga el n\u00famero de opci\u00f3n y resulte en que el mismo n\u00famero de opci\u00f3n sea procesado nuevamente en un solo paquete. Determinadas opciones asignan memoria llamando a una funci\u00f3n de asignaci\u00f3n de memoria. En los casos de COAP_OPTION_URI_QUERY, COAP_OPTION_URI_PATH, COAP_OPTION_LOCATION_QUERY y COAP_OPTION_ETAG, no se comprueba si ya se ha asignado memoria, lo que en conjunto con el desbordamiento de enteros del n\u00famero de opci\u00f3n puede conllevar a m\u00faltiples asignaciones de memoria asignada a un \u00fanico puntero. Se ha demostrado que esto conlleva a una p\u00e9rdida de memoria mediante un hu\u00e9rfano de b\u00fafer. Como resultado, la memoria nunca es liberada"}]}, "references": {"reference_data": [{"url": "https://github.com/ARMmbed/mbed-coap/pull/116", "name": "", "refsource": "", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/ARMmbed/mbed-os/issues/12930", "name": "", "refsource": "", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/ARMmbed/mbed-os/issues/12957", "name": "", "refsource": "", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/mjurczak/mbed-coap/commit/4647a68e364401e81dbd370728127d844f221d93", "name": "", "refsource": "", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ARMmbed/mbed-coap/pull/116", "name": "", "refsource": "", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/ARMmbed/mbed-os/issues/12930", "name": "", "refsource": "", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/ARMmbed/mbed-os/issues/12957", "name": "", "refsource": "", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/mjurczak/mbed-coap/commit/4647a68e364401e81dbd370728127d844f221d93", "name": "", "refsource": "", "tags": ["Patch", "Third Party Advisory"]}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "CWE-190"}, {"lang": "en", "value": "CWE-401"}]}]}}, "impact": {"baseMetricV2": {"cvssV2": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "baseScore": 5.0, "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL"}, "exploitabilityScore": 10.0, "impactScore": 2.9, "severity": "MEDIUM", "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}, "baseMetricV3": {"exploitabilityScore": 3.9, "impactScore": 3.6, "cvssV3": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "baseScore": 7.5, "baseSeverity": "HIGH", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH"}}}, "configurations": {"CVE_data_version": "4.0", "nodes": [{"operator": "OR", "negate": false, "children": [], "cpe_match": [{"vulnerable": true, "cpe23Uri": "cpe:2.3:a:arm:mbed-coap:5.1.5:*:*:*:*:*:*:*", "matchCriteriaId": "514FAB1A-AD34-4295-BD7B-E417F85F16FD", "cpe_name": []}]}, {"operator": "OR", "negate": false, "children": [], "cpe_match": [{"vulnerable": false, "cpe23Uri": "cpe:2.3:o:arm:mbed_os:5.15.3:*:*:*:*:*:*:*", "matchCriteriaId": "B314FCEF-12B7-4510-AC5E-12D3574E3E68", "cpe_name": []}]}]}}