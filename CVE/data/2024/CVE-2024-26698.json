{"cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "4.0", "CVE_data_meta": {"ID": "CVE-2024-26698", "ASSIGNER": "cve@kernel.org"}, "problemtype": {"problemtype_data": [{"description": []}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/0e8875de9dad12805ff66e92cd5edea6a421f1cd", "name": "https://git.kernel.org/stable/c/0e8875de9dad12805ff66e92cd5edea6a421f1cd", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/0e8875de9dad12805ff66e92cd5edea6a421f1cd", "name": "https://git.kernel.org/stable/c/0e8875de9dad12805ff66e92cd5edea6a421f1cd", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/22a77c0f5b8233237731df3288d067af51a2fd7b", "name": "https://git.kernel.org/stable/c/22a77c0f5b8233237731df3288d067af51a2fd7b", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/22a77c0f5b8233237731df3288d067af51a2fd7b", "name": "https://git.kernel.org/stable/c/22a77c0f5b8233237731df3288d067af51a2fd7b", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/48a8ccccffbae10c91d31fc872db5c31aba07518", "name": "https://git.kernel.org/stable/c/48a8ccccffbae10c91d31fc872db5c31aba07518", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/48a8ccccffbae10c91d31fc872db5c31aba07518", "name": "https://git.kernel.org/stable/c/48a8ccccffbae10c91d31fc872db5c31aba07518", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/7656372ae190e54e8c8cf1039725a5ea59fdf84a", "name": "https://git.kernel.org/stable/c/7656372ae190e54e8c8cf1039725a5ea59fdf84a", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/7656372ae190e54e8c8cf1039725a5ea59fdf84a", "name": "https://git.kernel.org/stable/c/7656372ae190e54e8c8cf1039725a5ea59fdf84a", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/9ec807e7b6f5fcf9499f3baa69f254bb239a847f", "name": "https://git.kernel.org/stable/c/9ec807e7b6f5fcf9499f3baa69f254bb239a847f", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/9ec807e7b6f5fcf9499f3baa69f254bb239a847f", "name": "https://git.kernel.org/stable/c/9ec807e7b6f5fcf9499f3baa69f254bb239a847f", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/e0526ec5360a48ad3ab2e26e802b0532302a7e11", "name": "https://git.kernel.org/stable/c/e0526ec5360a48ad3ab2e26e802b0532302a7e11", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/e0526ec5360a48ad3ab2e26e802b0532302a7e11", "name": "https://git.kernel.org/stable/c/e0526ec5360a48ad3ab2e26e802b0532302a7e11", "refsource": "", "tags": []}, {"url": "https://lists.debian.org/debian-lts-announce/2024/06/msg00017.html", "name": "https://lists.debian.org/debian-lts-announce/2024/06/msg00017.html", "refsource": "", "tags": []}]}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nhv_netvsc: Fix race condition between netvsc_probe and netvsc_remove\n\nIn commit ac5047671758 (\"hv_netvsc: Disable NAPI before closing the\nVMBus channel\"), napi_disable was getting called for all channels,\nincluding all subchannels without confirming if they are enabled or not.\n\nThis caused hv_netvsc getting hung at napi_disable, when netvsc_probe()\nhas finished running but nvdev->subchan_work has not started yet.\nnetvsc_subchan_work() -> rndis_set_subchannel() has not created the\nsub-channels and because of that netvsc_sc_open() is not running.\nnetvsc_remove() calls cancel_work_sync(&nvdev->subchan_work), for which\nnetvsc_subchan_work did not run.\n\nnetif_napi_add() sets the bit NAPI_STATE_SCHED because it ensures NAPI\ncannot be scheduled. Then netvsc_sc_open() -> napi_enable will clear the\nNAPIF_STATE_SCHED bit, so it can be scheduled. napi_disable() does the\nopposite.\n\nNow during netvsc_device_remove(), when napi_disable is called for those\nsubchannels, napi_disable gets stuck on infinite msleep.\n\nThis fix addresses this problem by ensuring that napi_disable() is not\ngetting called for non-enabled NAPI struct.\nBut netif_napi_del() is still necessary for these non-enabled NAPI struct\nfor cleanup purpose.\n\nCall trace:\n[  654.559417] task:modprobe        state:D stack:    0 pid: 2321 ppid:  1091 flags:0x00004002\n[  654.568030] Call Trace:\n[  654.571221]  <TASK>\n[  654.573790]  __schedule+0x2d6/0x960\n[  654.577733]  schedule+0x69/0xf0\n[  654.581214]  schedule_timeout+0x87/0x140\n[  654.585463]  ? __bpf_trace_tick_stop+0x20/0x20\n[  654.590291]  msleep+0x2d/0x40\n[  654.593625]  napi_disable+0x2b/0x80\n[  654.597437]  netvsc_device_remove+0x8a/0x1f0 [hv_netvsc]\n[  654.603935]  rndis_filter_device_remove+0x194/0x1c0 [hv_netvsc]\n[  654.611101]  ? do_wait_intr+0xb0/0xb0\n[  654.615753]  netvsc_remove+0x7c/0x120 [hv_netvsc]\n[  654.621675]  vmbus_remove+0x27/0x40 [hv_vmbus]"}]}}, "configurations": {"CVE_data_version": "4.0", "nodes": []}, "impact": {}, "publishedDate": "2024-04-03T15:15Z", "lastModifiedDate": "2024-11-21T09:02Z"}