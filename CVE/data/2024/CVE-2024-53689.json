{"publishedDate": "2025-01-11T12:29Z", "lastModifiedDate": "2025-01-20T06:22Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "5.1", "CVE_data_meta": {"ID": "CVE-2024-53689", "ASSIGNER": "Linux"}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nblock: Fix potential deadlock while freezing queue and acquiring sysfs_lock\n\nFor storing a value to a queue attribute, the queue_attr_store function\nfirst freezes the queue (->q_usage_counter(io)) and then acquire\n->sysfs_lock. This seems not correct as the usual ordering should be to\nacquire ->sysfs_lock before freezing the queue. This incorrect ordering\ncauses the following lockdep splat which we are able to reproduce always\nsimply by accessing /sys/kernel/debug file using ls command:\n\n[   57.597146] WARNING: possible circular locking dependency detected\n[   57.597154] 6.12.0-10553-gb86545e02e8c #20 Tainted: G        W\n[   57.597162] ------------------------------------------------------\n[   57.597168] ls/4605 is trying to acquire lock:\n[   57.597176] c00000003eb56710 (&mm->mmap_lock){++++}-{4:4}, at: __might_fault+0x58/0xc0\n[   57.597200]\n               but task is already holding lock:\n[   57.597207] c0000018e27c6810 (&sb->s_type->i_mutex_key#3){++++}-{4:4}, at: iterate_dir+0x94/0x1d4\n[   57.597226]\n               which lock already depends on the new lock.\n\n[   57.597233]\n               the existing dependency chain (in reverse order) is:\n[   57.597241]\n               -> #5 (&sb->s_type->i_mutex_key#3){++++}-{4:4}:\n[   57.597255]        down_write+0x6c/0x18c\n[   57.597264]        start_creating+0xb4/0x24c\n[   57.597274]        debugfs_create_dir+0x2c/0x1e8\n[   57.597283]        blk_register_queue+0xec/0x294\n[   57.597292]        add_disk_fwnode+0x2e4/0x548\n[   57.597302]        brd_alloc+0x2c8/0x338\n[   57.597309]        brd_init+0x100/0x178\n[   57.597317]        do_one_initcall+0x88/0x3e4\n[   57.597326]        kernel_init_freeable+0x3cc/0x6e0\n[   57.597334]        kernel_init+0x34/0x1cc\n[   57.597342]        ret_from_kernel_user_thread+0x14/0x1c\n[   57.597350]\n               -> #4 (&q->debugfs_mutex){+.+.}-{4:4}:\n[   57.597362]        __mutex_lock+0xfc/0x12a0\n[   57.597370]        blk_register_queue+0xd4/0x294\n[   57.597379]        add_disk_fwnode+0x2e4/0x548\n[   57.597388]        brd_alloc+0x2c8/0x338\n[   57.597395]        brd_init+0x100/0x178\n[   57.597402]        do_one_initcall+0x88/0x3e4\n[   57.597410]        kernel_init_freeable+0x3cc/0x6e0\n[   57.597418]        kernel_init+0x34/0x1cc\n[   57.597426]        ret_from_kernel_user_thread+0x14/0x1c\n[   57.597434]\n               -> #3 (&q->sysfs_lock){+.+.}-{4:4}:\n[   57.597446]        __mutex_lock+0xfc/0x12a0\n[   57.597454]        queue_attr_store+0x9c/0x110\n[   57.597462]        sysfs_kf_write+0x70/0xb0\n[   57.597471]        kernfs_fop_write_iter+0x1b0/0x2ac\n[   57.597480]        vfs_write+0x3dc/0x6e8\n[   57.597488]        ksys_write+0x84/0x140\n[   57.597495]        system_call_exception+0x130/0x360\n[   57.597504]        system_call_common+0x160/0x2c4\n[   57.597516]\n               -> #2 (&q->q_usage_counter(io)#21){++++}-{0:0}:\n[   57.597530]        __submit_bio+0x5ec/0x828\n[   57.597538]        submit_bio_noacct_nocheck+0x1e4/0x4f0\n[   57.597547]        iomap_readahead+0x2a0/0x448\n[   57.597556]        xfs_vm_readahead+0x28/0x3c\n[   57.597564]        read_pages+0x88/0x41c\n[   57.597571]        page_cache_ra_unbounded+0x1ac/0x2d8\n[   57.597580]        filemap_get_pages+0x188/0x984\n[   57.597588]        filemap_read+0x13c/0x4bc\n[   57.597596]        xfs_file_buffered_read+0x88/0x17c\n[   57.597605]        xfs_file_read_iter+0xac/0x158\n[   57.597614]        vfs_read+0x2d4/0x3b4\n[   57.597622]        ksys_read+0x84/0x144\n[   57.597629]        system_call_exception+0x130/0x360\n[   57.597637]        system_call_common+0x160/0x2c4\n[   57.597647]\n               -> #1 (mapping.invalidate_lock#2){++++}-{4:4}:\n[   57.597661]        down_read+0x6c/0x220\n[   57.597669]        filemap_fault+0x870/0x100c\n[   57.597677]        xfs_filemap_fault+0xc4/0x18c\n[   57.597684]        __do_fault+0x64/0x164\n[   57.597693]        __handle_mm_fault+0x1274/0x1dac\n[   57.597702]        handle_mm_fault+0x248/0x48\n---truncated---"}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/f1a494df8350da2e673618627cb392a8669825dd"}, {"url": "https://git.kernel.org/stable/c/be26ba96421ab0a8fa2055ccf7db7832a13c44d2"}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}]}}, "impact": {}, "configurations": {"CVE_data_version": "4.0", "nodes": [{"operator": "OR", "children": [], "cpe_match": [{"vulnerable": true, "cpe23Uri": "cpe:2.3:a:linux:linux:f1a494df8350da2e673618627cb392a8669825dd:*:*:*:*:*:*:*", "cpe_name": []}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:a:linux:linux:be26ba96421ab0a8fa2055ccf7db7832a13c44d2:*:*:*:*:*:*:*", "cpe_name": []}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:a:linux:linux:6.11:*:*:*:*:*:*:*", "cpe_name": []}]}]}}