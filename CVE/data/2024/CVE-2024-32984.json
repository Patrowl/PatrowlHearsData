{"publishedDate": "2024-05-01T11:15Z", "lastModifiedDate": "2024-11-21T09:16Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2024-32984", "ASSIGNER": "security-advisories@github.com"}, "description": {"description_data": [{"lang": "en", "value": "Yamux is a stream multiplexer over reliable, ordered connections such as TCP/IP. The Rust implementation of the Yamux stream multiplexer uses a vector for pending frames. This vector is not bounded in length. Every time the Yamux protocol requires sending of a new frame, this frame gets appended to this vector. This can be remotely triggered in a number of ways, for example by: 1. Opening a new libp2p Identify stream. This causes the node to send its Identify message. Of course, every other protocol that causes the sending of data also works. The larger the response, the more data is enqueued. 2. Sending a Yamux Ping frame. This causes a Pong frame to be enqueued. Under normal circumstances, this queue of pending frames would be drained once they\u2019re sent out over the network. However, the attacker can use TCP\u2019s receive window mechanism to prevent the victim from sending out any data: By not reading from the TCP connection, the receive window will never be increased, and the victim won\u2019t be able to send out any new data (this is how TCP implements backpressure). Once this happens, Yamux\u2019s queue of pending frames will start growing indefinitely. The queue will only be drained once the underlying TCP connection is closed. An attacker can cause a remote node to run out of memory, which will result in the corresponding process getting terminated by the operating system.\n"}, {"lang": "es", "value": "Yamux es un multiplexor de flujo a trav\u00e9s de conexiones ordenadas y confiables como TCP/IP. La implementaci\u00f3n Rust del multiplexor de flujo Yamux utiliza un vector para tramas pendientes. Este vector no est\u00e1 limitado en longitud. Cada vez que el protocolo Yamux requiere el env\u00edo de una nueva trama, esta trama se agrega a este vector. Esto se puede activar de forma remota de varias maneras, por ejemplo: 1. Abriendo una nueva secuencia de identificaci\u00f3n libp2p. Esto hace que el nodo env\u00ede su mensaje de identificaci\u00f3n. Por supuesto, tambi\u00e9n funcionan todos los dem\u00e1s protocolos que provocan el env\u00edo de datos. Cuanto mayor sea la respuesta, m\u00e1s datos se pondr\u00e1n en cola. 2. Env\u00edo de una trama Ping de Yamux. Esto hace que una trama Pong se ponga en cola. En circunstancias normales, esta cola de tramas pendientes se agotar\u00eda una vez que se env\u00eden a trav\u00e9s de la red. Sin embargo, el atacante puede utilizar el mecanismo de ventana de recepci\u00f3n de TCP para evitar que la v\u00edctima env\u00ede datos: al no leer desde la conexi\u00f3n TCP, la ventana de recepci\u00f3n nunca aumentar\u00e1 y la v\u00edctima no podr\u00e1 enviar ning\u00fan dato nuevo. (As\u00ed es como TCP implementa la contrapresi\u00f3n). Una vez que esto suceda, la cola de fotogramas pendientes de Yamux comenzar\u00e1 a crecer indefinidamente. La cola solo se drenar\u00e1 una vez que se cierre la conexi\u00f3n TCP subyacente. Un atacante puede hacer que un nodo remoto se quede sin memoria, lo que provocar\u00e1 que el sistema operativo finalice el proceso correspondiente."}]}, "references": {"reference_data": [{"url": "https://github.com/libp2p/rust-yamux/blob/yamux-v0.13.1/yamux/src/connection.rs#L289", "name": "", "refsource": "", "tags": []}, {"url": "https://github.com/libp2p/rust-yamux/security/advisories/GHSA-3999-5ffv-wp2r", "name": "", "refsource": "", "tags": []}, {"url": "https://github.com/sigp/rust-yamux/commit/6689e227a48258a52347cd1d984adfc94afc6f7a", "name": "", "refsource": "", "tags": []}, {"url": "https://github.com/libp2p/rust-yamux/blob/yamux-v0.13.1/yamux/src/connection.rs#L289", "name": "", "refsource": "", "tags": []}, {"url": "https://github.com/libp2p/rust-yamux/security/advisories/GHSA-3999-5ffv-wp2r", "name": "", "refsource": "", "tags": []}, {"url": "https://github.com/sigp/rust-yamux/commit/6689e227a48258a52347cd1d984adfc94afc6f7a", "name": "", "refsource": "", "tags": []}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "CWE-400"}]}]}}, "impact": {"baseMetricV3": {"exploitabilityScore": 3.9, "impactScore": 3.6, "cvssV3": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "baseScore": 7.5, "baseSeverity": "HIGH", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH"}}}, "configurations": {"CVE_data_version": "4.0", "nodes": []}}