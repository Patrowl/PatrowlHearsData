{"cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "4.0", "CVE_data_meta": {"ID": "CVE-2024-35986", "ASSIGNER": "cve@kernel.org"}, "problemtype": {"problemtype_data": [{"description": []}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/25b3498485ac281e5851700e33b97f12c9533fd8", "name": "https://git.kernel.org/stable/c/25b3498485ac281e5851700e33b97f12c9533fd8", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/25b3498485ac281e5851700e33b97f12c9533fd8", "name": "https://git.kernel.org/stable/c/25b3498485ac281e5851700e33b97f12c9533fd8", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/73224a5d2180066c7fe05b4656647601ba08d588", "name": "https://git.kernel.org/stable/c/73224a5d2180066c7fe05b4656647601ba08d588", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/73224a5d2180066c7fe05b4656647601ba08d588", "name": "https://git.kernel.org/stable/c/73224a5d2180066c7fe05b4656647601ba08d588", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/9827caa5105fb16d1fae2e75c8d0e4662014b3ca", "name": "https://git.kernel.org/stable/c/9827caa5105fb16d1fae2e75c8d0e4662014b3ca", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/9827caa5105fb16d1fae2e75c8d0e4662014b3ca", "name": "https://git.kernel.org/stable/c/9827caa5105fb16d1fae2e75c8d0e4662014b3ca", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/bf6e4ee5c43690e4c5a8a057bbcd4ff986bed052", "name": "https://git.kernel.org/stable/c/bf6e4ee5c43690e4c5a8a057bbcd4ff986bed052", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/bf6e4ee5c43690e4c5a8a057bbcd4ff986bed052", "name": "https://git.kernel.org/stable/c/bf6e4ee5c43690e4c5a8a057bbcd4ff986bed052", "refsource": "", "tags": []}]}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nphy: ti: tusb1210: Resolve charger-det crash if charger psy is unregistered\n\nThe power_supply frame-work is not really designed for there to be\nlong living in kernel references to power_supply devices.\n\nSpecifically unregistering a power_supply while some other code has\na reference to it triggers a WARN in power_supply_unregister():\n\n\tWARN_ON(atomic_dec_return(&psy->use_cnt));\n\nFolllowed by the power_supply still getting removed and the\nbacking data freed anyway, leaving the tusb1210 charger-detect code\nwith a dangling reference, resulting in a crash the next time\ntusb1210_get_online() is called.\n\nFix this by only holding the reference in tusb1210_get_online()\nfreeing it at the end of the function. Note this still leaves\na theoretical race window, but it avoids the issue when manually\nrmmod-ing the charger chip driver during development."}]}}, "configurations": {"CVE_data_version": "4.0", "nodes": []}, "impact": {}, "publishedDate": "2024-05-20T10:15Z", "lastModifiedDate": "2024-11-21T09:21Z"}