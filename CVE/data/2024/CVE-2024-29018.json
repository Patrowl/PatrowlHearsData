{"publishedDate": "2024-03-20T21:15Z", "lastModifiedDate": "2025-04-09T15:40Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2024-29018", "ASSIGNER": "security-advisories@github.com"}, "description": {"description_data": [{"lang": "en", "value": "Moby is an open source container framework that is a key component of Docker Engine, Docker Desktop, and other distributions of container tooling or runtimes. Moby's networking implementation allows for many networks, each with their own IP address range and gateway, to be defined. This feature is frequently referred to as custom networks, as each network can have a different driver, set of parameters and thus behaviors. When creating a network, the `--internal` flag is used to designate a network as _internal_. The `internal` attribute in a docker-compose.yml file may also be used to mark a network _internal_, and other API clients may specify the `internal` parameter as well.\n\nWhen containers with networking are created, they are assigned unique network interfaces and IP addresses. The host serves as a router for non-internal networks, with a gateway IP that provides SNAT/DNAT to/from container IPs.\n\nContainers on an internal network may communicate between each other, but are precluded from communicating with any networks the host has access to (LAN or WAN) as no default route is configured, and firewall rules are set up to drop all outgoing traffic. Communication with the gateway IP address (and thus appropriately configured host services) is possible, and the host may communicate with any container IP directly.\n\nIn addition to configuring the Linux kernel's various networking features to enable container networking, `dockerd` directly provides some services to container networks. Principal among these is serving as a resolver, enabling service discovery, and resolution of names from an upstream resolver.\n\nWhen a DNS request for a name that does not correspond to a container is received, the request is forwarded to the configured upstream resolver. This request is made from the container's network namespace: the level of access and routing of traffic is the same as if the request was made by the container itself.\n\nAs a consequence of this design, containers solely attached to an internal network will be unable to resolve names using the upstream resolver, as the container itself is unable to communicate with that nameserver. Only the names of containers also attached to the internal network are able to be resolved.\n\nMany systems run a local forwarding DNS resolver. As the host and any containers have separate loopback devices, a consequence of the design described above is that containers are unable to resolve names from the host's configured resolver, as they cannot reach these addresses on the host loopback device. To bridge this gap, and to allow containers to properly resolve names even when a local forwarding resolver is used on a loopback address, `dockerd` detects this scenario and instead forward DNS requests from the host namework namespace. The loopback resolver then forwards the requests to its configured upstream resolvers, as expected.\n\nBecause `dockerd` forwards DNS requests to the host loopback device, bypassing the container network namespace's normal routing semantics entirely, internal networks can unexpectedly forward DNS requests to an external nameserver. By registering a domain for which they control the authoritative nameservers, an attacker could arrange for a compromised container to exfiltrate data by encoding it in DNS queries that will eventually be answered by their nameservers.\n\nDocker Desktop is not affected, as Docker Desktop always runs an internal resolver on a RFC 1918 address.\n\nMoby releases 26.0.0, 25.0.4, and 23.0.11 are patched to prevent forwarding any DNS requests from internal networks. As a workaround, run containers intended to be solely attached to internal networks with a custom upstream address, which will force all upstream DNS queries to be resolved from the container's network namespace."}, {"lang": "es", "value": "Moby es un marco de contenedores de c\u00f3digo abierto que es un componente clave de Docker Engine, Docker Desktop y otras distribuciones de herramientas o tiempos de ejecuci\u00f3n de contenedores. La implementaci\u00f3n de redes de Moby permite definir muchas redes, cada una con su propio rango de direcciones IP y puerta de enlace. Esta caracter\u00edstica se conoce frecuentemente como redes personalizadas, ya que cada red puede tener un controlador, un conjunto de par\u00e1metros y, por lo tanto, comportamientos diferentes. Al crear una red, el indicador `--internal` se utiliza para designar una red como _internal_. El atributo \"interno\" en un archivo docker-compose.yml tambi\u00e9n se puede usar para marcar una red como _interna_, y otros clientes API tambi\u00e9n pueden especificar el par\u00e1metro \"interno\". Cuando se crean contenedores con redes, se les asignan interfaces de red y direcciones IP \u00fanicas. El host sirve como enrutador para redes no internas, con una IP de puerta de enlace que proporciona SNAT/DNAT hacia/desde las IP del contenedor. Los contenedores en una red interna pueden comunicarse entre s\u00ed, pero no pueden comunicarse con ninguna red a la que el host tenga acceso (LAN o WAN), ya que no hay una ruta predeterminada configurada y las reglas de firewall est\u00e1n configuradas para eliminar todo el tr\u00e1fico saliente. Es posible la comunicaci\u00f3n con la direcci\u00f3n IP de la puerta de enlace (y, por lo tanto, con los servicios de host configurados adecuadamente), y el host puede comunicarse directamente con cualquier IP de contenedor. Adem\u00e1s de configurar las diversas funciones de red del kernel de Linux para habilitar la red de contenedores, `dockerd` proporciona directamente algunos servicios a las redes de contenedores. El principal de ellos es servir como solucionador, permitiendo el descubrimiento de servicios y la resoluci\u00f3n de nombres desde un solucionador ascendente. Cuando se recibe una solicitud de DNS para un nombre que no corresponde a un contenedor, la solicitud se reenv\u00eda al solucionador ascendente configurado. Esta solicitud se realiza desde el espacio de nombres de la red del contenedor: el nivel de acceso y enrutamiento del tr\u00e1fico es el mismo que si la solicitud la realizara el propio contenedor. Como consecuencia de este dise\u00f1o, los contenedores conectados \u00fanicamente a una red interna no podr\u00e1n resolver nombres utilizando el solucionador ascendente, ya que el contenedor en s\u00ed no puede comunicarse con ese servidor de nombres. S\u00f3lo se pueden resolver los nombres de los contenedores tambi\u00e9n conectados a la red interna. Muchos sistemas ejecutan un solucionador de DNS de reenv\u00edo local. Como el host y cualquier contenedor tienen dispositivos de loopback separados, una consecuencia del dise\u00f1o descrito anteriormente es que los contenedores no pueden resolver nombres desde el solucionador configurado del host, ya que no pueden alcanzar estas direcciones en el dispositivo de loopback del host. Para cerrar esta brecha y permitir que los contenedores resuelvan nombres correctamente incluso cuando se utiliza un solucionador de reenv\u00edo local en una direcci\u00f3n de loopback, `dockerd` detecta este escenario y en su lugar reenv\u00eda solicitudes DNS desde el espacio de nombres del trabajo de nombres del host. Luego, el solucionador de bucle invertido reenv\u00eda las solicitudes a sus solucionadores ascendentes configurados, como se esperaba. Debido a que `dockerd` reenv\u00eda solicitudes de DNS al dispositivo de bucle invertido del host, omitiendo por completo la sem\u00e1ntica de enrutamiento normal del espacio de nombres de la red del contenedor, las redes internas pueden reenviar solicitudes de DNS inesperadamente a un servidor de nombres externo. Al registrar un dominio para el cual controlan los servidores de nombres autorizados, un atacante podr\u00eda hacer que un contenedor comprometido extraiga datos codific\u00e1ndolos en consultas DNS que eventualmente ser\u00e1n respondidas por sus servidores de nombres.---TRUNCADO---"}]}, "references": {"reference_data": [{"url": "https://github.com/moby/moby/pull/46609", "name": "", "refsource": "", "tags": ["Issue Tracking"]}, {"url": "https://github.com/moby/moby/security/advisories/GHSA-mq39-4gv4-mvpx", "name": "", "refsource": "", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/moby/moby/pull/46609", "name": "", "refsource": "", "tags": ["Issue Tracking"]}, {"url": "https://github.com/moby/moby/security/advisories/GHSA-mq39-4gv4-mvpx", "name": "", "refsource": "", "tags": ["Vendor Advisory"]}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "CWE-669"}]}]}}, "impact": {"baseMetricV3": {"exploitabilityScore": 3.9, "impactScore": 3.6, "cvssV3": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "baseScore": 7.5, "baseSeverity": "HIGH", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE"}}}, "configurations": {"CVE_data_version": "4.0", "nodes": [{"operator": "OR", "negate": false, "children": [], "cpe_match": [{"vulnerable": true, "cpe23Uri": "cpe:2.3:a:mobyproject:moby:*:*:*:*:*:*:*:*", "matchCriteriaId": "F4E13D47-6199-4B46-B318-A62AEEAE309F", "cpe_name": [], "versionEndExcluding": "23.0.11"}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:a:mobyproject:moby:*:*:*:*:*:*:*:*", "matchCriteriaId": "01ABEA35-A81E-4340-81DB-EECFBBE53A4A", "cpe_name": [], "versionStartIncluding": "24.0.0", "versionEndExcluding": "25.0.5"}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:a:mobyproject:moby:26.0.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "38622C05-D42E-4CE6-B0E4-BAF3BE755FB7", "cpe_name": []}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:a:mobyproject:moby:26.0.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "40F72F18-4490-4AB7-8918-EE9F97C0696D", "cpe_name": []}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:a:mobyproject:moby:26.0.0:rc3:*:*:*:*:*:*", "matchCriteriaId": "73634C7C-CEBD-4ADC-8DF5-E1907A4FD37A", "cpe_name": []}]}]}}