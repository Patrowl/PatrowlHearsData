{"publishedDate": "2025-04-16T15:15Z", "lastModifiedDate": "2025-04-17T20:22Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2024-58093", "ASSIGNER": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nPCI/ASPM: Fix link state exit during switch upstream function removal\n\nBefore 456d8aa37d0f (\"PCI/ASPM: Disable ASPM on MFD function removal to\navoid use-after-free\"), we would free the ASPM link only after the last\nfunction on the bus pertaining to the given link was removed.\n\nThat was too late. If function 0 is removed before sibling function,\nlink->downstream would point to free'd memory after.\n\nAfter above change, we freed the ASPM parent link state upon any function\nremoval on the bus pertaining to a given link.\n\nThat is too early. If the link is to a PCIe switch with MFD on the upstream\nport, then removing functions other than 0 first would free a link which\nstill remains parent_link to the remaining downstream ports.\n\nThe resulting GPFs are especially frequent during hot-unplug, because\npciehp removes devices on the link bus in reverse order.\n\nOn that switch, function 0 is the virtual P2P bridge to the internal bus.\nFree exactly when function 0 is removed -- before the parent link is\nobsolete, but after all subordinate links are gone.\n\n[kwilczynski: commit log]"}, {"lang": "es", "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: PCI/ASPM: Correcci\u00f3n de la salida del estado del enlace durante la eliminaci\u00f3n de la funci\u00f3n ascendente del conmutador. Antes de la versi\u00f3n 456d8aa37d0f (\"PCI/ASPM: Deshabilitar ASPM al eliminar la funci\u00f3n MFD para evitar el use-after-free\"), liber\u00e1bamos el enlace ASPM solo despu\u00e9s de eliminar la \u00faltima funci\u00f3n del bus correspondiente al enlace en cuesti\u00f3n. Era demasiado tarde. Si la funci\u00f3n 0 se elimina antes que la funci\u00f3n hermana, enlace-&gt;descendente apuntar\u00eda a la memoria liberada despu\u00e9s. Tras el cambio mencionado, liber\u00e1bamos el estado del enlace principal ASPM al eliminar cualquier funci\u00f3n del bus correspondiente a un enlace determinado. Era demasiado pronto. Si el enlace es a un conmutador PCIe con MFD en el puerto ascendente, eliminar primero las funciones distintas de la 0 liberar\u00eda un enlace que a\u00fan permanece como parent_link para los puertos descendentes restantes. Los GPF resultantes son especialmente frecuentes durante la desconexi\u00f3n en caliente, ya que pciehp elimina los dispositivos del bus de enlace en orden inverso. En ese conmutador, la funci\u00f3n 0 es el puente P2P virtual al bus interno. Se libera exactamente cuando se elimina la funci\u00f3n 0: antes de que el enlace principal quede obsoleto, pero despu\u00e9s de que todos los enlaces subordinados desaparezcan. [kwilczynski: registro de confirmaciones]"}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/cbf937dcadfd571a434f8074d057b32cd14fbea5", "name": "", "refsource": "", "tags": []}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}]}}, "impact": {}, "configurations": {"CVE_data_version": "4.0", "nodes": []}}