{"publishedDate": "2024-10-11T20:15Z", "lastModifiedDate": "2025-08-20T19:23Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2024-38365", "ASSIGNER": "security-advisories@github.com"}, "description": {"description_data": [{"lang": "en", "value": "btcd is an alternative full node bitcoin implementation written in Go (golang). The btcd Bitcoin client (versions 0.10 to 0.24) did not correctly re-implement Bitcoin Core's \"FindAndDelete()\" functionality. This logic is consensus-critical: the difference in behavior with the other Bitcoin clients can lead to btcd clients accepting an invalid Bitcoin block (or rejecting a valid one). This consensus failure can be leveraged to cause a chain split (accepting an invalid Bitcoin block) or be exploited to DoS the btcd nodes (rejecting a valid Bitcoin block). An attacker can create a standard transaction where FindAndDelete doesn't return a match but removeOpCodeByData does making btcd get a different sighash, leading to a chain split. Importantly, this vulnerability can be exploited remotely by any Bitcoin user and does not require any hash power. This is because the difference in behavior can be triggered by a \"standard\" Bitcoin transaction, that is a transaction which gets relayed through the P2P network before it gets included in a Bitcoin block. `removeOpcodeByData(script []byte, dataToRemove []byte)` removes any data pushes from `script` that contain `dataToRemove`. However, `FindAndDelete` only removes exact matches. So for example, with `script = \"<data> <data||foo>\"` and `dataToRemove = \"data\"` btcd will remove both data pushes but Bitcoin Core's `FindAndDelete` only removes the first `<data>` push. This has been patched in btcd version v0.24.2. Users are advised to upgrade. There are no known workarounds for this issue."}, {"lang": "es", "value": "btcd es una implementaci\u00f3n alternativa de nodo completo de bitcoin escrita en Go (golang). El cliente de Bitcoin btcd (versiones 0.10 a 0.24) no volvi\u00f3 a implementar correctamente la funcionalidad \"FindAndDelete()\" de Bitcoin Core. Esta l\u00f3gica es cr\u00edtica para el consenso: la diferencia de comportamiento con los otros clientes de Bitcoin puede llevar a que los clientes de btcd acepten un bloque de Bitcoin no v\u00e1lido (o rechacen uno v\u00e1lido). Esta falla de consenso se puede aprovechar para causar una divisi\u00f3n de la cadena (aceptando un bloque de Bitcoin no v\u00e1lido) o se puede explotar para atacar los nodos de btcd (rechazando un bloque de Bitcoin v\u00e1lido). Un atacante puede crear una transacci\u00f3n est\u00e1ndar donde FindAndDelete no devuelva una coincidencia pero removeOpCodeByData s\u00ed, lo que hace que btcd obtenga un signo diferente, lo que lleva a una divisi\u00f3n de la cadena. Es importante destacar que esta vulnerabilidad puede ser explotada de forma remota por cualquier usuario de Bitcoin y no requiere ning\u00fan poder de hash. Esto se debe a que la diferencia en el comportamiento puede ser provocada por una transacci\u00f3n \"est\u00e1ndar\" de Bitcoin, es decir, una transacci\u00f3n que se retransmite a trav\u00e9s de la red P2P antes de que se incluya en un bloque de Bitcoin. `removeOpcodeByData(script []byte, dataToRemove []byte)` elimina cualquier env\u00edo de datos de `script` que contenga `dataToRemove`. Sin embargo, `FindAndDelete` solo elimina las coincidencias exactas. Entonces, por ejemplo, con `script = \" \"` y `dataToRemove = \"data\"` btcd eliminar\u00e1 ambos env\u00edos de datos, pero `FindAndDelete` de Bitcoin Core solo elimina el primer env\u00edo ``. Esto se ha corregido en la versi\u00f3n v0.24.2 de btcd. Se recomienda a los usuarios que actualicen. No hay workarounds para este problema."}]}, "references": {"reference_data": [{"url": "https://delvingbitcoin.org/t/cve-2024-38365-public-disclosure-btcd-findanddelete-bug/1184", "name": "", "refsource": "", "tags": ["Issue Tracking"]}, {"url": "https://github.com/btcsuite/btcd/commit/04469e600e7d4a58881e2e5447d19024e49800f5", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://github.com/btcsuite/btcd/releases/tag/v0.24.2", "name": "", "refsource": "", "tags": ["Release Notes"]}, {"url": "https://github.com/btcsuite/btcd/security/advisories/GHSA-27vh-h6mc-q6g8", "name": "", "refsource": "", "tags": ["Vendor Advisory"]}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "CWE-670"}]}]}}, "impact": {"baseMetricV3": {"exploitabilityScore": 2.8, "impactScore": 5.2, "cvssV3": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:H", "baseScore": 8.1, "baseSeverity": "HIGH", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "HIGH"}}}, "configurations": {"CVE_data_version": "4.0", "nodes": [{"operator": "OR", "negate": false, "children": [], "cpe_match": [{"vulnerable": true, "cpe23Uri": "cpe:2.3:a:btcd_project:btcd:*:*:*:*:*:*:*:*", "matchCriteriaId": "174235E7-7C71-4299-B871-30D15F9FBECE", "cpe_name": [], "versionStartIncluding": "0.10.0", "versionEndExcluding": "0.24.2"}]}]}}