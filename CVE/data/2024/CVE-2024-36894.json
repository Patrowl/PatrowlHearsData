{"cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "4.0", "CVE_data_meta": {"ID": "CVE-2024-36894", "ASSIGNER": "cve@kernel.org"}, "problemtype": {"problemtype_data": [{"description": []}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/24729b307eefcd7c476065cd7351c1a018082c19", "name": "https://git.kernel.org/stable/c/24729b307eefcd7c476065cd7351c1a018082c19", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/24729b307eefcd7c476065cd7351c1a018082c19", "name": "https://git.kernel.org/stable/c/24729b307eefcd7c476065cd7351c1a018082c19", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/3613e5023f09b3308545e9d1acda86017ebd418a", "name": "https://git.kernel.org/stable/c/3613e5023f09b3308545e9d1acda86017ebd418a", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/3613e5023f09b3308545e9d1acda86017ebd418a", "name": "https://git.kernel.org/stable/c/3613e5023f09b3308545e9d1acda86017ebd418a", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/73c05ad46bb4fbbdb346004651576d1c8dbcffbb", "name": "https://git.kernel.org/stable/c/73c05ad46bb4fbbdb346004651576d1c8dbcffbb", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/73c05ad46bb4fbbdb346004651576d1c8dbcffbb", "name": "https://git.kernel.org/stable/c/73c05ad46bb4fbbdb346004651576d1c8dbcffbb", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/9e72ef59cbe61cd1243857a6418ca92104275867", "name": "https://git.kernel.org/stable/c/9e72ef59cbe61cd1243857a6418ca92104275867", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/9e72ef59cbe61cd1243857a6418ca92104275867", "name": "https://git.kernel.org/stable/c/9e72ef59cbe61cd1243857a6418ca92104275867", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/a0fdccb1c9e027e3195f947f61aa87d6d0d2ea14", "name": "https://git.kernel.org/stable/c/a0fdccb1c9e027e3195f947f61aa87d6d0d2ea14", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/a0fdccb1c9e027e3195f947f61aa87d6d0d2ea14", "name": "https://git.kernel.org/stable/c/a0fdccb1c9e027e3195f947f61aa87d6d0d2ea14", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/d7461830823242702f5d84084bcccb25159003f4", "name": "https://git.kernel.org/stable/c/d7461830823242702f5d84084bcccb25159003f4", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/d7461830823242702f5d84084bcccb25159003f4", "name": "https://git.kernel.org/stable/c/d7461830823242702f5d84084bcccb25159003f4", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/e500b1c4e29ad0bd1c1332a1eaea2913627a92dd", "name": "https://git.kernel.org/stable/c/e500b1c4e29ad0bd1c1332a1eaea2913627a92dd", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/e500b1c4e29ad0bd1c1332a1eaea2913627a92dd", "name": "https://git.kernel.org/stable/c/e500b1c4e29ad0bd1c1332a1eaea2913627a92dd", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/f71a53148ce34898fef099b75386a3a9f4449311", "name": "https://git.kernel.org/stable/c/f71a53148ce34898fef099b75386a3a9f4449311", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/f71a53148ce34898fef099b75386a3a9f4449311", "name": "https://git.kernel.org/stable/c/f71a53148ce34898fef099b75386a3a9f4449311", "refsource": "", "tags": []}]}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nusb: gadget: f_fs: Fix race between aio_cancel() and AIO request complete\n\nFFS based applications can utilize the aio_cancel() callback to dequeue\npending USB requests submitted to the UDC.  There is a scenario where the\nFFS application issues an AIO cancel call, while the UDC is handling a\nsoft disconnect.  For a DWC3 based implementation, the callstack looks\nlike the following:\n\n    DWC3 Gadget                               FFS Application\ndwc3_gadget_soft_disconnect()              ...\n  --> dwc3_stop_active_transfers()\n    --> dwc3_gadget_giveback(-ESHUTDOWN)\n      --> ffs_epfile_async_io_complete()   ffs_aio_cancel()\n        --> usb_ep_free_request()            --> usb_ep_dequeue()\n\nThere is currently no locking implemented between the AIO completion\nhandler and AIO cancel, so the issue occurs if the completion routine is\nrunning in parallel to an AIO cancel call coming from the FFS application.\nAs the completion call frees the USB request (io_data->req) the FFS\napplication is also referencing it for the usb_ep_dequeue() call.  This can\nlead to accessing a stale/hanging pointer.\n\ncommit b566d38857fc (\"usb: gadget: f_fs: use io_data->status consistently\")\nrelocated the usb_ep_free_request() into ffs_epfile_async_io_complete().\nHowever, in order to properly implement locking to mitigate this issue, the\nspinlock can't be added to ffs_epfile_async_io_complete(), as\nusb_ep_dequeue() (if successfully dequeuing a USB request) will call the\nfunction driver's completion handler in the same context.  Hence, leading\ninto a deadlock.\n\nFix this issue by moving the usb_ep_free_request() back to\nffs_user_copy_worker(), and ensuring that it explicitly sets io_data->req\nto NULL after freeing it within the ffs->eps_lock.  This resolves the race\ncondition above, as the ffs_aio_cancel() routine will not continue\nattempting to dequeue a request that has already been freed, or the\nffs_user_copy_work() not freeing the USB request until the AIO cancel is\ndone referencing it.\n\nThis fix depends on\n  commit b566d38857fc (\"usb: gadget: f_fs: use io_data->status\n  consistently\")"}]}}, "configurations": {"CVE_data_version": "4.0", "nodes": []}, "impact": {}, "publishedDate": "2024-05-30T16:15Z", "lastModifiedDate": "2024-11-21T09:22Z"}