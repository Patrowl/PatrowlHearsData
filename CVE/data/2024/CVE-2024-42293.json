{"publishedDate": "2024-08-17T09:15Z", "lastModifiedDate": "2025-09-29T15:19Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2024-42293", "ASSIGNER": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\narm64: mm: Fix lockless walks with static and dynamic page-table folding\n\nLina reports random oopsen originating from the fast GUP code when\n16K pages are used with 4-level page-tables, the fourth level being\nfolded at runtime due to lack of LPA2.\n\nIn this configuration, the generic implementation of\np4d_offset_lockless() will return a 'p4d_t *' corresponding to the\n'pgd_t' allocated on the stack of the caller, gup_fast_pgd_range().\nThis is normally fine, but when the fourth level of page-table is folded\nat runtime, pud_offset_lockless() will offset from the address of the\n'p4d_t' to calculate the address of the PUD in the same page-table page.\nThis results in a stray stack read when the 'p4d_t' has been allocated\non the stack and can send the walker into the weeds.\n\nFix the problem by providing our own definition of p4d_offset_lockless()\nwhen CONFIG_PGTABLE_LEVELS <= 4 which returns the real page-table\npointer rather than the address of the local stack variable."}, {"lang": "es", "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: arm64: mm: corrige recorridos sin bloqueo con plegado de tablas de p\u00e1ginas est\u00e1ticas y din\u00e1micas. Lina informa oopsen aleatorios que se originan en el c\u00f3digo GUP r\u00e1pido cuando se utilizan p\u00e1ginas de 16 KB con tablas de p\u00e1ginas de 4 niveles. el cuarto nivel se pliega en tiempo de ejecuci\u00f3n debido a la falta de LPA2. En esta configuraci\u00f3n, la implementaci\u00f3n gen\u00e9rica de p4d_offset_lockless() devolver\u00e1 un 'p4d_t *' correspondiente al 'pgd_t' asignado en la pila de la persona que llama, gup_fast_pgd_range(). Esto normalmente est\u00e1 bien, pero cuando el cuarto nivel de la tabla de p\u00e1ginas se pliega en tiempo de ejecuci\u00f3n, pud_offset_lockless() se desplazar\u00e1 de la direcci\u00f3n de 'p4d_t' para calcular la direcci\u00f3n del PUD en la misma p\u00e1gina de la tabla de p\u00e1ginas. Esto da como resultado una lectura de pila perdida cuando el 'p4d_t' se ha asignado en la pila y puede enviar al caminante hacia la maleza. Solucione el problema proporcionando nuestra propia definici\u00f3n de p4d_offset_lockless() cuando CONFIG_PGTABLE_LEVELS &lt;= 4, que devuelve el puntero de la tabla de p\u00e1ginas real en lugar de la direcci\u00f3n de la variable de pila local."}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/36639013b3462c06ff8e3400a427f775b4fc97f5", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://git.kernel.org/stable/c/78672d49d3eebbcda3589f4d6e589caf357c5a59", "name": "", "refsource": "", "tags": ["Patch"]}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "CWE-125"}]}]}}, "impact": {"baseMetricV3": {"exploitabilityScore": 1.8, "impactScore": 3.6, "cvssV3": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "baseScore": 5.5, "baseSeverity": "MEDIUM", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH"}}}, "configurations": {"CVE_data_version": "4.0", "nodes": [{"operator": "OR", "negate": false, "children": [], "cpe_match": [{"vulnerable": true, "cpe23Uri": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "matchCriteriaId": "3332351F-A9A1-4AD4-BEDB-5B3BBD5B7279", "cpe_name": [], "versionStartIncluding": "6.9", "versionEndExcluding": "6.10.3"}]}]}}