{"cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "4.0", "CVE_data_meta": {"ID": "CVE-2024-26803", "ASSIGNER": "cve@kernel.org"}, "problemtype": {"problemtype_data": [{"description": []}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/16edf51f33f52dff70ed455bc40a6cc443c04664", "name": "https://git.kernel.org/stable/c/16edf51f33f52dff70ed455bc40a6cc443c04664", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/16edf51f33f52dff70ed455bc40a6cc443c04664", "name": "https://git.kernel.org/stable/c/16edf51f33f52dff70ed455bc40a6cc443c04664", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/7985d73961bbb4e726c1be7b9cd26becc7be8325", "name": "https://git.kernel.org/stable/c/7985d73961bbb4e726c1be7b9cd26becc7be8325", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/7985d73961bbb4e726c1be7b9cd26becc7be8325", "name": "https://git.kernel.org/stable/c/7985d73961bbb4e726c1be7b9cd26becc7be8325", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/8f7a3894e58e6f5d5815533cfde60e3838947941", "name": "https://git.kernel.org/stable/c/8f7a3894e58e6f5d5815533cfde60e3838947941", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/8f7a3894e58e6f5d5815533cfde60e3838947941", "name": "https://git.kernel.org/stable/c/8f7a3894e58e6f5d5815533cfde60e3838947941", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/f011c103e654d83dc85f057a7d1bd0960d02831c", "name": "https://git.kernel.org/stable/c/f011c103e654d83dc85f057a7d1bd0960d02831c", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/f011c103e654d83dc85f057a7d1bd0960d02831c", "name": "https://git.kernel.org/stable/c/f011c103e654d83dc85f057a7d1bd0960d02831c", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/fe9f801355f0b47668419f30f1fac1cf4539e736", "name": "https://git.kernel.org/stable/c/fe9f801355f0b47668419f30f1fac1cf4539e736", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/fe9f801355f0b47668419f30f1fac1cf4539e736", "name": "https://git.kernel.org/stable/c/fe9f801355f0b47668419f30f1fac1cf4539e736", "refsource": "", "tags": []}]}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nnet: veth: clear GRO when clearing XDP even when down\n\nveth sets NETIF_F_GRO automatically when XDP is enabled,\nbecause both features use the same NAPI machinery.\n\nThe logic to clear NETIF_F_GRO sits in veth_disable_xdp() which\nis called both on ndo_stop and when XDP is turned off.\nTo avoid the flag from being cleared when the device is brought\ndown, the clearing is skipped when IFF_UP is not set.\nBringing the device down should indeed not modify its features.\n\nUnfortunately, this means that clearing is also skipped when\nXDP is disabled _while_ the device is down. And there's nothing\non the open path to bring the device features back into sync.\nIOW if user enables XDP, disables it and then brings the device\nup we'll end up with a stray GRO flag set but no NAPI instances.\n\nWe don't depend on the GRO flag on the datapath, so the datapath\nwon't crash. We will crash (or hang), however, next time features\nare sync'ed (either by user via ethtool or peer changing its config).\nThe GRO flag will go away, and veth will try to disable the NAPIs.\nBut the open path never created them since XDP was off, the GRO flag\nwas a stray. If NAPI was initialized before we'll hang in napi_disable().\nIf it never was we'll crash trying to stop uninitialized hrtimer.\n\nMove the GRO flag updates to the XDP enable / disable paths,\ninstead of mixing them with the ndo_open / ndo_close paths."}]}}, "configurations": {"CVE_data_version": "4.0", "nodes": []}, "impact": {}, "publishedDate": "2024-04-04T09:15Z", "lastModifiedDate": "2024-11-21T09:03Z"}