{"cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "4.0", "CVE_data_meta": {"ID": "CVE-2024-41062", "ASSIGNER": "cve@kernel.org"}, "problemtype": {"problemtype_data": [{"description": []}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/3b732449b78183d17178db40be3a4401cf3cd629", "name": "https://git.kernel.org/stable/c/3b732449b78183d17178db40be3a4401cf3cd629", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/3b732449b78183d17178db40be3a4401cf3cd629", "name": "https://git.kernel.org/stable/c/3b732449b78183d17178db40be3a4401cf3cd629", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/605572e64cd9cebb05ed609d96cff05b50d18cdf", "name": "https://git.kernel.org/stable/c/605572e64cd9cebb05ed609d96cff05b50d18cdf", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/605572e64cd9cebb05ed609d96cff05b50d18cdf", "name": "https://git.kernel.org/stable/c/605572e64cd9cebb05ed609d96cff05b50d18cdf", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/89e856e124f9ae548572c56b1b70c2255705f8fe", "name": "https://git.kernel.org/stable/c/89e856e124f9ae548572c56b1b70c2255705f8fe", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/89e856e124f9ae548572c56b1b70c2255705f8fe", "name": "https://git.kernel.org/stable/c/89e856e124f9ae548572c56b1b70c2255705f8fe", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/b803f30ea23e0968b6c8285c42adf0d862ab2bf6", "name": "https://git.kernel.org/stable/c/b803f30ea23e0968b6c8285c42adf0d862ab2bf6", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/b803f30ea23e0968b6c8285c42adf0d862ab2bf6", "name": "https://git.kernel.org/stable/c/b803f30ea23e0968b6c8285c42adf0d862ab2bf6", "refsource": "", "tags": []}]}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nbluetooth/l2cap: sync sock recv cb and release\n\nThe problem occurs between the system call to close the sock and hci_rx_work,\nwhere the former releases the sock and the latter accesses it without lock protection.\n\n           CPU0                       CPU1\n           ----                       ----\n           sock_close                 hci_rx_work\n\t   l2cap_sock_release         hci_acldata_packet\n\t   l2cap_sock_kill            l2cap_recv_frame\n\t   sk_free                    l2cap_conless_channel\n\t                              l2cap_sock_recv_cb\n\nIf hci_rx_work processes the data that needs to be received before the sock is\nclosed, then everything is normal; Otherwise, the work thread may access the\nreleased sock when receiving data.\n\nAdd a chan mutex in the rx callback of the sock to achieve synchronization between\nthe sock release and recv cb.\n\nSock is dead, so set chan data to NULL, avoid others use invalid sock pointer."}]}}, "configurations": {"CVE_data_version": "4.0", "nodes": []}, "impact": {}, "publishedDate": "2024-07-29T15:15Z", "lastModifiedDate": "2024-11-21T09:32Z"}