{"cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "4.0", "CVE_data_meta": {"ID": "CVE-2024-40915", "ASSIGNER": "cve@kernel.org"}, "problemtype": {"problemtype_data": [{"description": []}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/8661a7af04991201640863ad1a0983173f84b5eb", "name": "https://git.kernel.org/stable/c/8661a7af04991201640863ad1a0983173f84b5eb", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/8661a7af04991201640863ad1a0983173f84b5eb", "name": "https://git.kernel.org/stable/c/8661a7af04991201640863ad1a0983173f84b5eb", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/919f8626099d9909b9a9620b05e8c8ab06581876", "name": "https://git.kernel.org/stable/c/919f8626099d9909b9a9620b05e8c8ab06581876", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/919f8626099d9909b9a9620b05e8c8ab06581876", "name": "https://git.kernel.org/stable/c/919f8626099d9909b9a9620b05e8c8ab06581876", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/d5257ceb19d92069195254866421f425aea42915", "name": "https://git.kernel.org/stable/c/d5257ceb19d92069195254866421f425aea42915", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/d5257ceb19d92069195254866421f425aea42915", "name": "https://git.kernel.org/stable/c/d5257ceb19d92069195254866421f425aea42915", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/fb1cf0878328fe75d47f0aed0a65b30126fcefc4", "name": "https://git.kernel.org/stable/c/fb1cf0878328fe75d47f0aed0a65b30126fcefc4", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/fb1cf0878328fe75d47f0aed0a65b30126fcefc4", "name": "https://git.kernel.org/stable/c/fb1cf0878328fe75d47f0aed0a65b30126fcefc4", "refsource": "", "tags": []}]}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nriscv: rewrite __kernel_map_pages() to fix sleeping in invalid context\n\n__kernel_map_pages() is a debug function which clears the valid bit in page\ntable entry for deallocated pages to detect illegal memory accesses to\nfreed pages.\n\nThis function set/clear the valid bit using __set_memory(). __set_memory()\nacquires init_mm's semaphore, and this operation may sleep. This is\nproblematic, because  __kernel_map_pages() can be called in atomic context,\nand thus is illegal to sleep. An example warning that this causes:\n\nBUG: sleeping function called from invalid context at kernel/locking/rwsem.c:1578\nin_atomic(): 1, irqs_disabled(): 0, non_block: 0, pid: 2, name: kthreadd\npreempt_count: 2, expected: 0\nCPU: 0 PID: 2 Comm: kthreadd Not tainted 6.9.0-g1d4c6d784ef6 #37\nHardware name: riscv-virtio,qemu (DT)\nCall Trace:\n[<ffffffff800060dc>] dump_backtrace+0x1c/0x24\n[<ffffffff8091ef6e>] show_stack+0x2c/0x38\n[<ffffffff8092baf8>] dump_stack_lvl+0x5a/0x72\n[<ffffffff8092bb24>] dump_stack+0x14/0x1c\n[<ffffffff8003b7ac>] __might_resched+0x104/0x10e\n[<ffffffff8003b7f4>] __might_sleep+0x3e/0x62\n[<ffffffff8093276a>] down_write+0x20/0x72\n[<ffffffff8000cf00>] __set_memory+0x82/0x2fa\n[<ffffffff8000d324>] __kernel_map_pages+0x5a/0xd4\n[<ffffffff80196cca>] __alloc_pages_bulk+0x3b2/0x43a\n[<ffffffff8018ee82>] __vmalloc_node_range+0x196/0x6ba\n[<ffffffff80011904>] copy_process+0x72c/0x17ec\n[<ffffffff80012ab4>] kernel_clone+0x60/0x2fe\n[<ffffffff80012f62>] kernel_thread+0x82/0xa0\n[<ffffffff8003552c>] kthreadd+0x14a/0x1be\n[<ffffffff809357de>] ret_from_fork+0xe/0x1c\n\nRewrite this function with apply_to_existing_page_range(). It is fine to\nnot have any locking, because __kernel_map_pages() works with pages being\nallocated/deallocated and those pages are not changed by anyone else in the\nmeantime."}]}}, "configurations": {"CVE_data_version": "4.0", "nodes": []}, "impact": {}, "publishedDate": "2024-07-12T13:15Z", "lastModifiedDate": "2024-11-21T09:31Z"}