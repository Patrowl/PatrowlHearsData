{"cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "4.0", "CVE_data_meta": {"ID": "CVE-2024-35871", "ASSIGNER": "cve@kernel.org"}, "problemtype": {"problemtype_data": [{"description": []}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/00effef72c98294edb1efa87ffa0f6cfb61b36a4", "name": "https://git.kernel.org/stable/c/00effef72c98294edb1efa87ffa0f6cfb61b36a4", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/00effef72c98294edb1efa87ffa0f6cfb61b36a4", "name": "https://git.kernel.org/stable/c/00effef72c98294edb1efa87ffa0f6cfb61b36a4", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/9abc3e6f1116adb7a2d4fbb8ce20c37916976bf5", "name": "https://git.kernel.org/stable/c/9abc3e6f1116adb7a2d4fbb8ce20c37916976bf5", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/9abc3e6f1116adb7a2d4fbb8ce20c37916976bf5", "name": "https://git.kernel.org/stable/c/9abc3e6f1116adb7a2d4fbb8ce20c37916976bf5", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/d14fa1fcf69db9d070e75f1c4425211fa619dfc8", "name": "https://git.kernel.org/stable/c/d14fa1fcf69db9d070e75f1c4425211fa619dfc8", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/d14fa1fcf69db9d070e75f1c4425211fa619dfc8", "name": "https://git.kernel.org/stable/c/d14fa1fcf69db9d070e75f1c4425211fa619dfc8", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/d8dcba0691b8e42bddb61aab201e4d918a08e5d9", "name": "https://git.kernel.org/stable/c/d8dcba0691b8e42bddb61aab201e4d918a08e5d9", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/d8dcba0691b8e42bddb61aab201e4d918a08e5d9", "name": "https://git.kernel.org/stable/c/d8dcba0691b8e42bddb61aab201e4d918a08e5d9", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/dff6072124f6df77bfd36951fbd88565746980ef", "name": "https://git.kernel.org/stable/c/dff6072124f6df77bfd36951fbd88565746980ef", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/dff6072124f6df77bfd36951fbd88565746980ef", "name": "https://git.kernel.org/stable/c/dff6072124f6df77bfd36951fbd88565746980ef", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/f6583444d7e78dae750798552b65a2519ff3ca84", "name": "https://git.kernel.org/stable/c/f6583444d7e78dae750798552b65a2519ff3ca84", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/f6583444d7e78dae750798552b65a2519ff3ca84", "name": "https://git.kernel.org/stable/c/f6583444d7e78dae750798552b65a2519ff3ca84", "refsource": "", "tags": []}, {"url": "https://lists.debian.org/debian-lts-announce/2024/06/msg00017.html", "name": "https://lists.debian.org/debian-lts-announce/2024/06/msg00017.html", "refsource": "", "tags": []}]}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nriscv: process: Fix kernel gp leakage\n\nchildregs represents the registers which are active for the new thread\nin user context. For a kernel thread, childregs->gp is never used since\nthe kernel gp is not touched by switch_to. For a user mode helper, the\ngp value can be observed in user space after execve or possibly by other\nmeans.\n\n[From the email thread]\n\nThe /* Kernel thread */ comment is somewhat inaccurate in that it is also used\nfor user_mode_helper threads, which exec a user process, e.g. /sbin/init or\nwhen /proc/sys/kernel/core_pattern is a pipe. Such threads do not have\nPF_KTHREAD set and are valid targets for ptrace etc. even before they exec.\n\nchildregs is the *user* context during syscall execution and it is observable\nfrom userspace in at least five ways:\n\n1. kernel_execve does not currently clear integer registers, so the starting\n   register state for PID 1 and other user processes started by the kernel has\n   sp = user stack, gp = kernel __global_pointer$, all other integer registers\n   zeroed by the memset in the patch comment.\n\n   This is a bug in its own right, but I'm unwilling to bet that it is the only\n   way to exploit the issue addressed by this patch.\n\n2. ptrace(PTRACE_GETREGSET): you can PTRACE_ATTACH to a user_mode_helper thread\n   before it execs, but ptrace requires SIGSTOP to be delivered which can only\n   happen at user/kernel boundaries.\n\n3. /proc/*/task/*/syscall: this is perfectly happy to read pt_regs for\n   user_mode_helpers before the exec completes, but gp is not one of the\n   registers it returns.\n\n4. PERF_SAMPLE_REGS_USER: LOCKDOWN_PERF normally prevents access to kernel\n   addresses via PERF_SAMPLE_REGS_INTR, but due to this bug kernel addresses\n   are also exposed via PERF_SAMPLE_REGS_USER which is permitted under\n   LOCKDOWN_PERF. I have not attempted to write exploit code.\n\n5. Much of the tracing infrastructure allows access to user registers. I have\n   not attempted to determine which forms of tracing allow access to user\n   registers without already allowing access to kernel registers."}]}}, "configurations": {"CVE_data_version": "4.0", "nodes": []}, "impact": {}, "publishedDate": "2024-05-19T09:15Z", "lastModifiedDate": "2024-11-21T09:21Z"}