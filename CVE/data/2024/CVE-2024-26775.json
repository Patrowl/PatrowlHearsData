{"cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "4.0", "CVE_data_meta": {"ID": "CVE-2024-26775", "ASSIGNER": "cve@kernel.org"}, "problemtype": {"problemtype_data": [{"description": []}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/19a77b27163820f793b4d022979ffdca8f659b77", "name": "https://git.kernel.org/stable/c/19a77b27163820f793b4d022979ffdca8f659b77", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/19a77b27163820f793b4d022979ffdca8f659b77", "name": "https://git.kernel.org/stable/c/19a77b27163820f793b4d022979ffdca8f659b77", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/2d623c94fbba3554f4446ba6f3c764994e8b0d26", "name": "https://git.kernel.org/stable/c/2d623c94fbba3554f4446ba6f3c764994e8b0d26", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/2d623c94fbba3554f4446ba6f3c764994e8b0d26", "name": "https://git.kernel.org/stable/c/2d623c94fbba3554f4446ba6f3c764994e8b0d26", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/673629018ba04906899dcb631beec34d871f709c", "name": "https://git.kernel.org/stable/c/673629018ba04906899dcb631beec34d871f709c", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/673629018ba04906899dcb631beec34d871f709c", "name": "https://git.kernel.org/stable/c/673629018ba04906899dcb631beec34d871f709c", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/e169bd4fb2b36c4b2bee63c35c740c85daeb2e86", "name": "https://git.kernel.org/stable/c/e169bd4fb2b36c4b2bee63c35c740c85daeb2e86", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/e169bd4fb2b36c4b2bee63c35c740c85daeb2e86", "name": "https://git.kernel.org/stable/c/e169bd4fb2b36c4b2bee63c35c740c85daeb2e86", "refsource": "", "tags": []}]}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\naoe: avoid potential deadlock at set_capacity\n\nMove set_capacity() outside of the section procected by (&d->lock).\nTo avoid possible interrupt unsafe locking scenario:\n\n        CPU0                    CPU1\n        ----                    ----\n[1] lock(&bdev->bd_size_lock);\n                                local_irq_disable();\n                            [2] lock(&d->lock);\n                            [3] lock(&bdev->bd_size_lock);\n   <Interrupt>\n[4]  lock(&d->lock);\n\n  *** DEADLOCK ***\n\nWhere [1](&bdev->bd_size_lock) hold by zram_add()->set_capacity().\n[2]lock(&d->lock) hold by aoeblk_gdalloc(). And aoeblk_gdalloc()\nis trying to acquire [3](&bdev->bd_size_lock) at set_capacity() call.\nIn this situation an attempt to acquire [4]lock(&d->lock) from\naoecmd_cfg_rsp() will lead to deadlock.\n\nSo the simplest solution is breaking lock dependency\n[2](&d->lock) -> [3](&bdev->bd_size_lock) by moving set_capacity()\noutside."}]}}, "configurations": {"CVE_data_version": "4.0", "nodes": []}, "impact": {}, "publishedDate": "2024-04-03T17:15Z", "lastModifiedDate": "2024-11-21T09:03Z"}