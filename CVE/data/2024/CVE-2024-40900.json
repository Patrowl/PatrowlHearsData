{"cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "4.0", "CVE_data_meta": {"ID": "CVE-2024-40900", "ASSIGNER": "cve@kernel.org"}, "problemtype": {"problemtype_data": [{"description": []}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/0fc75c5940fa634d84e64c93bfc388e1274ed013", "name": "https://git.kernel.org/stable/c/0fc75c5940fa634d84e64c93bfc388e1274ed013", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/0fc75c5940fa634d84e64c93bfc388e1274ed013", "name": "https://git.kernel.org/stable/c/0fc75c5940fa634d84e64c93bfc388e1274ed013", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/37e19cf86a520d65de1de9cb330415c332a40d19", "name": "https://git.kernel.org/stable/c/37e19cf86a520d65de1de9cb330415c332a40d19", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/37e19cf86a520d65de1de9cb330415c332a40d19", "name": "https://git.kernel.org/stable/c/37e19cf86a520d65de1de9cb330415c332a40d19", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/50d0e55356ba5b84ffb51c42704126124257e598", "name": "https://git.kernel.org/stable/c/50d0e55356ba5b84ffb51c42704126124257e598", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/50d0e55356ba5b84ffb51c42704126124257e598", "name": "https://git.kernel.org/stable/c/50d0e55356ba5b84ffb51c42704126124257e598", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/9f13aacdd4ee9a7644b2a3c96d67113cd083c9c7", "name": "https://git.kernel.org/stable/c/9f13aacdd4ee9a7644b2a3c96d67113cd083c9c7", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/9f13aacdd4ee9a7644b2a3c96d67113cd083c9c7", "name": "https://git.kernel.org/stable/c/9f13aacdd4ee9a7644b2a3c96d67113cd083c9c7", "refsource": "", "tags": []}]}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\ncachefiles: remove requests from xarray during flushing requests\n\nEven with CACHEFILES_DEAD set, we can still read the requests, so in the\nfollowing concurrency the request may be used after it has been freed:\n\n     mount  |   daemon_thread1    |    daemon_thread2\n------------------------------------------------------------\n cachefiles_ondemand_init_object\n  cachefiles_ondemand_send_req\n   REQ_A = kzalloc(sizeof(*req) + data_len)\n   wait_for_completion(&REQ_A->done)\n            cachefiles_daemon_read\n             cachefiles_ondemand_daemon_read\n                                  // close dev fd\n                                  cachefiles_flush_reqs\n                                   complete(&REQ_A->done)\n   kfree(REQ_A)\n              xa_lock(&cache->reqs);\n              cachefiles_ondemand_select_req\n                req->msg.opcode != CACHEFILES_OP_READ\n                // req use-after-free !!!\n              xa_unlock(&cache->reqs);\n                                   xa_destroy(&cache->reqs)\n\nHence remove requests from cache->reqs when flushing them to avoid\naccessing freed requests."}]}}, "configurations": {"CVE_data_version": "4.0", "nodes": []}, "impact": {}, "publishedDate": "2024-07-12T13:15Z", "lastModifiedDate": "2024-11-21T09:31Z"}