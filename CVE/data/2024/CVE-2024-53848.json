{"publishedDate": "2024-11-29T19:15Z", "lastModifiedDate": "2024-11-29T19:15Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2024-53848", "ASSIGNER": "security-advisories@github.com"}, "description": {"description_data": [{"lang": "en", "value": "check-jsonschema is a CLI and set of pre-commit hooks for jsonschema validation. The default cache strategy uses the basename of a remote schema as the name of the file in the cache, e.g. `https://example.org/schema.json` will be stored as `schema.json`. This naming allows for conflicts. If an attacker can get a user to run `check-jsonschema` against a malicious schema URL, e.g., `https://example.evil.org/schema.json`, they can insert their own schema into the cache and it will be picked up and used instead of the appropriate schema. Such a cache confusion attack could be used to allow data to pass validation which should have been rejected. This issue has been patched in version 0.30.0. All users are advised to upgrade. A few workarounds exist: 1. Users can use `--no-cache` to disable caching. 2. Users can use `--cache-filename` to select filenames for use in the cache, or to ensure that other usages do not overwrite the cached schema. (Note: this flag is being deprecated as part of the remediation effort.) 3. Users can explicitly download the schema before use as a local file, as in `curl -LOs https://example.org/schema.json; check-jsonschema --schemafile ./schema.json`"}, {"lang": "es", "value": "check-jsonschema es una CLI y un conjunto de ganchos de pre-confirmaci\u00f3n para la validaci\u00f3n de jsonschema. La estrategia de cach\u00e9 predeterminada utiliza el nombre base de un esquema remoto como el nombre del archivo en la cach\u00e9, p. ej., `https://example.org/schema.json` se almacenar\u00e1 como `schema.json`. Este nombre permite conflictos. Si un atacante puede lograr que un usuario ejecute `check-jsonschema` contra una URL de esquema malintencionada, p. ej., `https://example.evil.org/schema.json`, puede insertar su propio esquema en la cach\u00e9 y se seleccionar\u00e1 y usar\u00e1 en lugar del esquema apropiado. Un ataque de confusi\u00f3n de cach\u00e9 de este tipo podr\u00eda usarse para permitir que los datos pasen la validaci\u00f3n que deber\u00edan haber sido rechazados. Este problema se ha corregido en la versi\u00f3n 0.30.0. Se recomienda a todos los usuarios que actualicen. Existen algunos workaround: 1. Los usuarios pueden usar `--no-cache` para deshabilitar el almacenamiento en cach\u00e9. 2. Los usuarios pueden usar `--cache-filename` para seleccionar nombres de archivos para usar en la memoria cach\u00e9 o para garantizar que otros usos no sobrescriban el esquema almacenado en cach\u00e9. (Nota: esta opci\u00f3n se est\u00e1 descontinuando como parte del esfuerzo de remediaci\u00f3n). 3. Los usuarios pueden descargar expl\u00edcitamente el esquema antes de usarlo como un archivo local, como en `curl -LOs https://example.org/schema.json; check-jsonschema --schemafile ./schema.json`"}]}, "references": {"reference_data": [{"url": "https://github.com/python-jsonschema/check-jsonschema/commit/c52714b85e6725b1b24516fbdedacb333b939152", "name": "", "refsource": "", "tags": []}, {"url": "https://github.com/python-jsonschema/check-jsonschema/security/advisories/GHSA-q6mv-284r-mp36", "name": "", "refsource": "", "tags": []}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "CWE-349"}]}]}}, "impact": {"baseMetricV3": {"exploitabilityScore": 2.5, "impactScore": 4.0, "cvssV3": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:C/C:N/I:H/A:N", "baseScore": 7.1, "baseSeverity": "HIGH", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE"}}}, "configurations": {"CVE_data_version": "4.0", "nodes": []}}