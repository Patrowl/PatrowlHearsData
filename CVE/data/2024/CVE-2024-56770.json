{"publishedDate": "2025-01-08T17:15Z", "lastModifiedDate": "2025-10-01T20:17Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2024-56770", "ASSIGNER": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nnet/sched: netem: account for backlog updates from child qdisc\n\nIn general, 'qlen' of any classful qdisc should keep track of the\nnumber of packets that the qdisc itself and all of its children holds.\nIn case of netem, 'qlen' only accounts for the packets in its internal\ntfifo. When netem is used with a child qdisc, the child qdisc can use\n'qdisc_tree_reduce_backlog' to inform its parent, netem, about created\nor dropped SKBs. This function updates 'qlen' and the backlog statistics\nof netem, but netem does not account for changes made by a child qdisc.\n'qlen' then indicates the wrong number of packets in the tfifo.\nIf a child qdisc creates new SKBs during enqueue and informs its parent\nabout this, netem's 'qlen' value is increased. When netem dequeues the\nnewly created SKBs from the child, the 'qlen' in netem is not updated.\nIf 'qlen' reaches the configured sch->limit, the enqueue function stops\nworking, even though the tfifo is not full.\n\nReproduce the bug:\nEnsure that the sender machine has GSO enabled. Configure netem as root\nqdisc and tbf as its child on the outgoing interface of the machine\nas follows:\n$ tc qdisc add dev <oif> root handle 1: netem delay 100ms limit 100\n$ tc qdisc add dev <oif> parent 1:0 tbf rate 50Mbit burst 1542 latency 50ms\n\nSend bulk TCP traffic out via this interface, e.g., by running an iPerf3\nclient on the machine. Check the qdisc statistics:\n$ tc -s qdisc show dev <oif>\n\nStatistics after 10s of iPerf3 TCP test before the fix (note that\nnetem's backlog > limit, netem stopped accepting packets):\nqdisc netem 1: root refcnt 2 limit 1000 delay 100ms\n Sent 2767766 bytes 1848 pkt (dropped 652, overlimits 0 requeues 0)\n backlog 4294528236b 1155p requeues 0\nqdisc tbf 10: parent 1:1 rate 50Mbit burst 1537b lat 50ms\n Sent 2767766 bytes 1848 pkt (dropped 327, overlimits 7601 requeues 0)\n backlog 0b 0p requeues 0\n\nStatistics after the fix:\nqdisc netem 1: root refcnt 2 limit 1000 delay 100ms\n Sent 37766372 bytes 24974 pkt (dropped 9, overlimits 0 requeues 0)\n backlog 0b 0p requeues 0\nqdisc tbf 10: parent 1:1 rate 50Mbit burst 1537b lat 50ms\n Sent 37766372 bytes 24974 pkt (dropped 327, overlimits 96017 requeues 0)\n backlog 0b 0p requeues 0\n\ntbf segments the GSO SKBs (tbf_segment) and updates the netem's 'qlen'.\nThe interface fully stops transferring packets and \"locks\". In this case,\nthe child qdisc and tfifo are empty, but 'qlen' indicates the tfifo is at\nits limit and no more packets are accepted.\n\nThis patch adds a counter for the entries in the tfifo. Netem's 'qlen' is\nonly decreased when a packet is returned by its dequeue function, and not\nduring enqueuing into the child qdisc. External updates to 'qlen' are thus\naccounted for and only the behavior of the backlog statistics changes. As\nin other qdiscs, 'qlen' then keeps track of  how many packets are held in\nnetem and all of its children. As before, sch->limit remains as the\nmaximum number of packets in the tfifo. The same applies to netem's\nbacklog statistics."}, {"lang": "es", "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: net/sched: netem: contabilizar las actualizaciones atrasadas de la qdisc secundaria En general, 'qlen' de cualquier qdisc con clase debe realizar un seguimiento de la cantidad de paquetes que la propia qdisc y todos sus hijos contienen. En el caso de netem, 'qlen' solo contabiliza los paquetes en su tfifo interno. Cuando netem se usa con una qdisc secundaria, la qdisc secundaria puede usar 'qdisc_tree_reduce_backlog' para informar a su padre, netem, sobre los SKB creados o descartados. Esta funci\u00f3n actualiza 'qlen' y las estad\u00edsticas de atraso de netem, pero netem no contabiliza los cambios realizados por una qdisc secundaria. 'qlen' luego indica la cantidad incorrecta de paquetes en el tfifo. Si una qdisc secundaria crea nuevos SKB durante la puesta en cola e informa a su padre sobre esto, el valor 'qlen' de netem aumenta. Cuando netem saca de la cola los SKB reci\u00e9n creados del hijo, el 'qlen' en netem no se actualiza. Si 'qlen' alcanza el sch-&gt;limit configurado, la funci\u00f3n de puesta en cola deja de funcionar, aunque el tfifo no est\u00e9 lleno. Reproducir el error: Aseg\u00farese de que la m\u00e1quina remitente tenga GSO habilitado. Configure netem como qdisc ra\u00edz y tbf como su hijo en la interfaz de salida de la m\u00e1quina de la siguiente manera: $ tc qdisc add dev  root handle 1: netem delay 100ms limit 100 $ tc qdisc add dev  parent 1:0 tbf rate 50Mbit burst 1542 latency 50ms Env\u00ede tr\u00e1fico TCP masivo a trav\u00e9s de esta interfaz, por ejemplo, ejecutando un cliente iPerf3 en la m\u00e1quina. Compruebe las estad\u00edsticas de qdisc: $ tc -s qdisc show dev  Estad\u00edsticas despu\u00e9s de 10 s de prueba TCP de iPerf3 antes de la correcci\u00f3n (tenga en cuenta que el backlog de netem &gt; limit, netem dej\u00f3 de aceptar paquetes): qdisc netem 1: root refcnt 2 limit 1000 delay 100ms Sent 2767766 bytes 1848 pkt (dropped 652, overlimits 0 requeues 0) backlog 4294528236b 1155p requeues 0 qdisc tbf 10: parent 1:1 rate 50Mbit burst 1537b lat 50ms Sent 2767766 bytes 1848 pkt (dropped 327, overlimits 7601 requeues 0) backlog 0b 0p requeues 0 Estad\u00edsticas despu\u00e9s de la correcci\u00f3n: qdisc netem 1: root refcnt 2 limit 1000 delay 100ms Enviados 37766372 bytes 24974 pkt (derramados 9, sobrepasa los l\u00edmites 0, pone en cola 0) backlog 0b 0p pone en cola 0 qdisc tbf 10: padre 1:1 tasa 50Mbit r\u00e1faga 1537b lat 50ms Enviados 37766372 bytes 24974 pkt (derramados 327, sobrepasa los l\u00edmites 96017, pone en cola 0) backlog 0b 0p pone en cola 0 tbf segmenta los SKB de GSO (tbf_segment) y actualiza el 'qlen' de netem. La interfaz deja de transferir paquetes por completo y se \"bloquea\". En este caso, la qdisc secundaria y la tfifo est\u00e1n vac\u00edas, pero 'qlen' indica que la tfifo est\u00e1 en su l\u00edmite y no se aceptan m\u00e1s paquetes. Este parche agrega un contador para las entradas en la tfifo. La 'qlen' de Netem solo se reduce cuando la funci\u00f3n de desencolado devuelve un paquete, y no durante la puesta en cola en la qdisc secundaria. De este modo, se tienen en cuenta las actualizaciones externas de 'qlen' y solo cambia el comportamiento de las estad\u00edsticas de la lista de espera. Como en otras qdisc, 'qlen' realiza un seguimiento de cu\u00e1ntos paquetes se mantienen en netem y en todas sus hijas. Como antes, sch-&gt;limit permanece como el n\u00famero m\u00e1ximo de paquetes en la tfifo. Lo mismo se aplica a las estad\u00edsticas de la lista de espera de netem."}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/10df49cfca73dfbbdb6c4150d859f7e8926ae427", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://git.kernel.org/stable/c/216509dda290f6db92c816dd54b83c1df9da9e76", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://git.kernel.org/stable/c/356078a5c55ec8d2061fcc009fb8599f5b0527f9", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://git.kernel.org/stable/c/3824c5fad18eeb7abe0c4fc966f29959552dca3e", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://git.kernel.org/stable/c/83c6ab12f08dcc09d4c5ac86fdb89736b28f1d31", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://git.kernel.org/stable/c/c2047b0e216c8edce227d7c42f99ac2877dad0e4", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://git.kernel.org/stable/c/f8d4bc455047cf3903cd6f85f49978987dbb3027", "name": "", "refsource": "", "tags": ["Patch"]}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}]}}, "impact": {"baseMetricV3": {"exploitabilityScore": 1.8, "impactScore": 3.6, "cvssV3": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "baseScore": 5.5, "baseSeverity": "MEDIUM", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH"}}}, "configurations": {"CVE_data_version": "4.0", "nodes": [{"operator": "OR", "negate": false, "children": [], "cpe_match": [{"vulnerable": true, "cpe23Uri": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "matchCriteriaId": "2BBFF06A-6037-47B4-A3CF-B6B0F51D3491", "cpe_name": [], "versionStartIncluding": "3.3", "versionEndExcluding": "5.4.288"}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "matchCriteriaId": "0B975945-2894-4433-BA59-0988B75B4C12", "cpe_name": [], "versionStartIncluding": "5.5", "versionEndExcluding": "5.10.232"}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "matchCriteriaId": "7A1F3620-6900-4852-9229-C3527377EBDA", "cpe_name": [], "versionStartIncluding": "5.11", "versionEndExcluding": "5.15.175"}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "matchCriteriaId": "D8DA16A0-9C6E-493E-90EE-309A34901477", "cpe_name": [], "versionStartIncluding": "5.16", "versionEndExcluding": "6.1.121"}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "matchCriteriaId": "BF4F2CD1-2CA6-4D6B-9B0C-57C3C4D6544A", "cpe_name": [], "versionStartIncluding": "6.2", "versionEndExcluding": "6.6.67"}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "matchCriteriaId": "0CB1A9BB-F95E-43DD-A2FD-147912FD91E5", "cpe_name": [], "versionStartIncluding": "6.7", "versionEndExcluding": "6.12.6"}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:o:linux:linux_kernel:6.13:rc1:*:*:*:*:*:*", "matchCriteriaId": "62567B3C-6CEE-46D0-BC2E-B3717FBF7D13", "cpe_name": []}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:o:linux:linux_kernel:6.13:rc2:*:*:*:*:*:*", "matchCriteriaId": "5A073481-106D-4B15-B4C7-FB0213B8E1D4", "cpe_name": []}]}]}}