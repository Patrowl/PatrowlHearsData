{"publishedDate": "2024-05-17T14:15Z", "lastModifiedDate": "2024-11-21T09:20Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2024-35804", "ASSIGNER": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nKVM: x86: Mark target gfn of emulated atomic instruction as dirty\n\nWhen emulating an atomic access on behalf of the guest, mark the target\ngfn dirty if the CMPXCHG by KVM is attempted and doesn't fault.  This\nfixes a bug where KVM effectively corrupts guest memory during live\nmigration by writing to guest memory without informing userspace that the\npage is dirty.\n\nMarking the page dirty got unintentionally dropped when KVM's emulated\nCMPXCHG was converted to do a user access.  Before that, KVM explicitly\nmapped the guest page into kernel memory, and marked the page dirty during\nthe unmap phase.\n\nMark the page dirty even if the CMPXCHG fails, as the old data is written\nback on failure, i.e. the page is still written.  The value written is\nguaranteed to be the same because the operation is atomic, but KVM's ABI\nis that all writes are dirty logged regardless of the value written.  And\nmore importantly, that's what KVM did before the buggy commit.\n\nHuge kudos to the folks on the Cc list (and many others), who did all the\nactual work of triaging and debugging.\n\nbase-commit: 6769ea8da8a93ed4630f1ce64df6aafcaabfce64"}, {"lang": "es", "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: KVM: x86: marcar el gfn de destino de la instrucci\u00f3n at\u00f3mica emulada como sucia Al emular un acceso at\u00f3mico en nombre del invitado, marque el gfn de destino como sucio si se intenta realizar el CMPXCHG por KVM y no falla. Esto corrige un error por el cual KVM corrompe efectivamente la memoria del invitado durante la migraci\u00f3n en vivo al escribir en la memoria del invitado sin informar al espacio de usuario que la p\u00e1gina est\u00e1 sucia. Marcar la p\u00e1gina como sucia se elimin\u00f3 involuntariamente cuando el CMPXCHG emulado de KVM se convirti\u00f3 para realizar un acceso de usuario. Antes de eso, KVM asignaba expl\u00edcitamente la p\u00e1gina invitada a la memoria del kernel y marcaba la p\u00e1gina como sucia durante la fase de desasignaci\u00f3n. Marque la p\u00e1gina como sucia incluso si CMPXCHG falla, ya que los datos antiguos se vuelven a escribir en caso de fallo, es decir, la p\u00e1gina a\u00fan est\u00e1 escrita. Se garantiza que el valor escrito ser\u00e1 el mismo porque la operaci\u00f3n es at\u00f3mica, pero la ABI de KVM es que todas las escrituras se registran de forma sucia independientemente del valor escrito. Y lo que es m\u00e1s importante, eso es lo que hizo KVM antes de la confirmaci\u00f3n del error. Felicitaciones enormes a las personas en la lista Cc (y a muchos otros), que hicieron todo el trabajo de clasificaci\u00f3n y depuraci\u00f3n. confirmaci\u00f3n base: 6769ea8da8a93ed4630f1ce64df6aafcaabfce64"}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/225d587a073584946c05c9b7651d637bd45c0c71", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/726374dde5d608b15b9756bd52b6fc283fda7a06", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/910c57dfa4d113aae6571c2a8b9ae8c430975902", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/9d1b22e573a3789ed1f32033ee709106993ba551", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/a9bd6bb6f02bf7132c1ab192ba62bbfa52df7d66", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/225d587a073584946c05c9b7651d637bd45c0c71", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/726374dde5d608b15b9756bd52b6fc283fda7a06", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/910c57dfa4d113aae6571c2a8b9ae8c430975902", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/9d1b22e573a3789ed1f32033ee709106993ba551", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/a9bd6bb6f02bf7132c1ab192ba62bbfa52df7d66", "name": "", "refsource": "", "tags": []}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}]}}, "impact": {}, "configurations": {"CVE_data_version": "4.0", "nodes": []}}