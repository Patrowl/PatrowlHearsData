{"publishedDate": "2025-02-05T10:15Z", "lastModifiedDate": "2025-10-15T20:05Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2023-52925", "ASSIGNER": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nnetfilter: nf_tables: don't fail inserts if duplicate has expired\n\nnftables selftests fail:\nrun-tests.sh testcases/sets/0044interval_overlap_0\nExpected: 0-2 . 0-3, got:\nW: [FAILED]     ./testcases/sets/0044interval_overlap_0: got 1\n\nInsertion must ignore duplicate but expired entries.\n\nMoreover, there is a strange asymmetry in nft_pipapo_activate:\n\nIt refetches the current element, whereas the other ->activate callbacks\n(bitmap, hash, rhash, rbtree) use elem->priv.\nSame for .remove: other set implementations take elem->priv,\nnft_pipapo_remove fetches elem->priv, then does a relookup,\nremove this.\n\nI suspect this was the reason for the change that prompted the\nremoval of the expired check in pipapo_get() in the first place,\nbut skipping exired elements there makes no sense to me, this helper\nis used for normal get requests, insertions (duplicate check)\nand deactivate callback.\n\nIn first two cases expired elements must be skipped.\n\nFor ->deactivate(), this gets called for DELSETELEM, so it\nseems to me that expired elements should be skipped as well, i.e.\ndelete request should fail with -ENOENT error."}, {"lang": "es", "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: netfilter: nf_tables: no fallar las inserciones si el duplicado ha expirado las autopruebas de nftables fallan: run-tests.sh testcases/sets/0044interval_overlap_0 Esperado: 0-2 . 0-3, obtenido: W: [FALL\u00d3] ./testcases/sets/0044interval_overlap_0: obtuvo 1 La inserci\u00f3n debe ignorar las entradas duplicadas pero expiradas. Adem\u00e1s, hay una extra\u00f1a asimetr\u00eda en nft_pipapo_activate: vuelve a obtener el elemento actual, mientras que las otras devoluciones de llamadas -&gt;activate (mapa de bits, hash, rhash, rbtree) usan elem-&gt;priv. Lo mismo para .remove: otras implementaciones de conjuntos toman elem-&gt;priv, nft_pipapo_remove obtiene elem-&gt;priv, luego hace una nueva b\u00fasqueda, elimina esto. Sospecho que esta fue la raz\u00f3n del cambio que provoc\u00f3 la eliminaci\u00f3n de la verificaci\u00f3n de caducidad en pipapo_get() en primer lugar, pero omitir elementos caducados all\u00ed no tiene sentido para m\u00ed, este ayudante se utiliza para solicitudes de obtenci\u00f3n normales, inserciones (verificaci\u00f3n duplicada) y devoluci\u00f3n de llamada de desactivaci\u00f3n. En los primeros dos casos, los elementos caducados deben omitirse. Para -&gt;deactivate(), esto se llama para DELSETELEM, por lo que me parece que los elementos caducados tambi\u00e9n deben omitirse, es decir, la solicitud de eliminaci\u00f3n debe fallar con el error -ENOENT."}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/156369a702c33ad5434a19c3a689bfb836d4e0b8", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://git.kernel.org/stable/c/59ee68c437c562170265194a99698c805a686bb3", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://git.kernel.org/stable/c/7845914f45f066497ac75b30c50dbc735e84e884", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://git.kernel.org/stable/c/891ca5dfe3b718b441fc786014a7ba8f517da188", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://git.kernel.org/stable/c/af78b0489e8898a8c9449ffc0fdd2e181916f0d4", "name": "", "refsource": "", "tags": ["Patch"]}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}]}}, "impact": {"baseMetricV3": {"exploitabilityScore": 1.8, "impactScore": 3.6, "cvssV3": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "baseScore": 5.5, "baseSeverity": "MEDIUM", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH"}}}, "configurations": {"CVE_data_version": "4.0", "nodes": [{"operator": "OR", "negate": false, "children": [], "cpe_match": [{"vulnerable": true, "cpe23Uri": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "matchCriteriaId": "76EC9BF9-9775-4D90-B594-4C2AB71E1F86", "cpe_name": [], "versionStartIncluding": "4.19.316", "versionEndExcluding": "4.20"}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "matchCriteriaId": "5CE7F771-8144-4AEC-B6E3-5F4830BD8EB7", "cpe_name": [], "versionStartIncluding": "5.4.262", "versionEndExcluding": "5.5"}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:o:linux:linux_kernel:6.4.11:*:*:*:*:*:*:*", "matchCriteriaId": "B8704CB0-B956-4986-9F9F-9D28ACEC2A39", "cpe_name": []}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:o:linux:linux_kernel:6.5:rc6:*:*:*:*:*:*", "matchCriteriaId": "5B1C14ED-ABC4-41D3-8D9C-D38C6A65B4DE", "cpe_name": []}]}]}}