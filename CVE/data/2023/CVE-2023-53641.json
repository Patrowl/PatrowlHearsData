{"publishedDate": "2025-10-07T16:15Z", "lastModifiedDate": "2025-10-07T16:15Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2023-53641", "ASSIGNER": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nwifi: ath9k: hif_usb: fix memory leak of remain_skbs\n\nhif_dev->remain_skb is allocated and used exclusively in\nath9k_hif_usb_rx_stream(). It is implied that an allocated remain_skb is\nprocessed and subsequently freed (in error paths) only during the next\ncall of ath9k_hif_usb_rx_stream().\n\nSo, if the urbs are deallocated between those two calls due to the device\ndeinitialization or suspend, it is possible that ath9k_hif_usb_rx_stream()\nis not called next time and the allocated remain_skb is leaked. Our local\nSyzkaller instance was able to trigger that.\n\nremain_skb makes sense when receiving two consecutive urbs which are\nlogically linked together, i.e. a specific data field from the first skb\nindicates a cached skb to be allocated, memcpy'd with some data and\nsubsequently processed in the next call to ath9k_hif_usb_rx_stream(). Urbs\ndeallocation supposedly makes that link irrelevant so we need to free the\ncached skb in those cases.\n\nFix the leak by introducing a function to explicitly free remain_skb (if\nit is not NULL) when the rx urbs have been deallocated. remain_skb is NULL\nwhen it has not been allocated at all (hif_dev struct is kzalloced) or\nwhen it has been processed in next call to ath9k_hif_usb_rx_stream().\n\nFound by Linux Verification Center (linuxtesting.org) with Syzkaller."}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/320d760a35273aa815d58b57e4fd9ba5279a3489", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/59073060fe0950c6ecbe12bdc06469dcac62128d", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/6719e3797ec52cd144c8a5ba8aaab36674800585", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/7654cc03eb699297130b693ec34e25f77b17c947", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/8f02d538878c9b1501f624595eb22ee4e5e0ff84", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/9b9356a3014123f0ce4b50d9278c1265173150ab", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/d9899318660791141ea6002fda5577b2c5d7386e", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/f0931fc8f4b6847c72e170d2326861c0a081d680", "name": "", "refsource": "", "tags": []}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}]}}, "impact": {}, "configurations": {"CVE_data_version": "4.0", "nodes": []}}