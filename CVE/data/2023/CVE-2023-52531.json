{"cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "4.0", "CVE_data_meta": {"ID": "CVE-2023-52531", "ASSIGNER": "cve@kernel.org"}, "problemtype": {"problemtype_data": [{"description": []}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/6b3223449c959a8be94a1f042288059e40fcccb0", "name": "https://git.kernel.org/stable/c/6b3223449c959a8be94a1f042288059e40fcccb0", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/6b3223449c959a8be94a1f042288059e40fcccb0", "name": "https://git.kernel.org/stable/c/6b3223449c959a8be94a1f042288059e40fcccb0", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/7c8faa31080342aec4903c9acb20caf82fcca1ef", "name": "https://git.kernel.org/stable/c/7c8faa31080342aec4903c9acb20caf82fcca1ef", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/7c8faa31080342aec4903c9acb20caf82fcca1ef", "name": "https://git.kernel.org/stable/c/7c8faa31080342aec4903c9acb20caf82fcca1ef", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/8ba438ef3cacc4808a63ed0ce24d4f0942cfe55d", "name": "https://git.kernel.org/stable/c/8ba438ef3cacc4808a63ed0ce24d4f0942cfe55d", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/8ba438ef3cacc4808a63ed0ce24d4f0942cfe55d", "name": "https://git.kernel.org/stable/c/8ba438ef3cacc4808a63ed0ce24d4f0942cfe55d", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/f06cdd8d4ba5252986f51f80cc30263636397128", "name": "https://git.kernel.org/stable/c/f06cdd8d4ba5252986f51f80cc30263636397128", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/f06cdd8d4ba5252986f51f80cc30263636397128", "name": "https://git.kernel.org/stable/c/f06cdd8d4ba5252986f51f80cc30263636397128", "refsource": "", "tags": []}]}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nwifi: iwlwifi: mvm: Fix a memory corruption issue\n\nA few lines above, space is kzalloc()'ed for:\n\tsizeof(struct iwl_nvm_data) +\n\tsizeof(struct ieee80211_channel) +\n\tsizeof(struct ieee80211_rate)\n\n'mvm->nvm_data' is a 'struct iwl_nvm_data', so it is fine.\n\nAt the end of this structure, there is the 'channels' flex array.\nEach element is of type 'struct ieee80211_channel'.\nSo only 1 element is allocated in this array.\n\nWhen doing:\n  mvm->nvm_data->bands[0].channels = mvm->nvm_data->channels;\nWe point at the first element of the 'channels' flex array.\nSo this is fine.\n\nHowever, when doing:\n  mvm->nvm_data->bands[0].bitrates =\n\t\t\t(void *)((u8 *)mvm->nvm_data->channels + 1);\nbecause of the \"(u8 *)\" cast, we add only 1 to the address of the beginning\nof the flex array.\n\nIt is likely that we want point at the 'struct ieee80211_rate' allocated\njust after.\n\nRemove the spurious casting so that the pointer arithmetic works as\nexpected."}]}}, "configurations": {"CVE_data_version": "4.0", "nodes": []}, "impact": {}, "publishedDate": "2024-03-02T22:15Z", "lastModifiedDate": "2024-11-21T08:39Z"}