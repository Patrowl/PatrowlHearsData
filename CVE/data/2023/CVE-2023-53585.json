{"publishedDate": "2025-10-04T16:15Z", "lastModifiedDate": "2025-10-06T14:56Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2023-53585", "ASSIGNER": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nbpf: reject unhashed sockets in bpf_sk_assign\n\nThe semantics for bpf_sk_assign are as follows:\n\n    sk = some_lookup_func()\n    bpf_sk_assign(skb, sk)\n    bpf_sk_release(sk)\n\nThat is, the sk is not consumed by bpf_sk_assign. The function\ntherefore needs to make sure that sk lives long enough to be\nconsumed from __inet_lookup_skb. The path through the stack for a\nTCPv4 packet is roughly:\n\n  netif_receive_skb_core: takes RCU read lock\n    __netif_receive_skb_core:\n      sch_handle_ingress:\n        tcf_classify:\n          bpf_sk_assign()\n      deliver_ptype_list_skb:\n        deliver_skb:\n          ip_packet_type->func == ip_rcv:\n            ip_rcv_core:\n            ip_rcv_finish_core:\n              dst_input:\n                ip_local_deliver:\n                  ip_local_deliver_finish:\n                    ip_protocol_deliver_rcu:\n                      tcp_v4_rcv:\n                        __inet_lookup_skb:\n                          skb_steal_sock\n\nThe existing helper takes advantage of the fact that everything\nhappens in the same RCU critical section: for sockets with\nSOCK_RCU_FREE set bpf_sk_assign never takes a reference.\nskb_steal_sock then checks SOCK_RCU_FREE again and does sock_put\nif necessary.\n\nThis approach assumes that SOCK_RCU_FREE is never set on a sk\nbetween bpf_sk_assign and skb_steal_sock, but this invariant is\nviolated by unhashed UDP sockets. A new UDP socket is created\nin TCP_CLOSE state but without SOCK_RCU_FREE set. That flag is only\nadded in udp_lib_get_port() which happens when a socket is bound.\n\nWhen bpf_sk_assign was added it wasn't possible to access unhashed\nUDP sockets from BPF, so this wasn't a problem. This changed\nin commit 0c48eefae712 (\"sock_map: Lift socket state restriction\nfor datagram sockets\"), but the helper wasn't adjusted accordingly.\nThe following sequence of events will therefore lead to a refcount\nleak:\n\n1. Add socket(AF_INET, SOCK_DGRAM) to a sockmap.\n2. Pull socket out of sockmap and bpf_sk_assign it. Since\n   SOCK_RCU_FREE is not set we increment the refcount.\n3. bind() or connect() the socket, setting SOCK_RCU_FREE.\n4. skb_steal_sock will now set refcounted = false due to\n   SOCK_RCU_FREE.\n5. tcp_v4_rcv() skips sock_put().\n\nFix the problem by rejecting unhashed sockets in bpf_sk_assign().\nThis matches the behaviour of __inet_lookup_skb which is ultimately\nthe goal of bpf_sk_assign()."}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/3d4522f59fb748a54446846522941a4f09da63e9", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/67312adc96b5a585970d03b62412847afe2c6b01", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/791a12102e5191dcb6ce0b3a99d71b5a2802d12a", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/7dcbc0bb0e5cc1823923744befce59ac353135e6", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/8aa43cfbb68b25119d2ced14ec717173e2901fa2", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/c0ce0fb76610d5fad31f56f2ca8241a2a6717a1b", "name": "", "refsource": "", "tags": []}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}]}}, "impact": {}, "configurations": {"CVE_data_version": "4.0", "nodes": []}}