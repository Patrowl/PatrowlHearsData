{"publishedDate": "2023-04-04T22:15Z", "lastModifiedDate": "2024-11-21T07:56Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2023-28842", "ASSIGNER": "security-advisories@github.com"}, "description": {"description_data": [{"lang": "en", "value": "Moby) is an open source container framework developed by Docker Inc. that is distributed as Docker, Mirantis Container Runtime, and various other downstream projects/products. The Moby daemon component (`dockerd`), which is developed as moby/moby is commonly referred to as *Docker*.\n\nSwarm Mode, which is compiled in and delivered by default in `dockerd` and is thus present in most major Moby downstreams, is a simple, built-in container orchestrator that is implemented through a combination of SwarmKit and supporting network code.\n\nThe `overlay` network driver is a core feature of Swarm Mode, providing isolated virtual LANs that allow communication between containers and services across the cluster. This driver is an implementation/user of VXLAN, which encapsulates link-layer (Ethernet) frames in UDP datagrams that tag the frame with the VXLAN metadata, including a VXLAN Network ID (VNI) that identifies the originating overlay network. In addition, the overlay network driver supports an optional, off-by-default encrypted mode, which is especially useful when VXLAN packets traverses an untrusted network between nodes.\n\nEncrypted overlay networks function by encapsulating the VXLAN datagrams through the use of the IPsec Encapsulating Security Payload protocol in Transport mode. By deploying IPSec encapsulation, encrypted overlay networks gain the additional properties of source authentication through cryptographic proof, data integrity through check-summing, and confidentiality through encryption.\n\nWhen setting an endpoint up on an encrypted overlay network, Moby installs three iptables (Linux kernel firewall) rules that enforce both incoming and outgoing IPSec. These rules rely on the `u32` iptables extension provided by the `xt_u32` kernel module to directly filter on a VXLAN packet's VNI field, so that IPSec guarantees can be enforced on encrypted overlay networks without interfering with other overlay networks or other users of VXLAN.\n\nThe `overlay` driver dynamically and lazily defines the kernel configuration for the VXLAN network on each node as containers are attached and detached. Routes and encryption parameters are only defined for destination nodes that participate in the network. The iptables rules that prevent encrypted overlay networks from accepting unencrypted packets are not created until a peer is available with which to communicate.\n\nEncrypted overlay networks silently accept cleartext VXLAN datagrams that are tagged with the VNI of an encrypted overlay network. As a result, it is possible to inject arbitrary Ethernet frames into the encrypted overlay network by encapsulating them in VXLAN datagrams. The implications of this can be quite dire, and GHSA-vwm3-crmr-xfxw should be referenced for a deeper exploration.\n\nPatches are available in Moby releases 23.0.3, and 20.10.24. As Mirantis Container Runtime's 20.10 releases are numbered differently, users of that platform should update to 20.10.16.\n\nSome workarounds are available. In multi-node clusters, deploy a global \u2018pause\u2019 container for each encrypted overlay network, on every node. For a single-node cluster, do not use overlay networks of any sort. Bridge networks provide the same connectivity on a single node and have no multi-node features. The Swarm ingress feature is implemented using an overlay network, but can be disabled by publishing ports in `host` mode instead of `ingress` mode (allowing the use of an external load balancer), and removing the `ingress` network. If encrypted overlay networks are in exclusive use, block UDP port 4789 from traffic that has not been validated by IPSec."}, {"lang": "es", "value": "Moby) es un framework de contenedores de c\u00f3digo abierto desarrollado por Docker Inc. que se distribuye como Docker, Mirantis Container Runtime y varios otros proyectos/productos posteriores. El componente Moby daemon (`dockerd`), que se desarrolla como moby/moby, se conoce com\u00fanmente como *Docker*. El modo Swarm, que se compila y entrega de forma predeterminada en \"dockerd\" y, por lo tanto, est\u00e1 presente en la mayor\u00eda de las principales versiones de Moby, es un orquestador de contenedores simple e integrado que se implementa mediante una combinaci\u00f3n de SwarmKit y soportando un c\u00f3digo de red. El controlador de red \"superpuesto\" es una caracter\u00edstica central del modo Swarm, que proporciona LAN virtuales aisladas que permiten la comunicaci\u00f3n entre contenedores y servicios en todo el cl\u00faster. Este controlador es una implementaci\u00f3n/usuario de VXLAN, que encapsula tramas de capa de enlace (Ethernet) en datagramas UDP que etiquetan la trama con los metadatos de VXLAN, incluido un ID de red VXLAN (VNI) que identifica la red superpuesta de origen. Adem\u00e1s, el controlador de red superpuesta admite un modo cifrado opcional, desactivado de forma predeterminada, que resulta especialmente \u00fatil cuando los paquetes VXLAN atraviesan una red que no es de confianza entre nodos. Las redes superpuestas cifradas funcionan encapsulando los datagramas VXLAN mediante el uso del protocolo IPsec Encapsulating Security Payload en modo Transporte. Al implementar la encapsulaci\u00f3n IPSec, las redes superpuestas cifradas obtienen propiedades adicionales de autenticaci\u00f3n de origen mediante prueba criptogr\u00e1fica, integridad de datos mediante suma de verificaci\u00f3n y confidencialidad mediante cifrado. Al configurar un endpoint en una red superpuesta cifrada, Moby instala tres reglas de iptables (firewall del kernel de Linux) que aplican IPSec tanto entrante como saliente. Estas reglas se basan en la extensi\u00f3n iptables `u32` proporcionada por el m\u00f3dulo del kernel `xt_u32` para filtrar directamente el campo VNI de un paquete VXLAN, de modo que las garant\u00edas IPSec se puedan aplicar en redes superpuestas cifradas sin interferir con otras redes superpuestas u otros usuarios de VXLAN. El controlador `overlay` define de forma din\u00e1mica y perezosa la configuraci\u00f3n del kernel para la red VXLAN en cada nodo a medida que los contenedores se conectan y desconectan. Las rutas y los par\u00e1metros de cifrado solo se definen para los nodos de destino que participan en la red. Las reglas de iptables que impiden que las redes superpuestas cifradas acepten paquetes no cifrados no se crean hasta que haya un interlocutor disponible con el que comunicarse. Las redes superpuestas cifradas aceptan silenciosamente datagramas VXLAN de texto sin cifrar etiquetados con el VNI de una red superpuesta cifrada. Como resultado, es posible inyectar tramas Ethernet arbitrarias en la red superpuesta cifrada encapsul\u00e1ndolas en datagramas VXLAN. Las implicaciones de esto pueden ser bastante nefastas, y se debe hacer referencia a GHSA-vwm3-crmr-xfxw para una exploraci\u00f3n m\u00e1s profunda. Los parches est\u00e1n disponibles en las versiones 23.0.3 y 20.10.24 de Moby. Como las versiones 20.10 de Mirantis Container Runtime tienen numeraci\u00f3n diferente, los usuarios de esa plataforma deben actualizar a la versi\u00f3n 20.10.16. Algunos workarounds est\u00e1n disponibles. En cl\u00fasteres de m\u00faltiples nodos, implemente un contenedor de \"pausa\" global para cada red superpuesta cifrada, en cada nodo. Para un cl\u00faster de un solo nodo, no utilice redes superpuestas de ning\u00fan tipo. Las redes puente brindan la misma conectividad en un solo nodo y no tienen funciones de m\u00faltiples nodos. La funci\u00f3n de ingreso de Swarm se implementa usando una red superpuesta, pero se puede deshabilitar publicando puertos en modo \"host\" en lugar del modo \"ingress\" (permitiendo el uso de un balanceador de carga externo) y eliminando la red de \"ingress\". Si las redes superpuestas cifradas son de uso exclusivo, bloquee el puerto UDP 4789 del tr\u00e1fico que no haya sido validado por IPSec."}]}, "references": {"reference_data": [{"url": "https://github.com/moby/libnetwork/security/advisories/GHSA-gvm4-2qqg-m333", "name": "", "refsource": "", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/moby/moby/security/advisories/GHSA-232p-vwff-86mp", "name": "", "refsource": "", "tags": ["Not Applicable"]}, {"url": "https://github.com/moby/moby/security/advisories/GHSA-33pg-m6jh-5237", "name": "", "refsource": "", "tags": ["Not Applicable"]}, {"url": "https://github.com/moby/moby/security/advisories/GHSA-6wrf-mxfj-pf5p", "name": "", "refsource": "", "tags": ["Mitigation", "Vendor Advisory"]}, {"url": "https://github.com/moby/moby/security/advisories/GHSA-vwm3-crmr-xfxw", "name": "", "refsource": "", "tags": ["Vendor Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/LYZOKMMVX4SIEHPJW3SJUQGMO5YZCPHC/", "name": "", "refsource": "", "tags": []}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XNF4OLYZRQE75EB5TW5N42FSXHBXGWFE/", "name": "", "refsource": "", "tags": []}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZTE4ITXXPIWZEQ4HYQCB6N6GZIMWXDAI/", "name": "", "refsource": "", "tags": []}, {"url": "https://github.com/moby/libnetwork/security/advisories/GHSA-gvm4-2qqg-m333", "name": "", "refsource": "", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/moby/moby/security/advisories/GHSA-232p-vwff-86mp", "name": "", "refsource": "", "tags": ["Not Applicable"]}, {"url": "https://github.com/moby/moby/security/advisories/GHSA-33pg-m6jh-5237", "name": "", "refsource": "", "tags": ["Not Applicable"]}, {"url": "https://github.com/moby/moby/security/advisories/GHSA-6wrf-mxfj-pf5p", "name": "", "refsource": "", "tags": ["Mitigation", "Vendor Advisory"]}, {"url": "https://github.com/moby/moby/security/advisories/GHSA-vwm3-crmr-xfxw", "name": "", "refsource": "", "tags": ["Vendor Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/LYZOKMMVX4SIEHPJW3SJUQGMO5YZCPHC/", "name": "", "refsource": "", "tags": []}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XNF4OLYZRQE75EB5TW5N42FSXHBXGWFE/", "name": "", "refsource": "", "tags": []}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZTE4ITXXPIWZEQ4HYQCB6N6GZIMWXDAI/", "name": "", "refsource": "", "tags": []}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "CWE-420"}, {"lang": "en", "value": "CWE-636"}, {"lang": "en", "value": "CWE-755"}]}]}}, "impact": {"baseMetricV3": {"exploitabilityScore": 2.2, "impactScore": 4.0, "cvssV3": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:N/I:H/A:N", "baseScore": 6.8, "baseSeverity": "MEDIUM", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE"}}}, "configurations": {"CVE_data_version": "4.0", "nodes": [{"operator": "OR", "negate": false, "children": [], "cpe_match": [{"vulnerable": true, "cpe23Uri": "cpe:2.3:a:mobyproject:moby:*:*:*:*:*:*:*:*", "matchCriteriaId": "E7027BE5-D31C-40E5-81A4-A91028A687B3", "cpe_name": [], "versionStartIncluding": "1.12.0", "versionEndExcluding": "20.10.24"}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:a:mobyproject:moby:*:*:*:*:*:*:*:*", "matchCriteriaId": "911C8E32-9EC6-4AAD-93CD-C1880D06E3AD", "cpe_name": [], "versionStartIncluding": "23.0.0", "versionEndExcluding": "23.0.3"}]}]}}