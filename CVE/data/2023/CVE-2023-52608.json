{"cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "4.0", "CVE_data_meta": {"ID": "CVE-2023-52608", "ASSIGNER": "cve@kernel.org"}, "problemtype": {"problemtype_data": [{"description": []}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/12dc4217f16551d6dee9cbefc23fdb5659558cda", "name": "https://git.kernel.org/stable/c/12dc4217f16551d6dee9cbefc23fdb5659558cda", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/12dc4217f16551d6dee9cbefc23fdb5659558cda", "name": "https://git.kernel.org/stable/c/12dc4217f16551d6dee9cbefc23fdb5659558cda", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/437a310b22244d4e0b78665c3042e5d1c0f45306", "name": "https://git.kernel.org/stable/c/437a310b22244d4e0b78665c3042e5d1c0f45306", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/437a310b22244d4e0b78665c3042e5d1c0f45306", "name": "https://git.kernel.org/stable/c/437a310b22244d4e0b78665c3042e5d1c0f45306", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/614cc65032dcb0b64d23f5c5e338a8a04b12be5d", "name": "https://git.kernel.org/stable/c/614cc65032dcb0b64d23f5c5e338a8a04b12be5d", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/614cc65032dcb0b64d23f5c5e338a8a04b12be5d", "name": "https://git.kernel.org/stable/c/614cc65032dcb0b64d23f5c5e338a8a04b12be5d", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/7f95f6997f4fdd17abec3200cae45420a5489350", "name": "https://git.kernel.org/stable/c/7f95f6997f4fdd17abec3200cae45420a5489350", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/7f95f6997f4fdd17abec3200cae45420a5489350", "name": "https://git.kernel.org/stable/c/7f95f6997f4fdd17abec3200cae45420a5489350", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/9b5e1b93c83ee5fc9f5d7bd2d45b421bd87774a2", "name": "https://git.kernel.org/stable/c/9b5e1b93c83ee5fc9f5d7bd2d45b421bd87774a2", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/9b5e1b93c83ee5fc9f5d7bd2d45b421bd87774a2", "name": "https://git.kernel.org/stable/c/9b5e1b93c83ee5fc9f5d7bd2d45b421bd87774a2", "refsource": "", "tags": []}]}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nfirmware: arm_scmi: Check mailbox/SMT channel for consistency\n\nOn reception of a completion interrupt the shared memory area is accessed\nto retrieve the message header at first and then, if the message sequence\nnumber identifies a transaction which is still pending, the related\npayload is fetched too.\n\nWhen an SCMI command times out the channel ownership remains with the\nplatform until eventually a late reply is received and, as a consequence,\nany further transmission attempt remains pending, waiting for the channel\nto be relinquished by the platform.\n\nOnce that late reply is received the channel ownership is given back\nto the agent and any pending request is then allowed to proceed and\noverwrite the SMT area of the just delivered late reply; then the wait\nfor the reply to the new request starts.\n\nIt has been observed that the spurious IRQ related to the late reply can\nbe wrongly associated with the freshly enqueued request: when that happens\nthe SCMI stack in-flight lookup procedure is fooled by the fact that the\nmessage header now present in the SMT area is related to the new pending\ntransaction, even though the real reply has still to arrive.\n\nThis race-condition on the A2P channel can be detected by looking at the\nchannel status bits: a genuine reply from the platform will have set the\nchannel free bit before triggering the completion IRQ.\n\nAdd a consistency check to validate such condition in the A2P ISR."}]}}, "configurations": {"CVE_data_version": "4.0", "nodes": []}, "impact": {}, "publishedDate": "2024-03-13T14:15Z", "lastModifiedDate": "2024-11-21T08:40Z"}