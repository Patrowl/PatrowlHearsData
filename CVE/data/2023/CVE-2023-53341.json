{"publishedDate": "2025-09-17T15:15Z", "lastModifiedDate": "2025-09-17T15:15Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2023-53341", "ASSIGNER": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nof/fdt: run soc memory setup when early_init_dt_scan_memory fails\n\nIf memory has been found early_init_dt_scan_memory now returns 1. If\nit hasn't found any memory it will return 0, allowing other memory\nsetup mechanisms to carry on.\n\nPreviously early_init_dt_scan_memory always returned 0 without\ndistinguishing between any kind of memory setup being done or not. Any\ncode path after the early_init_dt_scan memory call in the ramips\nplat_mem_setup code wouldn't be executed anymore. Making\nearly_init_dt_scan_memory the only way to initialize the memory.\n\nSome boards, including my mt7621 based Cudy X6 board, depend on memory\ninitialization being done via the soc_info.mem_detect function\npointer. Those wouldn't be able to obtain memory and panic the kernel\nduring early bootup with the message \"early_init_dt_alloc_memory_arch:\nFailed to allocate 12416 bytes align=0x40\"."}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/04836fc5b720dfa32ff781383d84f63019abf9b9", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/2a12187d5853d9fd5102278cecef7dac7c8ce7ea", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/c4849f18185fd4e93b04cd45552f8d68c0240e21", "name": "", "refsource": "", "tags": []}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}]}}, "impact": {}, "configurations": {"CVE_data_version": "4.0", "nodes": []}}