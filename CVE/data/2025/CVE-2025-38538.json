{"publishedDate": "2025-08-16T12:15Z", "lastModifiedDate": "2025-08-28T15:15Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2025-38538", "ASSIGNER": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\ndmaengine: nbpfaxi: Fix memory corruption in probe()\n\nThe nbpf->chan[] array is allocated earlier in the nbpf_probe() function\nand it has \"num_channels\" elements.  These three loops iterate one\nelement farther than they should and corrupt memory.\n\nThe changes to the second loop are more involved.  In this case, we're\ncopying data from the irqbuf[] array into the nbpf->chan[] array.  If\nthe data in irqbuf[i] is the error IRQ then we skip it, so the iterators\nare not in sync.  I added a check to ensure that we don't go beyond the\nend of the irqbuf[] array.  I'm pretty sure this can't happen, but it\nseemed harmless to add a check.\n\nOn the other hand, after the loop has ended there is a check to ensure\nthat the \"chan\" iterator is where we expect it to be.  In the original\ncode we went one element beyond the end of the array so the iterator\nwasn't in the correct place and it would always return -EINVAL.  However,\nnow it will always be in the correct place.  I deleted the check since\nwe know the result."}, {"lang": "es", "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: dmaengine: nbpfaxi: Correcci\u00f3n de corrupci\u00f3n de memoria en probe(). La matriz nbpf-&gt;chan[] se asigna antes en la funci\u00f3n nbpf_probe() y contiene elementos \"num_channels\". Estos tres bucles iteran un elemento m\u00e1s all\u00e1 de lo debido y corrompen la memoria. Los cambios en el segundo bucle son m\u00e1s complejos. En este caso, copiamos datos de la matriz irqbuf[] a la matriz nbpf-&gt;chan[]. Si los datos en irqbuf[i] corresponden a la IRQ de error, la omitimos, por lo que los iteradores no est\u00e1n sincronizados. A\u00f1ad\u00ed una comprobaci\u00f3n para asegurar que no se sobrepase el final de la matriz irqbuf[]. Estoy bastante seguro de que esto no puede ocurrir, pero a\u00f1adir una comprobaci\u00f3n parec\u00eda inofensivo. Por otro lado, una vez finalizado el bucle, se realiza una comprobaci\u00f3n para asegurar que el iterador \"chan\" est\u00e9 donde esperamos. En el c\u00f3digo original, nos extendimos un elemento m\u00e1s all\u00e1 del final del array, por lo que el iterador no estaba en la posici\u00f3n correcta y siempre devolv\u00eda -EINVAL. Sin embargo, ahora siempre estar\u00e1 en la posici\u00f3n correcta. Elimin\u00e9 la comprobaci\u00f3n, ya que conocemos el resultado."}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/122160289adf8ebf15060f1cbf6265b55a914948", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/188c6ba1dd925849c5d94885c8bbdeb0b3dcf510", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/24861ef8b517a309a4225f2793be0cd8fa0bec9e", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/4bb016438335ec02b01f96bf1367378c2bfe03e5", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/84fff8e6f11b9af1407e273995b5257d99ff0cff", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/aec396b4f736f3f8d2c28a9cd2924a4ada57ae87", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/d6bbd67ab5de37a74ac85c83c5a26664b62034dd", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/f366b36c5e3ce29c9a3c8eed3d1631908e4fc8bb", "name": "", "refsource": "", "tags": []}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}]}}, "impact": {}, "configurations": {"CVE_data_version": "4.0", "nodes": []}}