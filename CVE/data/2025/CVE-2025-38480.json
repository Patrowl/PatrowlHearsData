{"publishedDate": "2025-07-28T12:15Z", "lastModifiedDate": "2025-08-28T15:15Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2025-38480", "ASSIGNER": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\ncomedi: Fix use of uninitialized data in insn_rw_emulate_bits()\n\nFor Comedi `INSN_READ` and `INSN_WRITE` instructions on \"digital\"\nsubdevices (subdevice types `COMEDI_SUBD_DI`, `COMEDI_SUBD_DO`, and\n`COMEDI_SUBD_DIO`), it is common for the subdevice driver not to have\n`insn_read` and `insn_write` handler functions, but to have an\n`insn_bits` handler function for handling Comedi `INSN_BITS`\ninstructions.  In that case, the subdevice's `insn_read` and/or\n`insn_write` function handler pointers are set to point to the\n`insn_rw_emulate_bits()` function by `__comedi_device_postconfig()`.\n\nFor `INSN_WRITE`, `insn_rw_emulate_bits()` currently assumes that the\nsupplied `data[0]` value is a valid copy from user memory.  It will at\nleast exist because `do_insnlist_ioctl()` and `do_insn_ioctl()` in\n\"comedi_fops.c\" ensure at lease `MIN_SAMPLES` (16) elements are\nallocated.  However, if `insn->n` is 0 (which is allowable for\n`INSN_READ` and `INSN_WRITE` instructions, then `data[0]` may contain\nuninitialized data, and certainly contains invalid data, possibly from a\ndifferent instruction in the array of instructions handled by\n`do_insnlist_ioctl()`.  This will result in an incorrect value being\nwritten to the digital output channel (or to the digital input/output\nchannel if configured as an output), and may be reflected in the\ninternal saved state of the channel.\n\nFix it by returning 0 early if `insn->n` is 0, before reaching the code\nthat accesses `data[0]`.  Previously, the function always returned 1 on\nsuccess, but it is supposed to be the number of data samples actually\nread or written up to `insn->n`, which is 0 in this case."}, {"lang": "es", "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: comedi: Se corrige el uso de datos no inicializados en insn_rw_emulate_bits(). Para las instrucciones `INSN_READ` e `INSN_WRITE` de Comedi en subdispositivos \"digitales\" (tipos de subdispositivo `COMEDI_SUBD_DI`, `COMEDI_SUBD_DO` y `COMEDI_SUBD_DIO`), es com\u00fan que el controlador del subdispositivo no tenga las funciones de controlador `insn_read` e `insn_write`, sino una funci\u00f3n de controlador `insn_bits` para manejar las instrucciones `INSN_BITS` de Comedi. En ese caso, los punteros del controlador de funci\u00f3n `insn_read` y/o `insn_write` del subdispositivo se configuran para apuntar a la funci\u00f3n `insn_rw_emulate_bits()` mediante `__comedi_device_postconfig()`. Para `INSN_WRITE`, `insn_rw_emulate_bits()` actualmente asume que el valor `data[0]` proporcionado es una copia v\u00e1lida de la memoria del usuario. Al menos existir\u00e1 porque `do_insnlist_ioctl()` y `do_insn_ioctl()` en \"comedi_fops.c\" garantizan la asignaci\u00f3n de al menos `MIN_SAMPLES` (16) elementos. Sin embargo, si `insn-&gt;n` es 0 (lo cual es permitido para las instrucciones `INSN_READ` e `INSN_WRITE`, entonces `data[0]` puede contener datos no inicializados, y ciertamente contiene datos no v\u00e1lidos, posiblemente de una instrucci\u00f3n diferente en la matriz de instrucciones manejadas por `do_insnlist_ioctl()`. Esto dar\u00e1 como resultado que se escriba un valor incorrecto en el canal de salida digital (o en el canal de entrada/salida digital si se configura como una salida), y puede reflejarse en el estado guardado interno del canal. Arr\u00e9glelo devolviendo 0 temprano si `insn-&gt;n` es 0, antes de llegar al c\u00f3digo que accede a `data[0]`. Anteriormente, la funci\u00f3n siempre devolv\u00eda 1 en caso de \u00e9xito, pero se supone que es el n\u00famero de muestras de datos realmente le\u00eddas o escritas hasta `insn-&gt;n`, que es 0 en este caso."}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/10f9024a8c824a41827fff1fefefb314c98e2c88", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/16256d7efcf7acc9f39abe21522c4c6b77f67c00", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/2af1e7d389c2619219171d23f5b96dbcbb7f9656", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/3050d197d6bc9ef128944a70210f42d2430b3000", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/3ab55ffaaf75d0c7b68e332c1cdcc1b0e0044870", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/4c2981bf30401adfcdbfece4ab6f411f7c5875a1", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/c53570e62b5b28bdb56bb563190227f8307817a5", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/e9cb26291d009243a4478a7ffb37b3a9175bfce9", "name": "", "refsource": "", "tags": []}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}]}}, "impact": {}, "configurations": {"CVE_data_version": "4.0", "nodes": []}}