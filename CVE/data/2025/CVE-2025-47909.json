{"publishedDate": "2025-08-29T15:55Z", "lastModifiedDate": "2025-08-29T18:23Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "5.1", "CVE_data_meta": {"ID": "CVE-2025-47909", "ASSIGNER": "Go"}, "description": {"description_data": [{"lang": "en", "value": "Hosts listed in TrustedOrigins implicitly allow requests from the corresponding HTTP origins, allowing network MitMs to perform CSRF attacks. After the CVE-2025-24358 fix, a network attacker that places a form at http://example.com can't get it to submit to https://example.com because the Origin header is checked with sameOrigin against a synthetic URL. However, if a host is added to TrustedOrigins, both its HTTP and HTTPS origins will be allowed, because the schema of the synthetic URL is ignored and only the host is checked. For example, if an application is hosted on https://example.com and adds example.net to TrustedOrigins, a network attacker can serve a form at http://example.net to perform the attack. Applications should migrate to net/http.CrossOriginProtection, introduced in Go 1.25. If that is not an option, a backport is available as a module at filippo.io/csrf, and a drop-in replacement for the github.com/gorilla/csrf API is available at filippo.io/csrf/gorilla."}]}, "references": {"reference_data": [{"url": "https://github.com/golang/vulndb/issues/3884"}, {"url": "https://pkg.go.dev/vuln/GO-2025-3884"}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "CWE-346:"}]}]}}, "impact": {}, "configurations": {"CVE_data_version": "4.0", "nodes": [{"operator": "OR", "children": [], "cpe_match": [{"vulnerable": true, "cpe23Uri": "cpe:2.3:a:github.com/gorilla/csrf:github.com/gorilla/csrf:1.7.3:*:*:*:*:*:*:*", "cpe_name": []}]}]}}