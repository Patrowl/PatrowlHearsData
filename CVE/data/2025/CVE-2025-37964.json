{"publishedDate": "2025-05-20T16:15Z", "lastModifiedDate": "2025-05-21T20:24Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2025-37964", "ASSIGNER": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nx86/mm: Eliminate window where TLB flushes may be inadvertently skipped\n\ntl;dr: There is a window in the mm switching code where the new CR3 is\nset and the CPU should be getting TLB flushes for the new mm.  But\nshould_flush_tlb() has a bug and suppresses the flush.  Fix it by\nwidening the window where should_flush_tlb() sends an IPI.\n\nLong Version:\n\n=== History ===\n\nThere were a few things leading up to this.\n\nFirst, updating mm_cpumask() was observed to be too expensive, so it was\nmade lazier.  But being lazy caused too many unnecessary IPIs to CPUs\ndue to the now-lazy mm_cpumask().  So code was added to cull\nmm_cpumask() periodically[2].  But that culling was a bit too aggressive\nand skipped sending TLB flushes to CPUs that need them.  So here we are\nagain.\n\n=== Problem ===\n\nThe too-aggressive code in should_flush_tlb() strikes in this window:\n\n\t// Turn on IPIs for this CPU/mm combination, but only\n\t// if should_flush_tlb() agrees:\n\tcpumask_set_cpu(cpu, mm_cpumask(next));\n\n\tnext_tlb_gen = atomic64_read(&next->context.tlb_gen);\n\tchoose_new_asid(next, next_tlb_gen, &new_asid, &need_flush);\n\tload_new_mm_cr3(need_flush);\n\t// ^ After 'need_flush' is set to false, IPIs *MUST*\n\t// be sent to this CPU and not be ignored.\n\n        this_cpu_write(cpu_tlbstate.loaded_mm, next);\n\t// ^ Not until this point does should_flush_tlb()\n\t// become true!\n\nshould_flush_tlb() will suppress TLB flushes between load_new_mm_cr3()\nand writing to 'loaded_mm', which is a window where they should not be\nsuppressed.  Whoops.\n\n=== Solution ===\n\nThankfully, the fuzzy \"just about to write CR3\" window is already marked\nwith loaded_mm==LOADED_MM_SWITCHING.  Simply checking for that state in\nshould_flush_tlb() is sufficient to ensure that the CPU is targeted with\nan IPI.\n\nThis will cause more TLB flush IPIs.  But the window is relatively small\nand I do not expect this to cause any kind of measurable performance\nimpact.\n\nUpdate the comment where LOADED_MM_SWITCHING is written since it grew\nyet another user.\n\nPeter Z also raised a concern that should_flush_tlb() might not observe\n'loaded_mm' and 'is_lazy' in the same order that switch_mm_irqs_off()\nwrites them.  Add a barrier to ensure that they are observed in the\norder they are written."}, {"lang": "es", "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: x86/mm: Eliminar la ventana donde los vaciados de TLB pueden omitirse inadvertidamente tl;dr: Hay una ventana en el c\u00f3digo de conmutaci\u00f3n mm donde se establece el nuevo CR3 y la CPU deber\u00eda obtener vaciados de TLB para el nuevo mm. Pero should_flush_tlb() tiene un error y suprime el vaciado. Arr\u00e9glelo ampliando la ventana donde should_flush_tlb() env\u00eda una IPI. Versi\u00f3n larga: === Historial === Hubo algunas cosas que llevaron a esto. Primero, se observ\u00f3 que actualizar mm_cpumask() era demasiado costoso, por lo que se hizo m\u00e1s perezoso. Pero ser perezoso caus\u00f3 demasiados IPI innecesarios a las CPU debido al ahora perezoso mm_cpumask(). Entonces se agreg\u00f3 c\u00f3digo para descartar mm_cpumask() peri\u00f3dicamente[2]. Pero ese descarte fue demasiado agresivo y omiti\u00f3 el env\u00edo de vaciados de TLB a las CPU que los necesitan. As\u00ed que aqu\u00ed estamos de nuevo. === Problema === El c\u00f3digo demasiado agresivo en should_flush_tlb() ataca en esta ventana: // Activa las IPI para esta combinaci\u00f3n de CPU/mm, pero solo si should_flush_tlb() est\u00e1 de acuerdo: cpumask_set_cpu(cpu, mm_cpumask(next)); next_tlb_gen = atomic64_read(&amp;next-&gt;context.tlb_gen); choose_new_asid(next, next_tlb_gen, &amp;new_asid, &amp;need_flush); load_new_mm_cr3(need_flush); // ^ Despu\u00e9s de que 'need_flush' se establece en falso, las IPI *DEBEN* // enviarse a esta CPU y no ignorarse. this_cpu_write(cpu_tlbstate.loaded_mm, next); // ^ \u00a1No es hasta este punto que should_flush_tlb() // se vuelve verdadero! should_flush_tlb() suprimir\u00e1 los vaciados de TLB entre load_new_mm_cr3() y la escritura en 'loaded_mm', que es una ventana donde no deber\u00edan suprimirse. \u00a1Uy! === Soluci\u00f3n === Afortunadamente, la ventana difusa \"a punto de escribir CR3\" ya est\u00e1 marcada con load_mm==LOADED_MM_SWITCHING. Simplemente comprobar ese estado en should_flush_tlb() es suficiente para asegurar que la CPU est\u00e9 dirigida a un IPI. Esto provocar\u00e1 m\u00e1s IPI de vaciado de TLB. Sin embargo, la ventana es relativamente peque\u00f1a y no preveo que esto tenga ning\u00fan impacto medible en el rendimiento. Actualice el comentario donde se escribe LOADED_MM_SWITCHING, ya que ha generado otro usuario. Peter Z tambi\u00e9n plante\u00f3 la preocupaci\u00f3n de que should_flush_tlb() podr\u00eda no observar 'loaded_mm' e 'is_lazy' en el mismo orden en que switch_mm_irqs_off() los escribe. A\u00f1ade una barrera para garantizar que se observen en el orden en que est\u00e1n escritos."}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/02ad4ce144bd27f71f583f667fdf3b3ba0753477", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/12f703811af043d32b1c8a30001b2fa04d5cd0ac", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/399ec9ca8fc4999e676ff89a90184ec40031cf59", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/d41072906abec8bb8e01ed16afefbaa558908c89", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/d87392094f96e162fa5fa5a8640d70cc0952806f", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/fea4e317f9e7e1f449ce90dedc27a2d2a95bee5a", "name": "", "refsource": "", "tags": []}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}]}}, "impact": {}, "configurations": {"CVE_data_version": "4.0", "nodes": []}}