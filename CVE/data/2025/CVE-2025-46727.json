{"publishedDate": "2025-05-07T23:15Z", "lastModifiedDate": "2025-06-17T19:44Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2025-46727", "ASSIGNER": "security-advisories@github.com"}, "description": {"description_data": [{"lang": "en", "value": "Rack is a modular Ruby web server interface. Prior to versions 2.2.14, 3.0.16, and 3.1.14, `Rack::QueryParser` parses query strings and `application/x-www-form-urlencoded` bodies into Ruby data structures without imposing any limit on the number of parameters, allowing attackers to send requests with extremely large numbers of parameters. The vulnerability arises because `Rack::QueryParser` iterates over each `&`-separated key-value pair and adds it to a Hash without enforcing an upper bound on the total number of parameters. This allows an attacker to send a single request containing hundreds of thousands (or more) of parameters, which consumes excessive memory and CPU during parsing. An attacker can trigger denial of service by sending specifically crafted HTTP requests, which can cause memory exhaustion or pin CPU resources, stalling or crashing the Rack server. This results in full service disruption until the affected worker is restarted. Versions 2.2.14, 3.0.16, and 3.1.14 fix the issue. Some other mitigations are available. One may use middleware to enforce a maximum query string size or parameter count, or employ a reverse proxy (such as Nginx) to limit request sizes and reject oversized query strings or bodies. Limiting request body sizes and query string lengths at the web server or CDN level is an effective mitigation."}, {"lang": "es", "value": "Rack es una interfaz modular de servidor web Ruby. En versiones anteriores a la 2.2.14, la 3.0.16 y la 3.1.14, `Rack::QueryParser` analiza cadenas de consulta y cuerpos `application/x-www-form-urlencoded` en estructuras de datos Ruby sin imponer ning\u00fan l\u00edmite en el n\u00famero de par\u00e1metros, lo que permite a los atacantes enviar solicitudes con una cantidad extremadamente grande de par\u00e1metros. La vulnerabilidad surge porque `Rack::QueryParser` itera sobre cada par clave-valor separado por `&amp;` y lo a\u00f1ade a un hash sin imponer un l\u00edmite superior en el n\u00famero total de par\u00e1metros. Esto permite a un atacante enviar una sola solicitud con cientos de miles (o m\u00e1s) de par\u00e1metros, lo que consume demasiada memoria y CPU durante el an\u00e1lisis. Un atacante puede provocar una denegaci\u00f3n de servicio enviando solicitudes HTTP manipuladas espec\u00edficamente, lo que puede causar el agotamiento de la memoria o la sobrecarga de recursos de la CPU, bloqueando o bloqueando el servidor Rack. Esto provoca una interrupci\u00f3n total del servicio hasta que se reinicia el trabajador afectado. Las versiones 2.2.14, 3.0.16 y 3.1.14 solucionan el problema. Existen otras mitigaciones. Se puede usar middleware para imponer un tama\u00f1o m\u00e1ximo de cadena de consulta o un n\u00famero m\u00e1ximo de par\u00e1metros, o emplear un proxy inverso (como Nginx) para limitar el tama\u00f1o de las solicitudes y rechazar cadenas o cuerpos de consulta demasiado grandes. Limitar el tama\u00f1o del cuerpo de la solicitud y la longitud de las cadenas de consulta a nivel de servidor web o CDN es una mitigaci\u00f3n eficaz."}]}, "references": {"reference_data": [{"url": "https://github.com/rack/rack/commit/2bb5263b464b65ba4b648996a579dbd180d2b712", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://github.com/rack/rack/commit/3f5a4249118d09d199fe480466c8c6717e43b6e3", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://github.com/rack/rack/commit/cd6b70a1f2a1016b73dc906f924869f4902c2d74", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://github.com/rack/rack/security/advisories/GHSA-gjh7-p2fx-99vx", "name": "", "refsource": "", "tags": ["Mitigation", "Vendor Advisory"]}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "CWE-400"}, {"lang": "en", "value": "CWE-770"}]}]}}, "impact": {"baseMetricV3": {"exploitabilityScore": 3.9, "impactScore": 3.6, "cvssV3": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "baseScore": 7.5, "baseSeverity": "HIGH", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH"}}}, "configurations": {"CVE_data_version": "4.0", "nodes": [{"operator": "OR", "negate": false, "children": [], "cpe_match": [{"vulnerable": true, "cpe23Uri": "cpe:2.3:a:rack:rack:*:*:*:*:*:ruby:*:*", "matchCriteriaId": "FEC7339A-778A-4139-B900-C42761EA6F08", "cpe_name": [], "versionEndExcluding": "2.2.14"}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:a:rack:rack:*:-:*:*:*:ruby:*:*", "matchCriteriaId": "5D926918-70AF-4922-9235-0189DF4395F6", "cpe_name": [], "versionStartIncluding": "3.0.0", "versionEndExcluding": "3.0.16"}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:a:rack:rack:*:-:*:*:*:ruby:*:*", "matchCriteriaId": "0D85D0E5-7372-44BF-8298-F22735F71211", "cpe_name": [], "versionStartIncluding": "3.1.0", "versionEndExcluding": "3.1.14"}]}]}}