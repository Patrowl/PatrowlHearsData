{"publishedDate": "2025-03-14T18:15Z", "lastModifiedDate": "2025-03-19T16:15Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2025-29780", "ASSIGNER": "security-advisories@github.com"}, "description": {"description_data": [{"lang": "en", "value": "Post-Quantum Secure Feldman's Verifiable Secret Sharing provides a Python implementation of Feldman's Verifiable Secret Sharing (VSS) scheme. In versions 0.8.0b2 and prior, the `feldman_vss` library contains timing side-channel vulnerabilities in its matrix operations, specifically within the `_find_secure_pivot` function and potentially other parts of `_secure_matrix_solve`. These vulnerabilities are due to Python's execution model, which does not guarantee constant-time execution. An attacker with the ability to measure the execution time of these functions (e.g., through repeated calls with carefully crafted inputs) could potentially recover secret information used in the Verifiable Secret Sharing (VSS) scheme. The `_find_secure_pivot` function, used during Gaussian elimination in `_secure_matrix_solve`, attempts to find a non-zero pivot element. However, the conditional statement `if matrix[row][col] != 0 and row_random < min_value:` has execution time that depends on the value of `matrix[row][col]`. This timing difference can be exploited by an attacker. The `constant_time_compare` function in this file also does not provide a constant-time guarantee. The Python implementation of matrix operations in the _find_secure_pivot and _secure_matrix_solve functions cannot guarantee constant-time execution, potentially leaking information about secret polynomial coefficients. An attacker with the ability to make precise timing measurements of these operations could potentially extract secret information through statistical analysis of execution times, though practical exploitation would require significant expertise and controlled execution environments. Successful exploitation of these timing side-channels could allow an attacker to recover secret keys or other sensitive information protected by the VSS scheme. This could lead to a complete compromise of the shared secret. As of time of publication, no patched versions of Post-Quantum Secure Feldman's Verifiable Secret Sharing exist, but other mitigations are available. As acknowledged in the library's documentation, these vulnerabilities cannot be adequately addressed in pure Python. In the short term, consider using this library only in environments where timing measurements by attackers are infeasible. In the medium term, implement your own wrappers around critical operations using constant-time libraries in languages like Rust, Go, or C. In the long term, wait for the planned Rust implementation mentioned in the library documentation that will properly address these issues."}, {"lang": "es", "value": "Post-Quantum Secure Feldman's Verifiable Secret Sharing proporciona una implementaci\u00f3n en Python del esquema de Intercambio de Secretos Verificables (VSS) de Feldman. En las versiones 0.7.6b0 y anteriores, la librer\u00eda `feldman_vss` contiene vulnerabilidades de canal lateral de temporizaci\u00f3n en sus operaciones matriciales, espec\u00edficamente en la funci\u00f3n `_find_secure_pivot` y posiblemente en otras partes de `_secure_matrix_solve`. Estas vulnerabilidades se deben al modelo de ejecuci\u00f3n de Python, que no garantiza una ejecuci\u00f3n en tiempo constante. Un atacante con la capacidad de medir el tiempo de ejecuci\u00f3n de estas funciones (p. ej., mediante llamadas repetidas con entradas cuidadosamente dise\u00f1adas) podr\u00eda recuperar informaci\u00f3n secreta utilizada en el esquema de Intercambio de Secretos Verificables (VSS). La funci\u00f3n `_find_secure_pivot`, utilizada durante la eliminaci\u00f3n gaussiana en `_secure_matrix_solve`, intenta encontrar un elemento pivote distinto de cero. Sin embargo, la sentencia condicional `if matrix[row][col] != 0 and row_random &lt; min_value:` tiene un tiempo de ejecuci\u00f3n que depende del valor de `matrix[row][col]`. Esta diferencia de tiempo puede ser explotada por un atacante. La funci\u00f3n `constant_time_compare` en este archivo tampoco proporciona una garant\u00eda de tiempo constante. La implementaci\u00f3n de Python de las operaciones matriciales en las funciones _find_secure_pivot y _secure_matrix_solve no puede garantizar la ejecuci\u00f3n en tiempo constante, lo que podr\u00eda filtrar informaci\u00f3n sobre los coeficientes polin\u00f3micos secretos. Un atacante con la capacidad de realizar mediciones precisas de tiempo de estas operaciones podr\u00eda extraer informaci\u00f3n secreta a trav\u00e9s del an\u00e1lisis estad\u00edstico de los tiempos de ejecuci\u00f3n, aunque la explotaci\u00f3n pr\u00e1ctica requerir\u00eda una experiencia significativa y entornos de ejecuci\u00f3n controlados. La explotaci\u00f3n exitosa de estos canales laterales de tiempo podr\u00eda permitir a un atacante recuperar claves secretas u otra informaci\u00f3n confidencial protegida por el esquema VSS. Esto podr\u00eda llevar a un compromiso completo del secreto compartido. Al momento de la publicaci\u00f3n, no exist\u00edan versiones parcheadas de la Intercambio de Secretos Verificables de Feldman con Seguridad Post-Cu\u00e1ntica, pero s\u00ed existen otras mitigaciones. Como se reconoce en la documentaci\u00f3n de la librer\u00eda, estas vulnerabilidades no se pueden abordar adecuadamente en Python puro. A corto plazo, considere usar esta librer\u00eda solo en entornos donde las mediciones de tiempo por parte de los atacantes sean inviables. A mediano plazo, implemente sus propios envoltorios para operaciones cr\u00edticas utilizando librer\u00edas de tiempo constante en lenguajes como Rust, Go o C. A largo plazo, espere la implementaci\u00f3n planificada de Rust mencionada en la documentaci\u00f3n de la librer\u00eda, que abordar\u00e1 adecuadamente estos problemas."}]}, "references": {"reference_data": [{"url": "https://en.wikipedia.org/wiki/Side-channel_attack", "name": "", "refsource": "", "tags": []}, {"url": "https://github.com/DavidOsipov/PostQuantum-Feldman-VSS/security/advisories/GHSA-q65w-fg65-79f4", "name": "", "refsource": "", "tags": []}, {"url": "https://www.rambus.com/wp-content/uploads/2015/08/TimingAttacks.pdf", "name": "", "refsource": "", "tags": []}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "CWE-203"}, {"lang": "en", "value": "CWE-208"}, {"lang": "en", "value": "CWE-385"}]}]}}, "impact": {"baseMetricV4": {"cvssV4": {"version": "4.0", "vectorString": "CVSS:4.0/AV:L/AC:H/AT:P/PR:L/UI:N/VC:H/VI:L/VA:N/SC:N/SI:N/SA:N/E:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MAT:X/MPR:X/MUI:X/MVC:X/MVI:X/MVA:X/MSC:X/MSI:X/MSA:X/S:X/AU:X/R:X/V:X/RE:X/U:X", "baseScore": 5.8, "baseSeverity": "MEDIUM", "attackVector": "LOCAL", "attackComplexity": "HIGH", "attackRequirements": "PRESENT", "privilegesRequired": "LOW", "userInteraction": "NONE", "vulnConfidentialityImpact": "HIGH", "vulnIntegrityImpact": "LOW", "vulnAvailabilityImpact": "NONE", "subConfidentialityImpact": "NONE", "subIntegrityImpact": "NONE", "subAvailabilityImpact": "NONE", "exploitMaturity": "NOT_DEFINED", "confidentialityRequirement": "NOT_DEFINED", "integrityRequirement": "NOT_DEFINED", "availabilityRequirement": "NOT_DEFINED", "modifiedAttackVector": "NOT_DEFINED", "modifiedAttackComplexity": "NOT_DEFINED", "modifiedAttackRequirements": "NOT_DEFINED", "modifiedPrivilegesRequired": "NOT_DEFINED", "modifiedUserInteraction": "NOT_DEFINED", "modifiedVulnConfidentialityImpact": "NOT_DEFINED", "modifiedVulnIntegrityImpact": "NOT_DEFINED", "modifiedVulnAvailabilityImpact": "NOT_DEFINED", "modifiedSubConfidentialityImpact": "NOT_DEFINED", "modifiedSubIntegrityImpact": "NOT_DEFINED", "modifiedSubAvailabilityImpact": "NOT_DEFINED", "Safety": "NOT_DEFINED", "Automatable": "NOT_DEFINED", "Recovery": "NOT_DEFINED", "valueDensity": "NOT_DEFINED", "vulnerabilityResponseEffort": "NOT_DEFINED", "providerUrgency": "NOT_DEFINED"}}}, "configurations": {"CVE_data_version": "4.0", "nodes": []}}