{"publishedDate": "2025-04-08T09:15Z", "lastModifiedDate": "2025-04-08T18:13Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2025-22015", "ASSIGNER": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nmm/migrate: fix shmem xarray update during migration\n\nA shmem folio can be either in page cache or in swap cache, but not at the\nsame time.  Namely, once it is in swap cache, folio->mapping should be\nNULL, and the folio is no longer in a shmem mapping.\n\nIn __folio_migrate_mapping(), to determine the number of xarray entries to\nupdate, folio_test_swapbacked() is used, but that conflates shmem in page\ncache case and shmem in swap cache case.  It leads to xarray multi-index\nentry corruption, since it turns a sibling entry to a normal entry during\nxas_store() (see [1] for a userspace reproduction).  Fix it by only using\nfolio_test_swapcache() to determine whether xarray is storing swap cache\nentries or not to choose the right number of xarray entries to update.\n\n[1] https://lore.kernel.org/linux-mm/Z8idPCkaJW1IChjT@casper.infradead.org/\n\nNote:\nIn __split_huge_page(), folio_test_anon() && folio_test_swapcache() is\nused to get swap_cache address space, but that ignores the shmem folio in\nswap cache case.  It could lead to NULL pointer dereferencing when a\nin-swap-cache shmem folio is split at __xa_store(), since\n!folio_test_anon() is true and folio->mapping is NULL.  But fortunately,\nits caller split_huge_page_to_list_to_order() bails out early with EBUSY\nwhen folio->mapping is NULL.  So no need to take care of it here."}, {"lang": "es", "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: mm/migrate: arregla la actualizaci\u00f3n de xarray de shmem durante la migraci\u00f3n un folio de shmem puede estar en la cach\u00e9 de p\u00e1gina o en la cach\u00e9 de intercambio, pero no al mismo tiempo. Es decir, una vez que est\u00e1 en la cach\u00e9 de intercambio, folio-&gt;mapping debe ser NULL y el folio ya no est\u00e1 en una asignaci\u00f3n de shmem. En __folio_migrate_mapping(), para determinar el n\u00famero de entradas de xarray a actualizar, se usa folio_test_swapbacked(), pero eso combina shmem en el caso de la cach\u00e9 de p\u00e1gina y shmem en el caso de la cach\u00e9 de intercambio. Lleva a la corrupci\u00f3n de entradas de m\u00faltiples \u00edndices de xarray, ya que convierte una entrada hermana en una entrada normal durante xas_store() (vea [1] para una reproducci\u00f3n del espacio de usuario). Arr\u00e9glelo usando solo folio_test_swapcache() para determinar si xarray est\u00e1 almacenando entradas de cach\u00e9 de intercambio o no para elegir el n\u00famero correcto de entradas de xarray para actualizar. [1] https://lore.kernel.org/linux-mm/Z8idPCkaJW1IChjT@casper.infradead.org/ Nota: En __split_huge_page(), se usan folio_test_anon() y folio_test_swapcache() para obtener el espacio de direcciones de la cach\u00e9 de intercambio, pero esto ignora el folio shmem en el caso de la cach\u00e9 de intercambio. Esto podr\u00eda provocar la desreferenciaci\u00f3n de punteros nulos cuando un folio shmem en la cach\u00e9 de intercambio se divide en __xa_store(), ya que !folio_test_anon() es verdadero y folio-&gt;mapping es nulo. Afortunadamente, su llamador, split_huge_page_to_list_to_order(), se detiene antes de tiempo con EBUSY cuando folio-&gt;mapping es nulo. Por lo tanto, no es necesario ocuparse de ello aqu\u00ed."}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/29124ae980e2860f0eec7355949d3d3292ee81da", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/49100c0b070e900f87c8fac3be9b9ef8a30fa673", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/60cf233b585cdf1f3c5e52d1225606b86acd08b0", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/75cfb92eb63298d717b6b0118f91ba12c4fcfeb5", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/c057ee03f751d6cecf7ee64f52f6545d94082aaa", "name": "", "refsource": "", "tags": []}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}]}}, "impact": {}, "configurations": {"CVE_data_version": "4.0", "nodes": []}}