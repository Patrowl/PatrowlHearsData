{"publishedDate": "2025-04-16T15:16Z", "lastModifiedDate": "2025-09-09T17:15Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2025-22113", "ASSIGNER": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\next4: avoid journaling sb update on error if journal is destroying\n\nPresently we always BUG_ON if trying to start a transaction on a journal marked\nwith JBD2_UNMOUNT, since this should never happen. However, while ltp running\nstress tests, it was observed that in case of some error handling paths, it is\npossible for update_super_work to start a transaction after the journal is\ndestroyed eg:\n\n(umount)\next4_kill_sb\n  kill_block_super\n    generic_shutdown_super\n      sync_filesystem /* commits all txns */\n      evict_inodes\n        /* might start a new txn */\n      ext4_put_super\n\tflush_work(&sbi->s_sb_upd_work) /* flush the workqueue */\n        jbd2_journal_destroy\n          journal_kill_thread\n            journal->j_flags |= JBD2_UNMOUNT;\n          jbd2_journal_commit_transaction\n            jbd2_journal_get_descriptor_buffer\n              jbd2_journal_bmap\n                ext4_journal_bmap\n                  ext4_map_blocks\n                    ...\n                    ext4_inode_error\n                      ext4_handle_error\n                        schedule_work(&sbi->s_sb_upd_work)\n\n                                               /* work queue kicks in */\n                                               update_super_work\n                                                 jbd2_journal_start\n                                                   start_this_handle\n                                                     BUG_ON(journal->j_flags &\n                                                            JBD2_UNMOUNT)\n\nHence, introduce a new mount flag to indicate journal is destroying and only do\na journaled (and deferred) update of sb if this flag is not set. Otherwise, just\nfallback to an un-journaled commit.\n\nFurther, in the journal destroy path, we have the following sequence:\n\n  1. Set mount flag indicating journal is destroying\n  2. force a commit and wait for it\n  3. flush pending sb updates\n\nThis sequence is important as it ensures that, after this point, there is no sb\nupdate that might be journaled so it is safe to update the sb outside the\njournal. (To avoid race discussed in 2d01ddc86606)\n\nAlso, we don't need a similar check in ext4_grp_locked_error since it is only\ncalled from mballoc and AFAICT it would be always valid to schedule work here."}, {"lang": "es", "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: ext4: evitar el registro en diario de la actualizaci\u00f3n de sb en caso de error si el diario se est\u00e1 destruyendo. Actualmente, siempre aplicamos BUG_ON al intentar iniciar una transacci\u00f3n en un diario marcado con JBD2_UNMOUNT, ya que esto nunca deber\u00eda ocurrir. Sin embargo, mientras ltp ejecutaba pruebas de estr\u00e9s, se observ\u00f3 que en caso de algunas rutas de gesti\u00f3n de errores, es posible que update_super_work inicie una transacci\u00f3n despu\u00e9s de que el diario se destruya, por ejemplo:  (umount) ext4_kill_sb kill_block_super generic_shutdown_super sync_filesystem /* commits all txns */ evict_inodes /* might start a new txn */ ext4_put_super flush_work(&amp;sbi-&gt;s_sb_upd_work) /* flush the workqueue */ jbd2_journal_destroy journal_kill_thread journal-&gt;j_flags |= JBD2_UNMOUNT; jbd2_journal_commit_transaction jbd2_journal_get_descriptor_buffer jbd2_journal_bmap ext4_journal_bmap ext4_map_blocks ... ext4_inode_error ext4_handle_error schedule_work(&amp;sbi-&gt;s_sb_upd_work) /* work queue kicks in */ update_super_work jbd2_journal_start start_this_handle BUG_ON(journal-&gt;j_flags &amp; JBD2_UNMOUNT)  Por lo tanto, se introduce un nuevo indicador de montaje para indicar que el diario se est\u00e1 destruyendo y solo se realiza una actualizaci\u00f3n registrada (y diferida) de sb si este indicador no est\u00e1 configurado. De lo contrario, simplemente se recurre a una confirmaci\u00f3n no registrada. Adem\u00e1s, en la ruta de destrucci\u00f3n del diario, tenemos la siguiente secuencia: 1. Establecer el indicador de montaje que indica que el diario se est\u00e1 destruyendo 2. forzar una confirmaci\u00f3n y esperarla 3. vaciar las actualizaciones pendientes del sb Esta secuencia es importante ya que garantiza que, despu\u00e9s de este punto, no haya ninguna actualizaci\u00f3n del sb que pueda registrarse, por lo que es seguro actualizar el sb fuera del diario. (Para evitar la ejecuci\u00f3n discutida en 2d01ddc86606) Adem\u00e1s, no necesitamos una comprobaci\u00f3n similar en ext4_grp_locked_error ya que solo se llama desde mballoc y AFAICT siempre ser\u00eda v\u00e1lido programar el trabajo aqu\u00ed."}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/ce2f26e73783b4a7c46a86e3af5b5c8de0971790", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/db05767b5bc307143d99fe2afd8c43af58d2ebef", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/eddca44ddf810e27f0c96913aa3cc92ebd679ddb", "name": "", "refsource": "", "tags": []}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}]}}, "impact": {}, "configurations": {"CVE_data_version": "4.0", "nodes": []}}