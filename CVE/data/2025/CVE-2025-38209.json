{"publishedDate": "2025-07-04T14:15Z", "lastModifiedDate": "2025-07-08T16:18Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2025-38209", "ASSIGNER": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nnvme-tcp: remove tag set when second admin queue config fails\n\nCommit 104d0e2f6222 (\"nvme-fabrics: reset admin connection for secure\nconcatenation\") modified nvme_tcp_setup_ctrl() to call\nnvme_tcp_configure_admin_queue() twice. The first call prepares for\nDH-CHAP negotitation, and the second call is required for secure\nconcatenation. However, this change triggered BUG KASAN slab-use-after-\nfree in blk_mq_queue_tag_busy_iter(). This BUG can be recreated by\nrepeating the blktests test case nvme/063 a few times [1].\n\nWhen the BUG happens, nvme_tcp_create_ctrl() fails in the call chain\nbelow:\n\nnvme_tcp_create_ctrl()\n nvme_tcp_alloc_ctrl() new=true             ... Alloc nvme_tcp_ctrl and admin_tag_set\n nvme_tcp_setup_ctrl() new=true\n  nvme_tcp_configure_admin_queue() new=true ... Succeed\n   nvme_alloc_admin_tag_set()               ... Alloc the tag set for admin_tag_set\n  nvme_stop_keep_alive()\n  nvme_tcp_teardown_admin_queue() remove=false\n  nvme_tcp_configure_admin_queue() new=false\n   nvme_tcp_alloc_admin_queue()             ... Fail, but do not call nvme_remove_admin_tag_set()\n nvme_uninit_ctrl()\n nvme_put_ctrl()                            ... Free up the nvme_tcp_ctrl and admin_tag_set\n\nThe first call of nvme_tcp_configure_admin_queue() succeeds with\nnew=true argument. The second call fails with new=false argument. This\nsecond call does not call nvme_remove_admin_tag_set() on failure, due to\nthe new=false argument. Then the admin tag set is not removed. However,\nnvme_tcp_create_ctrl() assumes that nvme_tcp_setup_ctrl() would call\nnvme_remove_admin_tag_set(). Then it frees up struct nvme_tcp_ctrl which\nhas admin_tag_set field. Later on, the timeout handler accesses the\nadmin_tag_set field and causes the BUG KASAN slab-use-after-free.\n\nTo not leave the admin tag set, call nvme_remove_admin_tag_set() when\nthe second nvme_tcp_configure_admin_queue() call fails. Do not return\nfrom nvme_tcp_setup_ctrl() on failure. Instead, jump to \"destroy_admin\"\ngo-to label to call nvme_tcp_teardown_admin_queue() which calls\nnvme_remove_admin_tag_set()."}, {"lang": "es", "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: nvme-tcp: eliminar el conjunto de etiquetas cuando falla la configuraci\u00f3n de la segunda cola de administraci\u00f3n. El commit 104d0e2f6222 (\"nvme-fabrics: restablecer la conexi\u00f3n de administraci\u00f3n para una concatenaci\u00f3n segura\") modific\u00f3 nvme_tcp_setup_ctrl() para llamar a nvme_tcp_configure_admin_queue() dos veces. La primera llamada prepara la negociaci\u00f3n DH-CHAP y la segunda es necesaria para la concatenaci\u00f3n segura. Sin embargo, este cambio activ\u00f3 el error \"slab-use-after-free\" en blk_mq_queue_tag_busy_iter()\". Este error se puede recrear repitiendo el caso de prueba blktests nvme/063 varias veces [1]. Cuando ocurre el ERROR, nvme_tcp_create_ctrl() falla en la siguiente cadena de llamadas: nvme_tcp_create_ctrl() nvme_tcp_alloc_ctrl() new=true ... Asignar nvme_tcp_ctrl y admin_tag_set nvme_tcp_setup_ctrl() new=true nvme_tcp_configure_admin_queue() new=true ... Correcto nvme_alloc_admin_tag_set() ... Asignar el conjunto de etiquetas para admin_tag_set nvme_stop_keep_alive() nvme_tcp_teardown_admin_queue() remove=false nvme_tcp_configure_admin_queue() new=false nvme_tcp_alloc_admin_queue() ... Falla, pero no se llama nvme_remove_admin_tag_set() nvme_uninit_ctrl() nvme_put_ctrl() ... Libera nvme_tcp_ctrl y admin_tag_set La primera llamada de nvme_tcp_configure_admin_queue() tiene \u00e9xito con el argumento new=true. La segunda llamada falla con el argumento new=false. Esta segunda llamada no llama a nvme_remove_admin_tag_set() en caso de error, debido al argumento new=false. Entonces, el conjunto de etiquetas admin no se elimina. Sin embargo, nvme_tcp_create_ctrl() supone que nvme_tcp_setup_ctrl() llamar\u00eda a nvme_remove_admin_tag_set(). Luego libera la estructura nvme_tcp_ctrl que tiene el campo admin_tag_set. Posteriormente, el controlador de tiempo de espera accede al campo admin_tag_set y provoca el error \"BUG KASAN slab-use-after-free\". Para mantener la etiqueta admin activa, llame a nvme_remove_admin_tag_set() cuando falle la segunda llamada a nvme_tcp_configure_admin_queue(). No regrese de nvme_tcp_setup_ctrl() en caso de error. En su lugar, vaya a la etiqueta \"destroy_admin\" para llamar a nvme_tcp_teardown_admin_queue(), que a su vez llama a nvme_remove_admin_tag_set()."}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/db1da838b6012e4570c6f81e28ffe1d0ff595948", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/e7143706702a209c814ed2c3fc6486c2a7decf6c", "name": "", "refsource": "", "tags": []}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}]}}, "impact": {}, "configurations": {"CVE_data_version": "4.0", "nodes": []}}