{"publishedDate": "2025-07-25T13:15Z", "lastModifiedDate": "2025-07-25T15:29Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2025-38398", "ASSIGNER": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nspi: spi-qpic-snand: reallocate BAM transactions\n\nUsing the mtd_nandbiterrs module for testing the driver occasionally\nresults in weird things like below.\n\n1. swiotlb mapping fails with the following message:\n\n  [   85.926216] qcom_snand 79b0000.spi: swiotlb buffer is full (sz: 4294967294 bytes), total 512 (slots), used 0 (slots)\n  [   85.932937] qcom_snand 79b0000.spi: failure in mapping desc\n  [   87.999314] qcom_snand 79b0000.spi: failure to write raw page\n  [   87.999352] mtd_nandbiterrs: error: write_oob failed (-110)\n\n  Rebooting the board after this causes a panic due to a NULL pointer\n  dereference.\n\n2. If the swiotlb mapping does not fail, rebooting the board may result\n   in a different panic due to a bad spinlock magic:\n\n  [  256.104459] BUG: spinlock bad magic on CPU#3, procd/2241\n  [  256.104488] Unable to handle kernel paging request at virtual address ffffffff0000049b\n  ...\n\nInvestigating the issue revealed that these symptoms are results of\nmemory corruption which is caused by out of bounds access within the\ndriver.\n\nThe driver uses a dynamically allocated structure for BAM transactions,\nwhich structure must have enough space for all possible variations of\ndifferent flash operations initiated by the driver. The required space\nheavily depends on the actual number of 'codewords' which is calculated\nfrom the pagesize of the actual NAND chip.\n\nAlthough the qcom_nandc_alloc() function allocates memory for the BAM\ntransactions during probe, but since the actual number of 'codewords'\nis not yet know the allocation is done for one 'codeword' only.\n\nBecause of this, whenever the driver does a flash operation, and the\nnumber of the required transactions exceeds the size of the allocated\narrays the driver accesses memory out of the allocated range.\n\nTo avoid this, change the code to free the initially allocated BAM\ntransactions memory, and allocate a new one once the actual number of\n'codewords' required for a given NAND chip is known."}, {"lang": "es", "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: spi: spi-qpic-snand: reasignar transacciones BAM El uso del m\u00f3dulo mtd_nandbiterrs para probar el controlador ocasionalmente da como resultado cosas extra\u00f1as como la siguiente. 1. La asignaci\u00f3n de swiotlb falla con el siguiente mensaje: [85.926216] qcom_snand 79b0000.spi: el b\u00fafer de swiotlb est\u00e1 lleno (sz: 4294967294 bytes), total 512 (ranuras), usado 0 (ranuras) [85.932937] qcom_snand 79b0000.spi: error en la asignaci\u00f3n desc [87.999314] qcom_snand 79b0000.spi: error al escribir la p\u00e1gina sin formato [87.999352] mtd_nandbiterrs: error: write_oob fall\u00f3 (-110) Reiniciar la placa despu\u00e9s de esto provoca un p\u00e1nico debido a una desreferencia de puntero NULL. 2. Si el mapeo swiotlb no falla, reiniciar la placa puede resultar en un p\u00e1nico diferente debido a un spinlock magic defectuoso: [ 256.104459] BUG: spinlock bad magic on CPU#3, procd/2241 [ 256.104488] Unable to handle kernel paging request at virtual address ffffffff0000049b ... La investigaci\u00f3n del problema revel\u00f3 que estos s\u00edntomas son resultados de la corrupci\u00f3n de memoria que es causada por el acceso fuera de los l\u00edmites dentro del controlador. El controlador utiliza una estructura asignada din\u00e1micamente para las transacciones BAM, dicha estructura debe tener suficiente espacio para todas las posibles variaciones de diferentes operaciones flash iniciadas por el controlador. El espacio requerido depende en gran medida del n\u00famero real de 'palabras de c\u00f3digo' que se calcula a partir del tama\u00f1o de p\u00e1gina del chip NAND real. Aunque la funci\u00f3n qcom_nandc_alloc() asigna memoria para las transacciones BAM durante el sondeo, pero como el n\u00famero real de 'palabras de c\u00f3digo' a\u00fan no se conoce, la asignaci\u00f3n se realiza solo para una 'palabra de c\u00f3digo'. Por ello, siempre que el controlador realiza una operaci\u00f3n de flash y el n\u00famero de transacciones requeridas excede el tama\u00f1o de las matrices asignadas, accede a memoria fuera del rango asignado. Para evitarlo, modifique el c\u00f3digo para liberar la memoria de transacciones BAM inicialmente asignada y asigne una nueva una vez que se conozca el n\u00famero real de palabras de c\u00f3digo requeridas para un chip NAND determinado."}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/86fb36de1132b560f9305f0c78fa69f459fa0980", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/d85d0380292a7e618915069c3579ae23c7c80339", "name": "", "refsource": "", "tags": []}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}]}}, "impact": {}, "configurations": {"CVE_data_version": "4.0", "nodes": []}}