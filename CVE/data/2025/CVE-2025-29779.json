{"publishedDate": "2025-03-14T18:15Z", "lastModifiedDate": "2025-03-19T16:15Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2025-29779", "ASSIGNER": "security-advisories@github.com"}, "description": {"description_data": [{"lang": "en", "value": "Post-Quantum Secure Feldman's Verifiable Secret Sharing provides a Python implementation of Feldman's Verifiable Secret Sharing (VSS) scheme. In versions 0.8.0b2 and prior, the `secure_redundant_execution` function in feldman_vss.py attempts to mitigate fault injection attacks by executing a function multiple times and comparing results. However, several critical weaknesses exist. Python's execution environment cannot guarantee true isolation between redundant executions, the constant-time comparison implementation in Python is subject to timing variations, the randomized execution order and timing provide insufficient protection against sophisticated fault attacks, and the error handling may leak timing information about partial execution results. These limitations make the protection ineffective against targeted fault injection attacks, especially from attackers with physical access to the hardware. A successful fault injection attack could allow an attacker to bypass the redundancy check mechanisms, extract secret polynomial coefficients during share generation or verification, force the acceptance of invalid shares during verification, and/or manipulate the commitment verification process to accept fraudulent commitments. This undermines the core security guarantees of the Verifiable Secret Sharing scheme. As of time of publication, no patched versions of Post-Quantum Secure Feldman's Verifiable Secret Sharing exist, but other mitigations are available. Long-term remediation requires reimplementing the security-critical functions in a lower-level language like Rust. Short-term mitigations include deploying the software in environments with physical security controls, increasing the redundancy count (from 5 to a higher number) by modifying the source code, adding external verification of cryptographic operations when possible, considering using hardware security modules (HSMs) for key operations."}, {"lang": "es", "value": "Post-Quantum Secure Feldman's Verifiable Secret Sharing proporciona una implementaci\u00f3n en Python del esquema de intercambio de secretos verificables (VSS) de Feldman. En las versiones 0.7.6b0 y anteriores, la funci\u00f3n `secure_redundant_execution` de feldman_vss.py intenta mitigar los ataques de inyecci\u00f3n de fallos mediante la ejecuci\u00f3n de una funci\u00f3n varias veces y la comparaci\u00f3n de los resultados. Sin embargo, existen varias debilidades cr\u00edticas. El entorno de ejecuci\u00f3n de Python no puede garantizar un aislamiento real entre ejecuciones redundantes, la implementaci\u00f3n de comparaci\u00f3n en tiempo constante en Python est\u00e1 sujeta a variaciones de tiempo, el orden y la sincronizaci\u00f3n de ejecuci\u00f3n aleatorios no ofrecen suficiente protecci\u00f3n contra ataques de fallos sofisticados, y la gesti\u00f3n de errores puede filtrar informaci\u00f3n de tiempo sobre resultados de ejecuci\u00f3n parciales. Estas limitaciones hacen que la protecci\u00f3n sea ineficaz contra ataques de inyecci\u00f3n de fallos dirigidos, especialmente de atacantes con acceso f\u00edsico al hardware. Un ataque de inyecci\u00f3n de fallos exitoso podr\u00eda permitir a un atacante eludir los mecanismos de comprobaci\u00f3n de redundancia, extraer coeficientes polin\u00f3micos secretos durante la generaci\u00f3n o verificaci\u00f3n de acciones, forzar la aceptaci\u00f3n de acciones no v\u00e1lidas durante la verificaci\u00f3n o manipular el proceso de verificaci\u00f3n de compromisos para aceptar compromisos fraudulentos. Esto socava las garant\u00edas de seguridad fundamentales del esquema de Intercambio de Secretos Verificables. Al momento de la publicaci\u00f3n, no exist\u00edan versiones parcheadas del Intercambio de Secretos Verificables de Feldman de Post-Quantum Secure, pero s\u00ed existen otras mitigaciones. La soluci\u00f3n a largo plazo requiere reimplementar las funciones cr\u00edticas para la seguridad en un lenguaje de bajo nivel como Rust. Las mitigaciones a corto plazo incluyen la implementaci\u00f3n del software en entornos con controles de seguridad f\u00edsicos, el aumento de la redundancia (de 5 a un n\u00famero mayor) modificando el c\u00f3digo fuente, la adici\u00f3n de verificaci\u00f3n externa de las operaciones criptogr\u00e1ficas cuando sea posible y la consideraci\u00f3n del uso de m\u00f3dulos de seguridad de hardware (HSM) para las operaciones clave."}]}, "references": {"reference_data": [{"url": "https://en.wikipedia.org/wiki/Fault_attack", "name": "", "refsource": "", "tags": []}, {"url": "https://eprint.iacr.org/2004/100.pdf", "name": "", "refsource": "", "tags": []}, {"url": "https://github.com/DavidOsipov/PostQuantum-Feldman-VSS/security/advisories/GHSA-r8gc-qc2c-c7vh", "name": "", "refsource": "", "tags": []}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "CWE-1240"}, {"lang": "en", "value": "CWE-1279"}]}]}}, "impact": {"baseMetricV4": {"cvssV4": {"version": "4.0", "vectorString": "CVSS:4.0/AV:P/AC:H/AT:P/PR:N/UI:N/VC:H/VI:H/VA:H/SC:N/SI:N/SA:N/E:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MAT:X/MPR:X/MUI:X/MVC:X/MVI:X/MVA:X/MSC:X/MSI:X/MSA:X/S:X/AU:X/R:X/V:X/RE:X/U:X", "baseScore": 5.4, "baseSeverity": "MEDIUM", "attackVector": "PHYSICAL", "attackComplexity": "HIGH", "attackRequirements": "PRESENT", "privilegesRequired": "NONE", "userInteraction": "NONE", "vulnConfidentialityImpact": "HIGH", "vulnIntegrityImpact": "HIGH", "vulnAvailabilityImpact": "HIGH", "subConfidentialityImpact": "NONE", "subIntegrityImpact": "NONE", "subAvailabilityImpact": "NONE", "exploitMaturity": "NOT_DEFINED", "confidentialityRequirement": "NOT_DEFINED", "integrityRequirement": "NOT_DEFINED", "availabilityRequirement": "NOT_DEFINED", "modifiedAttackVector": "NOT_DEFINED", "modifiedAttackComplexity": "NOT_DEFINED", "modifiedAttackRequirements": "NOT_DEFINED", "modifiedPrivilegesRequired": "NOT_DEFINED", "modifiedUserInteraction": "NOT_DEFINED", "modifiedVulnConfidentialityImpact": "NOT_DEFINED", "modifiedVulnIntegrityImpact": "NOT_DEFINED", "modifiedVulnAvailabilityImpact": "NOT_DEFINED", "modifiedSubConfidentialityImpact": "NOT_DEFINED", "modifiedSubIntegrityImpact": "NOT_DEFINED", "modifiedSubAvailabilityImpact": "NOT_DEFINED", "Safety": "NOT_DEFINED", "Automatable": "NOT_DEFINED", "Recovery": "NOT_DEFINED", "valueDensity": "NOT_DEFINED", "vulnerabilityResponseEffort": "NOT_DEFINED", "providerUrgency": "NOT_DEFINED"}}}, "configurations": {"CVE_data_version": "4.0", "nodes": []}}