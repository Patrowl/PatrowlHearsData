{"publishedDate": "2025-08-22T16:15Z", "lastModifiedDate": "2025-08-22T18:08Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2025-38632", "ASSIGNER": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\npinmux: fix race causing mux_owner NULL with active mux_usecount\n\ncommit 5a3e85c3c397 (\"pinmux: Use sequential access to access\ndesc->pinmux data\") tried to address the issue when two client of the\nsame gpio calls pinctrl_select_state() for the same functionality, was\nresulting in NULL pointer issue while accessing desc->mux_owner.\nHowever, issue was not completely fixed due to the way it was handled\nand it can still result in the same NULL pointer.\n\nThe issue occurs due to the following interleaving:\n\n     cpu0 (process A)                   cpu1 (process B)\n\n      pin_request() {                   pin_free() {\n\n                                         mutex_lock()\n                                         desc->mux_usecount--; //becomes 0\n                                         ..\n                                         mutex_unlock()\n\n  mutex_lock(desc->mux)\n  desc->mux_usecount++; // becomes 1\n  desc->mux_owner = owner;\n  mutex_unlock(desc->mux)\n\n                                         mutex_lock(desc->mux)\n                                         desc->mux_owner = NULL;\n                                         mutex_unlock(desc->mux)\n\nThis sequence leads to a state where the pin appears to be in use\n(`mux_usecount == 1`) but has no owner (`mux_owner == NULL`), which can\ncause NULL pointer on next pin_request on the same pin.\n\nEnsure that updates to mux_usecount and mux_owner are performed\natomically under the same lock. Only clear mux_owner when mux_usecount\nreaches zero and no new owner has been assigned."}, {"lang": "es", "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: pinmux: correcci\u00f3n de la carrera que causaba que mux_owner fuera nulo con el commit 5a3e85c3c397 de mux_usecount activa (\"pinmux: Usar acceso secuencial para acceder a los datos de desc-&gt;pinmux\"). Se intent\u00f3 solucionar el problema cuando dos clientes del mismo GPIO llamaban a pinctrl_select_state() para la misma funcionalidad, lo que provocaba un problema de puntero nulo al acceder a desc-&gt;mux_owner. Sin embargo, el problema no se solucion\u00f3 por completo debido a la forma en que se gestion\u00f3 y a\u00fan puede resultar en el mismo puntero nulo. El problema se produce debido a la siguiente intercalaci\u00f3n: cpu0 (proceso A) cpu1 (proceso B) pin_request() { pin_free() { mutex_lock() desc-&gt;mux_usecount--; //se convierte en 0 .. mutex_unlock() mutex_lock(desc-&gt;mux) desc-&gt;mux_usecount++; // se convierte en 1 desc-&gt;mux_owner = owner; mutex_unlock(desc-&gt;mux) mutex_lock(desc-&gt;mux) desc-&gt;mux_owner = NULL; mutex_unlock(desc-&gt;mux) Esta secuencia lleva a un estado donde el pin parece estar en uso (`mux_usecount == 1`) pero no tiene propietario (`mux_owner == NULL`), lo que puede generar un puntero nulo en la siguiente solicitud de pin en el mismo pin. Aseg\u00farese de que las actualizaciones de mux_usecount y mux_owner se realicen autom\u00e1ticamente bajo el mismo bloqueo. Solo borre mux_owner cuando mux_usecount llegue a cero y no se haya asignado un nuevo propietario."}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/0b075c011032f88d1cfde3b45d6dcf08b44140eb", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/22b585cbd67d14df3b91529d1b990661c300faa9", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/9b2a3e7189028aa7c4d53a84364f2ea9fb209787", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/9ea3f6b9a67be3476e331ce51cac316c2614a564", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/b7bd6e3971eb7f0e34d2fdce1b18b08094e0c804", "name": "", "refsource": "", "tags": []}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}]}}, "impact": {}, "configurations": {"CVE_data_version": "4.0", "nodes": []}}