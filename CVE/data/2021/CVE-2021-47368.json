{"cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "4.0", "CVE_data_meta": {"ID": "CVE-2021-47368", "ASSIGNER": "cve@kernel.org"}, "problemtype": {"problemtype_data": [{"description": []}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/4c4c3052911b577920353a7646e4883d5da40c28", "name": "https://git.kernel.org/stable/c/4c4c3052911b577920353a7646e4883d5da40c28", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/4c4c3052911b577920353a7646e4883d5da40c28", "name": "https://git.kernel.org/stable/c/4c4c3052911b577920353a7646e4883d5da40c28", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/6c3f1b741c6c2914ea120e3a5790d3e900152f7b", "name": "https://git.kernel.org/stable/c/6c3f1b741c6c2914ea120e3a5790d3e900152f7b", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/6c3f1b741c6c2914ea120e3a5790d3e900152f7b", "name": "https://git.kernel.org/stable/c/6c3f1b741c6c2914ea120e3a5790d3e900152f7b", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/6f329d9da2a5ae032fcde800a99b118124ed5270", "name": "https://git.kernel.org/stable/c/6f329d9da2a5ae032fcde800a99b118124ed5270", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/6f329d9da2a5ae032fcde800a99b118124ed5270", "name": "https://git.kernel.org/stable/c/6f329d9da2a5ae032fcde800a99b118124ed5270", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/7237a494decfa17d0b9d0076e6cee3235719de90", "name": "https://git.kernel.org/stable/c/7237a494decfa17d0b9d0076e6cee3235719de90", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/7237a494decfa17d0b9d0076e6cee3235719de90", "name": "https://git.kernel.org/stable/c/7237a494decfa17d0b9d0076e6cee3235719de90", "refsource": "", "tags": []}]}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nenetc: Fix illegal access when reading affinity_hint\n\nirq_set_affinity_hit() stores a reference to the cpumask_t\nparameter in the irq descriptor, and that reference can be\naccessed later from irq_affinity_hint_proc_show(). Since\nthe cpu_mask parameter passed to irq_set_affinity_hit() has\nonly temporary storage (it's on the stack memory), later\naccesses to it are illegal. Thus reads from the corresponding\nprocfs affinity_hint file can result in paging request oops.\n\nThe issue is fixed by the get_cpu_mask() helper, which provides\na permanent storage for the cpumask_t parameter."}]}}, "configurations": {"CVE_data_version": "4.0", "nodes": []}, "impact": {}, "publishedDate": "2024-05-21T15:15Z", "lastModifiedDate": "2024-11-21T06:35Z"}