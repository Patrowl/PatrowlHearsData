{"publishedDate": "2024-05-21T15:15Z", "lastModifiedDate": "2025-04-02T14:54Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2021-47350", "ASSIGNER": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\npowerpc/mm: Fix lockup on kernel exec fault\n\nThe powerpc kernel is not prepared to handle exec faults from kernel.\nEspecially, the function is_exec_fault() will return 'false' when an\nexec fault is taken by kernel, because the check is based on reading\ncurrent->thread.regs->trap which contains the trap from user.\n\nFor instance, when provoking a LKDTM EXEC_USERSPACE test,\ncurrent->thread.regs->trap is set to SYSCALL trap (0xc00), and\nthe fault taken by the kernel is not seen as an exec fault by\nset_access_flags_filter().\n\nCommit d7df2443cd5f (\"powerpc/mm: Fix spurious segfaults on radix\nwith autonuma\") made it clear and handled it properly. But later on\ncommit d3ca587404b3 (\"powerpc/mm: Fix reporting of kernel execute\nfaults\") removed that handling, introducing test based on error_code.\nAnd here is the problem, because on the 603 all upper bits of SRR1\nget cleared when the TLB instruction miss handler bails out to ISI.\n\nUntil commit cbd7e6ca0210 (\"powerpc/fault: Avoid heavy\nsearch_exception_tables() verification\"), an exec fault from kernel\nat a userspace address was indirectly caught by the lack of entry for\nthat address in the exception tables. But after that commit the\nkernel mainly relies on KUAP or on core mm handling to catch wrong\nuser accesses. Here the access is not wrong, so mm handles it.\nIt is a minor fault because PAGE_EXEC is not set,\nset_access_flags_filter() should set PAGE_EXEC and voila.\nBut as is_exec_fault() returns false as explained in the beginning,\nset_access_flags_filter() bails out without setting PAGE_EXEC flag,\nwhich leads to a forever minor exec fault.\n\nAs the kernel is not prepared to handle such exec faults, the thing to\ndo is to fire in bad_kernel_fault() for any exec fault taken by the\nkernel, as it was prior to commit d3ca587404b3."}, {"lang": "es", "value": "En el kernel de Linux, se resolvi\u00f3 la siguiente vulnerabilidad: powerpc/mm: corrige el bloqueo en el fallo de ejecuci\u00f3n del kernel. El kernel de powerpc no est\u00e1 preparado para manejar fallos de ejecuci\u00f3n del kernel. Especialmente, la funci\u00f3n is_exec_fault() devolver\u00e1 'false' cuando el kernel tome un fallo de ejecuci\u00f3n, porque la verificaci\u00f3n se basa en la lectura de current-&gt;thread.regs-&gt;trap que contiene la trampa del usuario. Por ejemplo, al provocar una prueba LKDTM EXEC_USERSPACE, current-&gt;thread.regs-&gt;trap se establece en SYSCALL trap (0xc00), y set_access_flags_filter() no ve el error cometido por el kernel como un error de ejecuci\u00f3n. La confirmaci\u00f3n d7df2443cd5f (\"powerpc/mm: corregir errores de segmentaci\u00f3n falsos en radix con autonuma\") lo dej\u00f3 claro y lo manej\u00f3 correctamente. Pero m\u00e1s tarde, la confirmaci\u00f3n d3ca587404b3 (\"powerpc/mm: corregir informes de fallas de ejecuci\u00f3n del kernel\") elimin\u00f3 ese manejo, introduciendo una prueba basada en error_code. Y aqu\u00ed est\u00e1 el problema, porque en el 603 todos los bits superiores de SRR1 se borran cuando el controlador de errores de instrucci\u00f3n TLB sale a ISI. Hasta la confirmaci\u00f3n cbd7e6ca0210 (\"powerpc/fault: Evite la verificaci\u00f3n pesada de search_exception_tables()\"), un fallo de ejecuci\u00f3n del kernel en una direcci\u00f3n de espacio de usuario se detectaba indirectamente por la falta de entrada para esa direcci\u00f3n en las tablas de excepci\u00f3n. Pero despu\u00e9s de esa confirmaci\u00f3n, el kernel depende principalmente de KUAP o del manejo de mm del n\u00facleo para detectar accesos de usuarios incorrectos. Aqu\u00ed el acceso no es incorrecto, por lo que mm lo maneja. Es un fallo menor porque PAGE_EXEC no est\u00e1 configurada, set_access_flags_filter() deber\u00eda configurar PAGE_EXEC y listo. Pero como is_exec_fault() devuelve false como se explic\u00f3 al principio, set_access_flags_filter() sale sin configurar el indicador PAGE_EXEC, lo que conduce a un fallo de ejecuci\u00f3n menor para siempre. Como el kernel no est\u00e1 preparado para manejar tales fallos de ejecuci\u00f3n, lo que hay que hacer es activar bad_kernel_fault() para cualquier fallo de ejecuci\u00f3n tomado por el kernel, como estaba antes de la confirmaci\u00f3n d3ca587404b3."}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/500f81cec9f1bfa5210aa9dd5ba9a06e22f62a35", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://git.kernel.org/stable/c/8a96ec5ebf96ad8e2ba7b1b34103a0be5140fc70", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://git.kernel.org/stable/c/a82471a14aad90f79d1608d2bcbb019f0ffb53f0", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://git.kernel.org/stable/c/cd5d5e602f502895e47e18cd46804d6d7014e65c", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://git.kernel.org/stable/c/d2e52d4664097a6c1f591d869ec594bd7a0d4925", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://git.kernel.org/stable/c/500f81cec9f1bfa5210aa9dd5ba9a06e22f62a35", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://git.kernel.org/stable/c/8a96ec5ebf96ad8e2ba7b1b34103a0be5140fc70", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://git.kernel.org/stable/c/a82471a14aad90f79d1608d2bcbb019f0ffb53f0", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://git.kernel.org/stable/c/cd5d5e602f502895e47e18cd46804d6d7014e65c", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://git.kernel.org/stable/c/d2e52d4664097a6c1f591d869ec594bd7a0d4925", "name": "", "refsource": "", "tags": ["Patch"]}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "CWE-667"}]}]}}, "impact": {"baseMetricV3": {"exploitabilityScore": 1.8, "impactScore": 3.6, "cvssV3": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "baseScore": 5.5, "baseSeverity": "MEDIUM", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH"}}}, "configurations": {"CVE_data_version": "4.0", "nodes": [{"operator": "OR", "negate": false, "children": [], "cpe_match": [{"vulnerable": true, "cpe23Uri": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "matchCriteriaId": "23731E53-0BAA-404B-A050-F30AEAE1FCCF", "cpe_name": [], "versionStartIncluding": "4.14", "versionEndExcluding": "5.4.133"}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "matchCriteriaId": "93289127-DFB3-4515-89DD-50521FF8B7FF", "cpe_name": [], "versionStartIncluding": "5.5", "versionEndExcluding": "5.10.51"}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "matchCriteriaId": "79D13C82-E06F-4A70-A3D1-C09494FBC94D", "cpe_name": [], "versionStartIncluding": "5.11", "versionEndExcluding": "5.12.18"}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "matchCriteriaId": "853187F6-707A-487B-95C0-621B5211B43C", "cpe_name": [], "versionStartIncluding": "5.13", "versionEndExcluding": "5.13.3"}]}]}}