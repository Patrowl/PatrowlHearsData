{"publishedDate": "2021-05-17T18:15Z", "lastModifiedDate": "2024-11-21T06:07Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2021-32618", "ASSIGNER": "security-advisories@github.com"}, "description": {"description_data": [{"lang": "en", "value": "The Python \"Flask-Security-Too\" package is used for adding security features to your Flask application. It is an is an independently maintained version of Flask-Security based on the 3.0.0 version of Flask-Security. All versions of Flask-Security-Too allow redirects after many successful views (e.g. /login) by honoring the ?next query param. There is code in FS to validate that the url specified in the next parameter is either relative OR has the same netloc (network location) as the requesting URL. This check utilizes Pythons urlsplit library. However many browsers are very lenient on the kind of URL they accept and 'fill in the blanks' when presented with a possibly incomplete URL. As a concrete example - setting http://login?next=\\\\\\github.com will pass FS's relative URL check however many browsers will gladly convert this to http://github.com. Thus an attacker could send such a link to an unwitting user, using a legitimate site and have it redirect to whatever site they want. This is considered a low severity due to the fact that if Werkzeug is used (which is very common with Flask applications) as the WSGI layer, it by default ALWAYS ensures that the Location header is absolute - thus making this attack vector mute. It is possible for application writers to modify this default behavior by setting the 'autocorrect_location_header=False`."}, {"lang": "es", "value": "El paquete Python \"Flask-Security-Too\" es usado para a\u00f1adir caracter\u00edsticas de seguridad a su aplicaci\u00f3n Flask. Es una versi\u00f3n mantenida independientemente de Flask-Security basada en la versi\u00f3n 3.0.0 de Flask-Security. Todas las versiones de Flask-Security-Too permiten redirecciones despu\u00e9s de muchas visualizaciones con \u00e9xito (por ejemplo, /login) al honrar al par\u00e1metro de consulta ?next. Se presenta un c\u00f3digo en FS para comprobar que la url especificada en el siguiente par\u00e1metro next es relativa O presenta la misma netloc (ubicaci\u00f3n de red) que la URL pedida. Esta comprobaci\u00f3n usa la biblioteca Python urlsplit. Sin embargo, muchos navegadores son muy indulgentes con el tipo de URL que aceptan y \"fill in the blanks\" cuando se les presenta una URL posiblemente incompleta. Como ejemplo concreto - ajustando http://login?next=\\\\github.com pasar\u00e1 la comprobaci\u00f3n de URLs relativas de FS sin embargo muchos navegadores convertir\u00e1n gustosamente esto en http://github.com. Por lo tanto, un atacante podr\u00eda enviar dicho enlace a un usuario involuntario, usando un sitio leg\u00edtimo y hacer que se redirija a cualquier sitio que desee. Esto se considera de baja gravedad debido al hecho de que si es usado Werkzeug (que es muy com\u00fan con las aplicaciones Flask) como la capa WSGI, por defecto SIEMPRE asegura que la cabecera Location es absoluta - haciendo as\u00ed este vector de ataque mudo. Es posible para los escritores de aplicaciones modificar este comportamiento por defecto estableciendo el par\u00e1metro \"autocorrect_location_header=False\""}]}, "references": {"reference_data": [{"url": "https://github.com/Flask-Middleware/flask-security/issues/486", "name": "", "refsource": "", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/Flask-Middleware/flask-security/security/advisories/GHSA-6qmf-fj6m-686c", "name": "", "refsource": "", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/Flask-Middleware/flask-security/issues/486", "name": "", "refsource": "", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/Flask-Middleware/flask-security/security/advisories/GHSA-6qmf-fj6m-686c", "name": "", "refsource": "", "tags": ["Third Party Advisory"]}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "CWE-601"}]}]}}, "impact": {"baseMetricV2": {"cvssV2": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:N", "baseScore": 5.8, "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE"}, "exploitabilityScore": 8.6, "impactScore": 4.9, "severity": "MEDIUM", "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}, "baseMetricV3": {"exploitabilityScore": 2.8, "impactScore": 2.7, "cvssV3": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "baseScore": 6.1, "baseSeverity": "MEDIUM", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE"}}}, "configurations": {"CVE_data_version": "4.0", "nodes": [{"operator": "OR", "negate": false, "children": [], "cpe_match": [{"vulnerable": true, "cpe23Uri": "cpe:2.3:a:flask-security_project:flask-security:*:*:*:*:*:*:*:*", "matchCriteriaId": "A64C5EBD-CA0E-4C5C-A6DD-491E03BF261C", "cpe_name": []}]}]}}