{"cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "4.0", "CVE_data_meta": {"ID": "CVE-2021-47335", "ASSIGNER": "cve@kernel.org"}, "problemtype": {"problemtype_data": [{"description": []}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/79fa5d944c875711253a23b8155b36883c696409", "name": "https://git.kernel.org/stable/c/79fa5d944c875711253a23b8155b36883c696409", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/79fa5d944c875711253a23b8155b36883c696409", "name": "https://git.kernel.org/stable/c/79fa5d944c875711253a23b8155b36883c696409", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/86786603014e0a22d0d6af8e80ae4b8687927048", "name": "https://git.kernel.org/stable/c/86786603014e0a22d0d6af8e80ae4b8687927048", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/86786603014e0a22d0d6af8e80ae4b8687927048", "name": "https://git.kernel.org/stable/c/86786603014e0a22d0d6af8e80ae4b8687927048", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/cad83c968c2ebe97905f900326988ed37146c347", "name": "https://git.kernel.org/stable/c/cad83c968c2ebe97905f900326988ed37146c347", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/cad83c968c2ebe97905f900326988ed37146c347", "name": "https://git.kernel.org/stable/c/cad83c968c2ebe97905f900326988ed37146c347", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/e472b276a0d2180808009be38105e12754432e2a", "name": "https://git.kernel.org/stable/c/e472b276a0d2180808009be38105e12754432e2a", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/e472b276a0d2180808009be38105e12754432e2a", "name": "https://git.kernel.org/stable/c/e472b276a0d2180808009be38105e12754432e2a", "refsource": "", "tags": []}]}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nf2fs: fix to avoid racing on fsync_entry_slab by multi filesystem instances\n\nAs syzbot reported, there is an use-after-free issue during f2fs recovery:\n\nUse-after-free write at 0xffff88823bc16040 (in kfence-#10):\n kmem_cache_destroy+0x1f/0x120 mm/slab_common.c:486\n f2fs_recover_fsync_data+0x75b0/0x8380 fs/f2fs/recovery.c:869\n f2fs_fill_super+0x9393/0xa420 fs/f2fs/super.c:3945\n mount_bdev+0x26c/0x3a0 fs/super.c:1367\n legacy_get_tree+0xea/0x180 fs/fs_context.c:592\n vfs_get_tree+0x86/0x270 fs/super.c:1497\n do_new_mount fs/namespace.c:2905 [inline]\n path_mount+0x196f/0x2be0 fs/namespace.c:3235\n do_mount fs/namespace.c:3248 [inline]\n __do_sys_mount fs/namespace.c:3456 [inline]\n __se_sys_mount+0x2f9/0x3b0 fs/namespace.c:3433\n do_syscall_64+0x3f/0xb0 arch/x86/entry/common.c:47\n entry_SYSCALL_64_after_hwframe+0x44/0xae\n\nThe root cause is multi f2fs filesystem instances can race on accessing\nglobal fsync_entry_slab pointer, result in use-after-free issue of slab\ncache, fixes to init/destroy this slab cache only once during module\ninit/destroy procedure to avoid this issue."}]}}, "configurations": {"CVE_data_version": "4.0", "nodes": []}, "impact": {}, "publishedDate": "2024-05-21T15:15Z", "lastModifiedDate": "2024-11-21T06:35Z"}