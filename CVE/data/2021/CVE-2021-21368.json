{"publishedDate": "2021-03-12T17:15Z", "lastModifiedDate": "2024-11-21T05:48Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2021-21368", "ASSIGNER": "security-advisories@github.com"}, "description": {"description_data": [{"lang": "en", "value": "msgpack5 is a msgpack v5 implementation for node.js and the browser. In msgpack5 before versions 3.6.1, 4.5.1, and 5.2.1 there is a \"Prototype Poisoning\" vulnerability. When msgpack5 decodes a map containing a key \"__proto__\", it assigns the decoded value to __proto__. Object.prototype.__proto__ is an accessor property for the receiver's prototype. If the value corresponding to the key __proto__ decodes to an object or null, msgpack5 sets the decoded object's prototype to that value. An attacker who can submit crafted MessagePack data to a service can use this to produce values that appear to be of other types; may have unexpected prototype properties and methods (for example length, numeric properties, and push et al if __proto__'s value decodes to an Array); and/or may throw unexpected exceptions when used (for example if the __proto__ value decodes to a Map or Date). Other unexpected behavior might be produced for other types. There is no effect on the global prototype. This \"prototype poisoning\" is sort of a very limited inversion of a prototype pollution attack. Only the decoded value's prototype is affected, and it can only be set to msgpack5 values (though if the victim makes use of custom codecs, anything could be a msgpack5 value). We have not found a way to escalate this to true prototype pollution (absent other bugs in the consumer's code). This has been fixed in msgpack5 version 3.6.1, 4.5.1, and 5.2.1. See the referenced GitHub Security Advisory for an example and more details."}, {"lang": "es", "value": "msgpack5 es una implementaci\u00f3n de msgpack v5 para node.js y el navegador. En msgpack5 versiones anteriores a 3.6.1, 4.5.1 y 5.2.1, se presenta una vulnerabilidad de \"Prototype Poisoning\". Cuando msgpack5 decodifica un mapa que contiene una clave \"__proto__\", asigna el valor decodificado a __proto__. Object.prototype.__proto__ es una propiedad accesoria para el prototipo del receptor. Si el valor correspondiente a la clave __proto__ se decodifica para un objeto o null, msgpack5 establece el prototipo del objeto decodificado a ese valor. Un atacante que pueda enviar datos de MessagePack manipulados a un servicio puede usar esto para producir valores que parezcan ser de otros tipos; pueden tener propiedades y m\u00e9todos de prototipo inesperados (por ejemplo, longitud, propiedades num\u00e9ricas, y presione et al si el valor de __proto __ se decodifica en una matriz); y/o pueden lanzar excepciones inesperadas cuando se usan (por ejemplo, si el valor de __proto__ decodifica a un Map o Date). Pueden producirse otros comportamientos inesperados para otros tipos. No se presenta ning\u00fan efecto en el prototipo global. Este \"Prototype Poisoning\" es una especie de inversi\u00f3n muy limitada de un ataque de contaminaci\u00f3n de prototipo. S\u00f3lo afecta al prototipo del valor decodificado, y s\u00f3lo puede establecerse en valores msgpack5 (aunque si la v\u00edctima hace uso de c\u00f3decs personalizados, cualquier cosa podr\u00eda ser un valor msgpack5). No hemos encontrado una manera de escalar esto a una verdadera contaminaci\u00f3n del prototipo (en ausencia de otros errores en el c\u00f3digo del consumidor). Esto ha sido corregido en las versiones 3.6.1, 4.5.1 y 5.2.1 de msgpack5. Consulte el GitHub Security Advisory para visualizar un ejemplo y m\u00e1s detalles"}]}, "references": {"reference_data": [{"url": "https://github.com/mcollina/msgpack5/commit/d4e6cb956ae51c8bb2828e71c7c1107c340cf1e8", "name": "", "refsource": "", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/mcollina/msgpack5/releases/tag/v3.6.1", "name": "", "refsource": "", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/mcollina/msgpack5/releases/tag/v4.5.1", "name": "", "refsource": "", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/mcollina/msgpack5/releases/tag/v5.2.1", "name": "", "refsource": "", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/mcollina/msgpack5/security/advisories/GHSA-gmjw-49p4-pcfm", "name": "", "refsource": "", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://www.npmjs.com/package/msgpack5", "name": "", "refsource": "", "tags": ["Product", "Third Party Advisory"]}, {"url": "https://github.com/mcollina/msgpack5/commit/d4e6cb956ae51c8bb2828e71c7c1107c340cf1e8", "name": "", "refsource": "", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/mcollina/msgpack5/releases/tag/v3.6.1", "name": "", "refsource": "", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/mcollina/msgpack5/releases/tag/v4.5.1", "name": "", "refsource": "", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/mcollina/msgpack5/releases/tag/v5.2.1", "name": "", "refsource": "", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/mcollina/msgpack5/security/advisories/GHSA-gmjw-49p4-pcfm", "name": "", "refsource": "", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://www.npmjs.com/package/msgpack5", "name": "", "refsource": "", "tags": ["Product", "Third Party Advisory"]}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "CWE-915"}, {"lang": "en", "value": "CWE-1321"}]}]}}, "impact": {"baseMetricV2": {"cvssV2": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "baseScore": 6.5, "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL"}, "exploitabilityScore": 8.0, "impactScore": 6.4, "severity": "MEDIUM", "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}, "baseMetricV3": {"exploitabilityScore": 2.8, "impactScore": 5.9, "cvssV3": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "baseScore": 8.8, "baseSeverity": "HIGH", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH"}}}, "configurations": {"CVE_data_version": "4.0", "nodes": [{"operator": "OR", "negate": false, "children": [], "cpe_match": [{"vulnerable": true, "cpe23Uri": "cpe:2.3:a:msgpack5_project:msgpack5:*:*:*:*:*:node.js:*:*", "matchCriteriaId": "DECFA2B7-27F5-425C-A366-33BB7F1EFF47", "cpe_name": [], "versionEndExcluding": "3.6.1"}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:a:msgpack5_project:msgpack5:*:*:*:*:*:node.js:*:*", "matchCriteriaId": "F034EAD4-5A42-4ED4-B30F-138D6096372D", "cpe_name": [], "versionStartIncluding": "4.0.0", "versionEndExcluding": "4.5.1"}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:a:msgpack5_project:msgpack5:*:*:*:*:*:node.js:*:*", "matchCriteriaId": "72D94C9C-D8E5-4FB9-801C-49BF082ED6E0", "cpe_name": [], "versionStartIncluding": "5.0.0", "versionEndExcluding": "5.2.1"}]}]}}