{"publishedDate": "2021-06-07T21:15Z", "lastModifiedDate": "2024-11-21T06:01Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2021-29504", "ASSIGNER": "security-advisories@github.com"}, "description": {"description_data": [{"lang": "en", "value": "WP-CLI is the command-line interface for WordPress. An improper error handling in HTTPS requests management in WP-CLI version 0.12.0 and later allows remote attackers able to intercept the communication to remotely disable the certificate verification on WP-CLI side, gaining full control over the communication content, including the ability to impersonate update servers and push malicious updates towards WordPress instances controlled by the vulnerable WP-CLI agent, or push malicious updates toward WP-CLI itself. The vulnerability stems from the fact that the default behavior of `WP_CLI\\Utils\\http_request()` when encountering a TLS handshake error is to disable certificate validation and retry the same request. The default behavior has been changed with version 2.5.0 of WP-CLI and the `wp-cli/wp-cli` framework (via https://github.com/wp-cli/wp-cli/pull/5523) so that the `WP_CLI\\Utils\\http_request()` method accepts an `$insecure` option that is `false` by default and consequently that a TLS handshake failure is a hard error by default. This new default is a breaking change and ripples through to all consumers of `WP_CLI\\Utils\\http_request()`, including those in separate WP-CLI bundled or third-party packages. https://github.com/wp-cli/wp-cli/pull/5523 has also added an `--insecure` flag to the `cli update` command to counter this breaking change. There is no direct workaround for the default insecure behavior of `wp-cli/wp-cli` versions before 2.5.0. The workaround for dealing with the breaking change in the commands directly affected by the new secure default behavior is to add the `--insecure` flag to manually opt-in to the previous insecure behavior."}, {"lang": "es", "value": "WP-CLI es la interfaz de l\u00ednea de comandos para WordPress. Un manejo inapropiado de errores en la administraci\u00f3n de peticiones HTTPS en la versi\u00f3n 0.12.0 y posteriores de WP-CLI, permite a atacantes remotos capaces de interceptar la comunicaci\u00f3n desactivar remotamente la comprobaci\u00f3n del certificado en el lado de WP-CLI, obteniendo un control total sobre el contenido de la comunicaci\u00f3n, incluyendo la habilidad de hacerse pasar por servidores de actualizaci\u00f3n y empujar actualizaciones maliciosas hacia instancias de WordPress controladas por el agente vulnerable de WP-CLI, o empujar actualizaciones maliciosas hacia el propio WP-CLI. La vulnerabilidad proviene del hecho de que el comportamiento por defecto de la funci\u00f3n \"WP_CLI\\Utils\\http_request()\" cuando se encuentra un error de protocolo de enlace TLS es desactivar la comprobaci\u00f3n del certificado y volver a intentar la misma petici\u00f3n. El comportamiento por defecto ha sido cambiado con la versi\u00f3n 2.5.0 de WP-CLI y el framework \"wp-cli/wp-cli\" (por medio de https://github.com/wp-cli/wp-cli/pull/5523) para que el m\u00e9todo \"WP_CLI\\Utils\\http_request()\" acepte una opci\u00f3n \"$insecure\" que es \"false\" por defecto y en consecuentemente un fallo de protocolo de enlace TLS es un error duro por defecto. Este nuevo valor por defecto es un cambio de ruptura y se extiende a todos los consumidores de la funci\u00f3n \"WP_CLI\\Utils\\http_request()\", incluyendo aquellos en paquetes separados de WP-CLI o de terceros. https://github.com/wp-cli/wp-cli/pull/5523 tambi\u00e9n ha a\u00f1adido un flag \"--insecure\" al comando \"cli update\" para contrarrestar este cambio de ruptura. No hay una soluci\u00f3n directa para el comportamiento no seguro por defecto de las versiones anteriores a 2.5.0 de \"wp-cli/wp-cli\". La soluci\u00f3n para tratar el cambio de ruptura en los comandos directamente afectados por el nuevo comportamiento seguro por defecto es a\u00f1adir el flag \"--insecure\" para optar manualmente por el comportamiento no seguro anterior"}]}, "references": {"reference_data": [{"url": "https://github.com/wp-cli/checksum-command/pull/86", "name": "", "refsource": "", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/wp-cli/config-command/pull/128", "name": "", "refsource": "", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/wp-cli/core-command/pull/186", "name": "", "refsource": "", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/wp-cli/extension-command/pull/287", "name": "", "refsource": "", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/wp-cli/package-command/pull/138", "name": "", "refsource": "", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/wp-cli/wp-cli/pull/5523", "name": "", "refsource": "", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/wp-cli/wp-cli/security/advisories/GHSA-rwgm-f83r-v3qj", "name": "", "refsource": "", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/wp-cli/checksum-command/pull/86", "name": "", "refsource": "", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/wp-cli/config-command/pull/128", "name": "", "refsource": "", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/wp-cli/core-command/pull/186", "name": "", "refsource": "", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/wp-cli/extension-command/pull/287", "name": "", "refsource": "", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/wp-cli/package-command/pull/138", "name": "", "refsource": "", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/wp-cli/wp-cli/pull/5523", "name": "", "refsource": "", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/wp-cli/wp-cli/security/advisories/GHSA-rwgm-f83r-v3qj", "name": "", "refsource": "", "tags": ["Third Party Advisory"]}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "CWE-295"}]}]}}, "impact": {"baseMetricV2": {"cvssV2": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "baseScore": 7.5, "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL"}, "exploitabilityScore": 10.0, "impactScore": 6.4, "severity": "HIGH", "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}, "baseMetricV3": {"exploitabilityScore": 2.2, "impactScore": 5.2, "cvssV3": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N", "baseScore": 7.4, "baseSeverity": "HIGH", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE"}}}, "configurations": {"CVE_data_version": "4.0", "nodes": [{"operator": "OR", "negate": false, "children": [], "cpe_match": [{"vulnerable": true, "cpe23Uri": "cpe:2.3:a:wp-cli:wp-cli:*:*:*:*:*:*:*:*", "matchCriteriaId": "7905C5F9-7215-431B-87D0-B302B66363D9", "cpe_name": [], "versionStartIncluding": "0.12.0", "versionEndExcluding": "2.5.0"}]}]}}