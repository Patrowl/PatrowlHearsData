{"publishedDate": "2024-05-21T15:15Z", "lastModifiedDate": "2025-04-02T14:53Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2021-47369", "ASSIGNER": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\ns390/qeth: fix NULL deref in qeth_clear_working_pool_list()\n\nWhen qeth_set_online() calls qeth_clear_working_pool_list() to roll\nback after an error exit from qeth_hardsetup_card(), we are at risk of\naccessing card->qdio.in_q before it was allocated by\nqeth_alloc_qdio_queues() via qeth_mpc_initialize().\n\nqeth_clear_working_pool_list() then dereferences NULL, and by writing to\nqueue->bufs[i].pool_entry scribbles all over the CPU's lowcore.\nResulting in a crash when those lowcore areas are used next (eg. on\nthe next machine-check interrupt).\n\nSuch a scenario would typically happen when the device is first set\nonline and its queues aren't allocated yet. An early IO error or certain\nmisconfigs (eg. mismatched transport mode, bad portno) then cause us to\nerror out from qeth_hardsetup_card() with card->qdio.in_q still being\nNULL.\n\nFix it by checking the pointer for NULL before accessing it.\n\nNote that we also have (rare) paths inside qeth_mpc_initialize() where\na configuration change can cause us to free the existing queues,\nexpecting that subsequent code will allocate them again. If we then\nerror out before that re-allocation happens, the same bug occurs.\n\nRoot-caused-by: Heiko Carstens <hca@linux.ibm.com>"}, {"lang": "es", "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: s390/qeth: corrige NULL deref en qeth_clear_working_pool_list(). Cuando qeth_set_online() llama a qeth_clear_working_pool_list() para retroceder despu\u00e9s de una salida de error de qeth_hardsetup_card(), corremos el riesgo de acceder a la tarjeta -&gt;qdio.in_q antes de que qeth_alloc_qdio_queues() lo asignara mediante qeth_mpc_initialize(). qeth_clear_working_pool_list() luego elimina la referencia a NULL y, al escribir en queue-&gt;bufs[i].pool_entry garabatea por todo el n\u00facleo bajo de la CPU. Lo que resulta en un bloqueo cuando esas \u00e1reas de n\u00facleo bajo se usan a continuaci\u00f3n (por ejemplo, en la siguiente interrupci\u00f3n de verificaci\u00f3n de la m\u00e1quina). Este escenario suele ocurrir cuando el dispositivo se configura en l\u00ednea por primera vez y sus colas a\u00fan no est\u00e1n asignadas. Un error de IO temprano o ciertas configuraciones err\u00f3neas (por ejemplo, modo de transporte no coincidente, n\u00famero de puerto incorrecto) hacen que salgamos del error qeth_hardsetup_card() con card-&gt;qdio.in_q todav\u00eda siendo NULL. Solucionarlo comprobando que el puntero sea NULL antes de acceder a \u00e9l. Tenga en cuenta que tambi\u00e9n tenemos rutas (raras) dentro de qeth_mpc_initialize() donde un cambio de configuraci\u00f3n puede hacer que liberemos las colas existentes, esperando que el c\u00f3digo posterior las asigne nuevamente. Si luego cometemos un error antes de que ocurra la reasignaci\u00f3n, ocurre el mismo error. Analizado por: Heiko Carstens "}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/248f064af222a1f97ee02c84a98013dfbccad386", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://git.kernel.org/stable/c/9b00fb12cdc9d8d1c3ffe82a78e74738127803fc", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://git.kernel.org/stable/c/db94f89e1dadf693c15c2d60de0c34777cea5779", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://git.kernel.org/stable/c/248f064af222a1f97ee02c84a98013dfbccad386", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://git.kernel.org/stable/c/9b00fb12cdc9d8d1c3ffe82a78e74738127803fc", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://git.kernel.org/stable/c/db94f89e1dadf693c15c2d60de0c34777cea5779", "name": "", "refsource": "", "tags": ["Patch"]}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "CWE-476"}]}]}}, "impact": {"baseMetricV3": {"exploitabilityScore": 1.8, "impactScore": 3.6, "cvssV3": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "baseScore": 5.5, "baseSeverity": "MEDIUM", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH"}}}, "configurations": {"CVE_data_version": "4.0", "nodes": [{"operator": "OR", "negate": false, "children": [], "cpe_match": [{"vulnerable": true, "cpe23Uri": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "matchCriteriaId": "ED553EDD-0029-44FB-ABF4-87D601D3D1AD", "cpe_name": [], "versionStartIncluding": "5.7.16", "versionEndExcluding": "5.8"}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "matchCriteriaId": "8C9C8B75-A2D4-42A2-9745-D88E48FC07F3", "cpe_name": [], "versionStartIncluding": "5.8.2", "versionEndExcluding": "5.10.70"}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "matchCriteriaId": "1B31D6C1-A751-438D-906B-0C56B789D498", "cpe_name": [], "versionStartIncluding": "5.11", "versionEndExcluding": "5.14.9"}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:o:linux:linux_kernel:5.15:rc1:*:*:*:*:*:*", "matchCriteriaId": "E46C74C6-B76B-4C94-A6A4-FD2FFF62D644", "cpe_name": []}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:o:linux:linux_kernel:5.15:rc2:*:*:*:*:*:*", "matchCriteriaId": "60134C3A-06E4-48C1-B04F-2903732A4E56", "cpe_name": []}]}]}}