{"publishedDate": "2022-09-14T18:15Z", "lastModifiedDate": "2024-11-21T07:12Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2022-36113", "ASSIGNER": "security-advisories@github.com"}, "description": {"description_data": [{"lang": "en", "value": "Cargo is a package manager for the rust programming language. After a package is downloaded, Cargo extracts its source code in the ~/.cargo folder on disk, making it available to the Rust projects it builds. To record when an extraction is successful, Cargo writes \"ok\" to the .cargo-ok file at the root of the extracted source code once it extracted all the files. It was discovered that Cargo allowed packages to contain a .cargo-ok symbolic link, which Cargo would extract. Then, when Cargo attempted to write \"ok\" into .cargo-ok, it would actually replace the first two bytes of the file the symlink pointed to with ok. This would allow an attacker to corrupt one file on the machine using Cargo to extract the package. Note that by design Cargo allows code execution at build time, due to build scripts and procedural macros. The vulnerabilities in this advisory allow performing a subset of the possible damage in a harder to track down way. Your dependencies must still be trusted if you want to be protected from attacks, as it's possible to perform the same attacks with build scripts and procedural macros. The vulnerability is present in all versions of Cargo. Rust 1.64, to be released on September 22nd, will include a fix for it. Since the vulnerability is just a more limited way to accomplish what a malicious build scripts or procedural macros can do, we decided not to publish Rust point releases backporting the security fix. Patch files are available for Rust 1.63.0 are available in the wg-security-response repository for people building their own toolchain.\nMitigations We recommend users of alternate registries to exercise care in which package they download, by only including trusted dependencies in their projects. Please note that even with these vulnerabilities fixed, by design Cargo allows arbitrary code execution at build time thanks to build scripts and procedural macros: a malicious dependency will be able to cause damage regardless of these vulnerabilities. crates.io implemented server-side checks to reject these kinds of packages years ago, and there are no packages on crates.io exploiting these vulnerabilities. crates.io users still need to exercise care in choosing their dependencies though, as remote code execution is allowed by design there as well."}, {"lang": "es", "value": "Cargo es un administrador de paquetes para el lenguaje de programaci\u00f3n rust. Despu\u00e9s de descargar un paquete, Cargo extrae su c\u00f3digo fuente en la carpeta ~/.cargo del disco, poni\u00e9ndolo a disposici\u00f3n de los proyectos Rust que construye. Para registrar cuando una extracci\u00f3n es exitosa, Cargo escribe \"ok\" en el archivo .cargo-ok en el root del c\u00f3digo fuente extra\u00eddo una vez que extrajo todos los archivos. Se ha detectado que Cargo permit\u00eda que los paquetes contuvieran un enlace simb\u00f3lico .cargo-ok, que Cargo extra\u00eda. Entonces, cuando Cargo intentaba escribir \"ok\" en .cargo-ok, en realidad sustitu\u00eda los dos primeros bytes del archivo al que apuntaba el enlace simb\u00f3lico por ok. Esto permitir\u00eda a un atacante corromper un archivo en la m\u00e1quina que usa Cargo para extraer el paquete. Tenga en cuenta que, por dise\u00f1o, Cargo permite una ejecuci\u00f3n de c\u00f3digo en tiempo de compilaci\u00f3n, debido a los scripts de compilaci\u00f3n y las macros de procedimiento. Las vulnerabilidades de este aviso permiten llevar a cabo un subconjunto de los posibles da\u00f1os de una forma m\u00e1s dif\u00edcil de rastrear. Tus dependencias deben seguir siendo confiables si quieres estar protegido de los ataques, ya que es posible llevar a cabo los mismos ataques con scripts de construcci\u00f3n y macros de procedimiento. La vulnerabilidad est\u00e1 presente en todas las versiones de Cargo. Rust versi\u00f3n 1.64, ser\u00e1 publicada el 22 de septiembre, incluir\u00e1 una correcci\u00f3n para la misma. Dado que la vulnerabilidad es s\u00f3lo una forma m\u00e1s limitada de lograr lo que pueden hacer los scripts de construcci\u00f3n o las macros de procedimiento maliciosos, hemos decidido no publicar versiones puntuales de Rust que incluyan la correcci\u00f3n de seguridad. Los archivos de parche est\u00e1n disponibles para Rust versi\u00f3n 1.63.0 en el repositorio wg-security-response para las personas que construyen su propia cadena de herramientas. Mitigaci\u00f3n Recomendamos a usuarios de registros alternativos que tengan cuidado con el paquete que descargan, incluyendo s\u00f3lo dependencias confiables en sus proyectos. Tenga en cuenta que incluso con estas vulnerabilidades corregidas, Cargo permite por dise\u00f1o la ejecuci\u00f3n de c\u00f3digo arbitrario en tiempo de compilaci\u00f3n gracias a los scripts de compilaci\u00f3n y a las macros de procedimiento: una dependencia maliciosa podr\u00e1 causar da\u00f1os independientemente de estas vulnerabilidades. crates.io implement\u00f3 comprobaciones del lado del servidor para rechazar este tipo de paquetes hace a\u00f1os, y no se presentan paquetes en crates.io que exploten estas vulnerabilidades"}]}, "references": {"reference_data": [{"url": "https://github.com/rust-lang/cargo/commit/97b80919e404b0768ea31ae329c3b4da54bed05a", "name": "", "refsource": "", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/rust-lang/cargo/security/advisories/GHSA-rfj2-q3h3-hm5j", "name": "", "refsource": "", "tags": ["Mitigation", "Third Party Advisory"]}, {"url": "https://github.com/rust-lang/cargo/commit/97b80919e404b0768ea31ae329c3b4da54bed05a", "name": "", "refsource": "", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/rust-lang/cargo/security/advisories/GHSA-rfj2-q3h3-hm5j", "name": "", "refsource": "", "tags": ["Mitigation", "Third Party Advisory"]}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "CWE-22"}, {"lang": "en", "value": "CWE-59"}]}]}}, "impact": {"baseMetricV3": {"exploitabilityScore": 2.8, "impactScore": 5.2, "cvssV3": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:H", "baseScore": 8.1, "baseSeverity": "HIGH", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "HIGH"}}}, "configurations": {"CVE_data_version": "4.0", "nodes": [{"operator": "OR", "negate": false, "children": [], "cpe_match": [{"vulnerable": true, "cpe23Uri": "cpe:2.3:a:rust-lang:cargo:*:*:*:*:*:rust:*:*", "matchCriteriaId": "28D07B7F-9076-4BCD-8CBE-4CD7E1E996AB", "cpe_name": [], "versionEndExcluding": "0.65.0"}]}]}}