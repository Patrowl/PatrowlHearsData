{"cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "4.0", "CVE_data_meta": {"ID": "CVE-2022-48760", "ASSIGNER": "cve@kernel.org"}, "problemtype": {"problemtype_data": [{"description": []}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/26fbe9772b8c459687930511444ce443011f86bf", "name": "https://git.kernel.org/stable/c/26fbe9772b8c459687930511444ce443011f86bf", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/26fbe9772b8c459687930511444ce443011f86bf", "name": "https://git.kernel.org/stable/c/26fbe9772b8c459687930511444ce443011f86bf", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/546ba238535d925254e0b3f12012a5c55801e2f3", "name": "https://git.kernel.org/stable/c/546ba238535d925254e0b3f12012a5c55801e2f3", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/546ba238535d925254e0b3f12012a5c55801e2f3", "name": "https://git.kernel.org/stable/c/546ba238535d925254e0b3f12012a5c55801e2f3", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/5904dfd3ddaff3bf4a41c3baf0a8e8f31ed4599b", "name": "https://git.kernel.org/stable/c/5904dfd3ddaff3bf4a41c3baf0a8e8f31ed4599b", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/5904dfd3ddaff3bf4a41c3baf0a8e8f31ed4599b", "name": "https://git.kernel.org/stable/c/5904dfd3ddaff3bf4a41c3baf0a8e8f31ed4599b", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/5f138ef224dffd15d5e5c5b095859719e0038427", "name": "https://git.kernel.org/stable/c/5f138ef224dffd15d5e5c5b095859719e0038427", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/5f138ef224dffd15d5e5c5b095859719e0038427", "name": "https://git.kernel.org/stable/c/5f138ef224dffd15d5e5c5b095859719e0038427", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/9340226388c66a7e090ebb00e91ed64a753b6c26", "name": "https://git.kernel.org/stable/c/9340226388c66a7e090ebb00e91ed64a753b6c26", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/9340226388c66a7e090ebb00e91ed64a753b6c26", "name": "https://git.kernel.org/stable/c/9340226388c66a7e090ebb00e91ed64a753b6c26", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/9c61fce322ac2ef7fecf025285353570d60e41d6", "name": "https://git.kernel.org/stable/c/9c61fce322ac2ef7fecf025285353570d60e41d6", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/9c61fce322ac2ef7fecf025285353570d60e41d6", "name": "https://git.kernel.org/stable/c/9c61fce322ac2ef7fecf025285353570d60e41d6", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/b50f5ca60475710bbc9a3af32fbfc17b1e69c2f0", "name": "https://git.kernel.org/stable/c/b50f5ca60475710bbc9a3af32fbfc17b1e69c2f0", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/b50f5ca60475710bbc9a3af32fbfc17b1e69c2f0", "name": "https://git.kernel.org/stable/c/b50f5ca60475710bbc9a3af32fbfc17b1e69c2f0", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/c9a18f7c5b071dce5e6939568829d40994866ab0", "name": "https://git.kernel.org/stable/c/c9a18f7c5b071dce5e6939568829d40994866ab0", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/c9a18f7c5b071dce5e6939568829d40994866ab0", "name": "https://git.kernel.org/stable/c/c9a18f7c5b071dce5e6939568829d40994866ab0", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/e3b131e30e612ff0e32de6c1cb4f69f89db29193", "name": "https://git.kernel.org/stable/c/e3b131e30e612ff0e32de6c1cb4f69f89db29193", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/e3b131e30e612ff0e32de6c1cb4f69f89db29193", "name": "https://git.kernel.org/stable/c/e3b131e30e612ff0e32de6c1cb4f69f89db29193", "refsource": "", "tags": []}]}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nUSB: core: Fix hang in usb_kill_urb by adding memory barriers\n\nThe syzbot fuzzer has identified a bug in which processes hang waiting\nfor usb_kill_urb() to return.  It turns out the issue is not unlinking\nthe URB; that works just fine.  Rather, the problem arises when the\nwakeup notification that the URB has completed is not received.\n\nThe reason is memory-access ordering on SMP systems.  In outline form,\nusb_kill_urb() and __usb_hcd_giveback_urb() operating concurrently on\ndifferent CPUs perform the following actions:\n\nCPU 0\t\t\t\t\tCPU 1\n----------------------------\t\t---------------------------------\nusb_kill_urb():\t\t\t\t__usb_hcd_giveback_urb():\n  ...\t\t\t\t\t  ...\n  atomic_inc(&urb->reject);\t\t  atomic_dec(&urb->use_count);\n  ...\t\t\t\t\t  ...\n  wait_event(usb_kill_urb_queue,\n\tatomic_read(&urb->use_count) == 0);\n\t\t\t\t\t  if (atomic_read(&urb->reject))\n\t\t\t\t\t\twake_up(&usb_kill_urb_queue);\n\nConfining your attention to urb->reject and urb->use_count, you can\nsee that the overall pattern of accesses on CPU 0 is:\n\n\twrite urb->reject, then read urb->use_count;\n\nwhereas the overall pattern of accesses on CPU 1 is:\n\n\twrite urb->use_count, then read urb->reject.\n\nThis pattern is referred to in memory-model circles as SB (for \"Store\nBuffering\"), and it is well known that without suitable enforcement of\nthe desired order of accesses -- in the form of memory barriers -- it\nis entirely possible for one or both CPUs to execute their reads ahead\nof their writes.  The end result will be that sometimes CPU 0 sees the\nold un-decremented value of urb->use_count while CPU 1 sees the old\nun-incremented value of urb->reject.  Consequently CPU 0 ends up on\nthe wait queue and never gets woken up, leading to the observed hang\nin usb_kill_urb().\n\nThe same pattern of accesses occurs in usb_poison_urb() and the\nfailure pathway of usb_hcd_submit_urb().\n\nThe problem is fixed by adding suitable memory barriers.  To provide\nproper memory-access ordering in the SB pattern, a full barrier is\nrequired on both CPUs.  The atomic_inc() and atomic_dec() accesses\nthemselves don't provide any memory ordering, but since they are\npresent, we can use the optimized smp_mb__after_atomic() memory\nbarrier in the various routines to obtain the desired effect.\n\nThis patch adds the necessary memory barriers."}]}}, "configurations": {"CVE_data_version": "4.0", "nodes": []}, "impact": {}, "publishedDate": "2024-06-20T12:15Z", "lastModifiedDate": "2024-11-21T07:33Z"}