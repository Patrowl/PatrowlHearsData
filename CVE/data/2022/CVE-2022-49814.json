{"publishedDate": "2025-05-01T15:16Z", "lastModifiedDate": "2025-05-02T13:53Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2022-49814", "ASSIGNER": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nkcm: close race conditions on sk_receive_queue\n\nsk->sk_receive_queue is protected by skb queue lock, but for KCM\nsockets its RX path takes mux->rx_lock to protect more than just\nskb queue. However, kcm_recvmsg() still only grabs the skb queue\nlock, so race conditions still exist.\n\nWe can teach kcm_recvmsg() to grab mux->rx_lock too but this would\nintroduce a potential performance regression as struct kcm_mux can\nbe shared by multiple KCM sockets.\n\nSo we have to enforce skb queue lock in requeue_rx_msgs() and handle\nskb peek case carefully in kcm_wait_data(). Fortunately,\nskb_recv_datagram() already handles it nicely and is widely used by\nother sockets, we can just switch to skb_recv_datagram() after\ngetting rid of the unnecessary sock lock in kcm_recvmsg() and\nkcm_splice_read(). Side note: SOCK_DONE is not used by KCM sockets,\nso it is safe to get rid of this check too.\n\nI ran the original syzbot reproducer for 30 min without seeing any\nissue."}, {"lang": "es", "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: kcm: condiciones de ejecuci\u00f3n cerradas en sk_receive_queue. sk-&gt;sk_receive_queue est\u00e1 protegido por el bloqueo de cola skb, pero para los sockets KCM su ruta RX toma mux-&gt;rx_lock para proteger m\u00e1s que solo la cola skb. Sin embargo, kcm_recvmsg() todav\u00eda solo captura el bloqueo de cola skb, por lo que las condiciones de ejecuci\u00f3n a\u00fan existen. Podemos ense\u00f1ar a kcm_recvmsg() a capturar tambi\u00e9n mux-&gt;rx_lock, pero esto introducir\u00eda una posible regresi\u00f3n del rendimiento, ya que la estructura kcm_mux puede ser compartida por varios sockets KCM. Por lo tanto, debemos aplicar el bloqueo de cola skb en requeue_rx_msgs() y manejar el caso de skb peek con cuidado en kcm_wait_data(). Afortunadamente, skb_recv_datagram() ya lo gestiona correctamente y es ampliamente utilizado por otros sockets. Podemos cambiar a skb_recv_datagram() tras eliminar el bloqueo de sock innecesario en kcm_recvmsg() y kcm_splice_read(). Nota: Los sockets KCM no utilizan SOCK_DONE, por lo que tambi\u00e9n es seguro omitir esta comprobaci\u00f3n. Ejecut\u00e9 el reproductor syzbot original durante 30 minutos sin observar ning\u00fan problema."}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/22f6b5d47396b4287662668ee3f5c1f766cb4259", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/4154b6afa2bd639214ff259d912faad984f7413a", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/5121197ecc5db58c07da95eb1ff82b98b121a221", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/bf92e54597d842da127c59833b365d6faeeaf020", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/ce57d6474ae999a3b2d442314087473a646a65c7", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/d9ad4de92e184b19bcae4da10dac0275abf83931", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/f7b0e95071bb4be4b811af3f0bfc3e200eedeaa3", "name": "", "refsource": "", "tags": []}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}]}}, "impact": {}, "configurations": {"CVE_data_version": "4.0", "nodes": []}}