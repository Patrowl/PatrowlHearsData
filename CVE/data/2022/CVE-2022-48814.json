{"cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "4.0", "CVE_data_meta": {"ID": "CVE-2022-48814", "ASSIGNER": "cve@kernel.org"}, "problemtype": {"problemtype_data": [{"description": []}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/0e816362d823cd46c666e64d8bffe329ee22f4cc", "name": "https://git.kernel.org/stable/c/0e816362d823cd46c666e64d8bffe329ee22f4cc", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/0e816362d823cd46c666e64d8bffe329ee22f4cc", "name": "https://git.kernel.org/stable/c/0e816362d823cd46c666e64d8bffe329ee22f4cc", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/1d13e7221035947c62800c9d3d99b4ed570e27e7", "name": "https://git.kernel.org/stable/c/1d13e7221035947c62800c9d3d99b4ed570e27e7", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/1d13e7221035947c62800c9d3d99b4ed570e27e7", "name": "https://git.kernel.org/stable/c/1d13e7221035947c62800c9d3d99b4ed570e27e7", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/bd488afc3b39e045ba71aab472233f2a78726e7b", "name": "https://git.kernel.org/stable/c/bd488afc3b39e045ba71aab472233f2a78726e7b", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/bd488afc3b39e045ba71aab472233f2a78726e7b", "name": "https://git.kernel.org/stable/c/bd488afc3b39e045ba71aab472233f2a78726e7b", "refsource": "", "tags": []}]}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nnet: dsa: seville: register the mdiobus under devres\n\nAs explained in commits:\n74b6d7d13307 (\"net: dsa: realtek: register the MDIO bus under devres\")\n5135e96a3dd2 (\"net: dsa: don't allocate the slave_mii_bus using devres\")\n\nmdiobus_free() will panic when called from devm_mdiobus_free() <-\ndevres_release_all() <- __device_release_driver(), and that mdiobus was\nnot previously unregistered.\n\nThe Seville VSC9959 switch is a platform device, so the initial set of\nconstraints that I thought would cause this (I2C or SPI buses which call\n->remove on ->shutdown) do not apply. But there is one more which\napplies here.\n\nIf the DSA master itself is on a bus that calls ->remove from ->shutdown\n(like dpaa2-eth, which is on the fsl-mc bus), there is a device link\nbetween the switch and the DSA master, and device_links_unbind_consumers()\nwill unbind the seville switch driver on shutdown.\n\nSo the same treatment must be applied to all DSA switch drivers, which\nis: either use devres for both the mdiobus allocation and registration,\nor don't use devres at all.\n\nThe seville driver has a code structure that could accommodate both the\nmdiobus_unregister and mdiobus_free calls, but it has an external\ndependency upon mscc_miim_setup() from mdio-mscc-miim.c, which calls\ndevm_mdiobus_alloc_size() on its behalf. So rather than restructuring\nthat, and exporting yet one more symbol mscc_miim_teardown(), let's work\nwith devres and replace of_mdiobus_register with the devres variant.\nWhen we use all-devres, we can ensure that devres doesn't free a\nstill-registered bus (it either runs both callbacks, or none)."}]}}, "configurations": {"CVE_data_version": "4.0", "nodes": []}, "impact": {}, "publishedDate": "2024-07-16T12:15Z", "lastModifiedDate": "2024-11-21T07:34Z"}