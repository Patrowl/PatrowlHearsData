{"cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "4.0", "CVE_data_meta": {"ID": "CVE-2022-48786", "ASSIGNER": "cve@kernel.org"}, "problemtype": {"problemtype_data": [{"description": []}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/0bb88f3f7e8d506f3efe46d694964117e20efbfc", "name": "https://git.kernel.org/stable/c/0bb88f3f7e8d506f3efe46d694964117e20efbfc", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/0bb88f3f7e8d506f3efe46d694964117e20efbfc", "name": "https://git.kernel.org/stable/c/0bb88f3f7e8d506f3efe46d694964117e20efbfc", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/2910bcb9f67551a45397735e47b6d456eb8cd549", "name": "https://git.kernel.org/stable/c/2910bcb9f67551a45397735e47b6d456eb8cd549", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/2910bcb9f67551a45397735e47b6d456eb8cd549", "name": "https://git.kernel.org/stable/c/2910bcb9f67551a45397735e47b6d456eb8cd549", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/5f326fe2aef411a6575628f92bd861463ea91df7", "name": "https://git.kernel.org/stable/c/5f326fe2aef411a6575628f92bd861463ea91df7", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/5f326fe2aef411a6575628f92bd861463ea91df7", "name": "https://git.kernel.org/stable/c/5f326fe2aef411a6575628f92bd861463ea91df7", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/787468ee7a435777521d33399d012fd591ae2f94", "name": "https://git.kernel.org/stable/c/787468ee7a435777521d33399d012fd591ae2f94", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/787468ee7a435777521d33399d012fd591ae2f94", "name": "https://git.kernel.org/stable/c/787468ee7a435777521d33399d012fd591ae2f94", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/87cd1bbd6677411e17369cd4b7389ab1e1fdba44", "name": "https://git.kernel.org/stable/c/87cd1bbd6677411e17369cd4b7389ab1e1fdba44", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/87cd1bbd6677411e17369cd4b7389ab1e1fdba44", "name": "https://git.kernel.org/stable/c/87cd1bbd6677411e17369cd4b7389ab1e1fdba44", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/addd62a8cb6fa90aa322365c62487da61f6baab8", "name": "https://git.kernel.org/stable/c/addd62a8cb6fa90aa322365c62487da61f6baab8", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/addd62a8cb6fa90aa322365c62487da61f6baab8", "name": "https://git.kernel.org/stable/c/addd62a8cb6fa90aa322365c62487da61f6baab8", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/b9208492fcaecff8f43915529ae34b3bcb03877c", "name": "https://git.kernel.org/stable/c/b9208492fcaecff8f43915529ae34b3bcb03877c", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/b9208492fcaecff8f43915529ae34b3bcb03877c", "name": "https://git.kernel.org/stable/c/b9208492fcaecff8f43915529ae34b3bcb03877c", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/e3b3939fd137aab6d00d54bee0ee9244b286a608", "name": "https://git.kernel.org/stable/c/e3b3939fd137aab6d00d54bee0ee9244b286a608", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/e3b3939fd137aab6d00d54bee0ee9244b286a608", "name": "https://git.kernel.org/stable/c/e3b3939fd137aab6d00d54bee0ee9244b286a608", "refsource": "", "tags": []}]}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nvsock: remove vsock from connected table when connect is interrupted by a signal\n\nvsock_connect() expects that the socket could already be in the\nTCP_ESTABLISHED state when the connecting task wakes up with a signal\npending. If this happens the socket will be in the connected table, and\nit is not removed when the socket state is reset. In this situation it's\ncommon for the process to retry connect(), and if the connection is\nsuccessful the socket will be added to the connected table a second\ntime, corrupting the list.\n\nPrevent this by calling vsock_remove_connected() if a signal is received\nwhile waiting for a connection. This is harmless if the socket is not in\nthe connected table, and if it is in the table then removing it will\nprevent list corruption from a double add.\n\nNote for backporting: this patch requires d5afa82c977e (\"vsock: correct\nremoval of socket from the list\"), which is in all current stable trees\nexcept 4.9.y."}]}}, "configurations": {"CVE_data_version": "4.0", "nodes": []}, "impact": {}, "publishedDate": "2024-07-16T12:15Z", "lastModifiedDate": "2024-11-21T07:34Z"}