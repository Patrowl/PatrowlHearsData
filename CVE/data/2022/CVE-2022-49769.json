{"publishedDate": "2025-05-01T15:15Z", "lastModifiedDate": "2025-05-02T13:53Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2022-49769", "ASSIGNER": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\ngfs2: Check sb_bsize_shift after reading superblock\n\nFuzzers like to scribble over sb_bsize_shift but in reality it's very\nunlikely that this field would be corrupted on its own. Nevertheless it\nshould be checked to avoid the possibility of messy mount errors due to\nbad calculations. It's always a fixed value based on the block size so\nwe can just check that it's the expected value.\n\nTested with:\n\n    mkfs.gfs2 -O -p lock_nolock /dev/vdb\n    for i in 0 -1 64 65 32 33; do\n        gfs2_edit -p sb field sb_bsize_shift $i /dev/vdb\n        mount /dev/vdb /mnt/test && umount /mnt/test\n    done\n\nBefore this patch we get a withdraw after\n\n[   76.413681] gfs2: fsid=loop0.0: fatal: invalid metadata block\n[   76.413681]   bh = 19 (type: exp=5, found=4)\n[   76.413681]   function = gfs2_meta_buffer, file = fs/gfs2/meta_io.c, line = 492\n\nand with UBSAN configured we also get complaints like\n\n[   76.373395] UBSAN: shift-out-of-bounds in fs/gfs2/ops_fstype.c:295:19\n[   76.373815] shift exponent 4294967287 is too large for 64-bit type 'long unsigned int'\n\nAfter the patch, these complaints don't appear, mount fails immediately\nand we get an explanation in dmesg."}, {"lang": "es", "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: gfs2: Comprobaci\u00f3n de sb_bsize_shift tras leer el superbloque. A los fuzzers les gusta manipular sb_bsize_shift, pero en realidad es muy improbable que este campo se corrompa por s\u00ed solo. Sin embargo, conviene comprobarlo para evitar errores de montaje problem\u00e1ticos debido a c\u00e1lculos err\u00f3neos. Siempre es un valor fijo basado en el tama\u00f1o del bloque, por lo que podemos comprobar que sea el valor esperado. Probado con: mkfs.gfs2 -O -p lock_nolock /dev/vdb for i in 0 -1 64 65 32 33; Antes de este parche obtenemos una retirada despu\u00e9s de [ 76.413681] gfs2: fsid=loop0.0: fatal: bloque de metadatos no v\u00e1lido [ 76.413681] bh = 19 (tipo: exp=5, encontrado=4) [ 76.413681] funci\u00f3n = gfs2_meta_buffer, archivo = fs/gfs2/meta_io.c, l\u00ednea = 492 y con UBSAN configurado tambi\u00e9n obtenemos quejas como [ 76.373395] UBSAN: cambio fuera de los l\u00edmites en fs/gfs2/ops_fstype.c:295:19 [ 76.373815] cambio El exponente 4294967287 es demasiado grande para el tipo de 64 bits 'long unsigned int'. Despu\u00e9s del parche, estas quejas no aparecen, el montaje falla inmediatamente y obtenemos una explicaci\u00f3n en dmesg."}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/15c83fa0fd659dd9fbdc940a560b61236e876a80", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/16670534c7cff1acd918a6a5ec751b14e7436b76", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/1ad197097343568066a8ffaa27ee7d0ae6d9f476", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/28275a7c84d21c55ab3282d897f284d8d527173c", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/5fa30be7ba81191b0a0c7239a89befc0c94286d5", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/670f8ce56dd0632dc29a0322e188cc73ce3c6b92", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/8b6534c9ae9dba5489703a19d8ba6c8f2cfa33c2", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/d6b1e8ea6f3418c3b461ad5a35cdc93c996b2c87", "name": "", "refsource": "", "tags": []}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}]}}, "impact": {}, "configurations": {"CVE_data_version": "4.0", "nodes": []}}