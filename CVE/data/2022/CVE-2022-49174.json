{"publishedDate": "2025-02-26T07:00Z", "lastModifiedDate": "2025-10-22T17:16Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2022-49174", "ASSIGNER": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\next4: fix ext4_mb_mark_bb() with flex_bg with fast_commit\n\nIn case of flex_bg feature (which is by default enabled), extents for\nany given inode might span across blocks from two different block group.\next4_mb_mark_bb() only reads the buffer_head of block bitmap once for the\nstarting block group, but it fails to read it again when the extent length\nboundary overflows to another block group. Then in this below loop it\naccesses memory beyond the block group bitmap buffer_head and results\ninto a data abort.\n\n\tfor (i = 0; i < clen; i++)\n\t\tif (!mb_test_bit(blkoff + i, bitmap_bh->b_data) == !state)\n\t\t\talready++;\n\nThis patch adds this functionality for checking block group boundary in\next4_mb_mark_bb() and update the buffer_head(bitmap_bh) for every different\nblock group.\n\nw/o this patch, I was easily able to hit a data access abort using Power platform.\n\n<...>\n[   74.327662] EXT4-fs error (device loop3): ext4_mb_generate_buddy:1141: group 11, block bitmap and bg descriptor inconsistent: 21248 vs 23294 free clusters\n[   74.533214] EXT4-fs (loop3): shut down requested (2)\n[   74.536705] Aborting journal on device loop3-8.\n[   74.702705] BUG: Unable to handle kernel data access on read at 0xc00000005e980000\n[   74.703727] Faulting instruction address: 0xc0000000007bffb8\ncpu 0xd: Vector: 300 (Data Access) at [c000000015db7060]\n    pc: c0000000007bffb8: ext4_mb_mark_bb+0x198/0x5a0\n    lr: c0000000007bfeec: ext4_mb_mark_bb+0xcc/0x5a0\n    sp: c000000015db7300\n   msr: 800000000280b033\n   dar: c00000005e980000\n dsisr: 40000000\n  current = 0xc000000027af6880\n  paca    = 0xc00000003ffd5200   irqmask: 0x03   irq_happened: 0x01\n    pid   = 5167, comm = mount\n<...>\nenter ? for help\n[c000000015db7380] c000000000782708 ext4_ext_clear_bb+0x378/0x410\n[c000000015db7400] c000000000813f14 ext4_fc_replay+0x1794/0x2000\n[c000000015db7580] c000000000833f7c do_one_pass+0xe9c/0x12a0\n[c000000015db7710] c000000000834504 jbd2_journal_recover+0x184/0x2d0\n[c000000015db77c0] c000000000841398 jbd2_journal_load+0x188/0x4a0\n[c000000015db7880] c000000000804de8 ext4_fill_super+0x2638/0x3e10\n[c000000015db7a40] c0000000005f8404 get_tree_bdev+0x2b4/0x350\n[c000000015db7ae0] c0000000007ef058 ext4_get_tree+0x28/0x40\n[c000000015db7b00] c0000000005f6344 vfs_get_tree+0x44/0x100\n[c000000015db7b70] c00000000063c408 path_mount+0xdd8/0xe70\n[c000000015db7c40] c00000000063c8f0 sys_mount+0x450/0x550\n[c000000015db7d50] c000000000035770 system_call_exception+0x4a0/0x4e0\n[c000000015db7e10] c00000000000c74c system_call_common+0xec/0x250"}, {"lang": "es", "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: ext4: reparar ext4_mb_mark_bb() con flex_bg con fast_commit En el caso de la caracter\u00edstica flex_bg (que est\u00e1 habilitada por defecto), las extensiones para cualquier inodo dado pueden abarcar bloques de dos grupos de bloques diferentes. ext4_mb_mark_bb() solo lee el buffer_head del mapa de bits del bloque una vez para el grupo de bloques de inicio, pero no puede leerlo de nuevo cuando el l\u00edmite de longitud de la extensi\u00f3n se desborda a otro grupo de bloques. Luego, en este bucle a continuaci\u00f3n, accede a la memoria m\u00e1s all\u00e1 del mapa de bits del grupo de bloques buffer_head y da como resultado una interrupci\u00f3n de datos. for (i = 0; i &lt; clen; i++) if (!mb_test_bit(blkoff + i, bitmap_bh-&gt;b_data) == !state) Already++; Este parche agrega esta funcionalidad para verificar el l\u00edmite del grupo de bloques en ext4_mb_mark_bb() y actualizar el buffer_head(bitmap_bh) para cada grupo de bloques diferente. Sin este parche, pude lograr f\u00e1cilmente un aborto de acceso a datos usando la plataforma Power. &lt;...&gt; [ 74.327662] Error EXT4-fs (dispositivo loop3): ext4_mb_generate_buddy:1141: grupo 11, mapa de bits de bloque y descriptor de fondo inconsistentes: 21248 vs 23294 cl\u00fasteres libres [ 74.533214] EXT4-fs (loop3): apagado solicitado (2) [ 74.536705] Abortando diario en dispositivo loop3-8. [ 74.702705] ERROR: No se puede manejar el acceso a los datos del n\u00facleo en lectura en 0xc00000005e980000 [ 74.703727] Direcci\u00f3n de instrucci\u00f3n con fallo: 0xc0000000007bffb8 cpu 0xd: Vector: 300 (Acceso a datos) en [c000000015db7060] pc: c0000000007bffb8: ext4_mb_mark_bb+0x198/0x5a0 lr: c0000000007bfeec: ext4_mb_mark_bb+0xcc/0x5a0 sp: c000000015db7300 msr: 800000000280b033 dar: c00000005e980000 dsisr: 40000000 actual = 0xc000000027af6880 paca = 0xc00000003ffd5200 irqmask: 0x03 irq_happened: 0x01 pid = 5167, comm = mount &lt;...&gt; ingresar ? para ayuda [c000000015db7380] c000000000782708 ext4_ext_clear_bb+0x378/0x410 [c000000015db7400] c000000000813f14 ext4_fc_replay+0x1794/0x2000 [c000000015db7580] c000000000833f7c do_one_pass+0xe9c/0x12a0 [c000000015db7710] c000000000834504 jbd2_journal_recover+0x184/0x2d0 [c000000015db77c0] c000000000841398 jbd2_journal_load+0x188/0x4a0 [c000000015db7880] c000000000804de8 ext4_fill_super+0x2638/0x3e10 [c000000015db7a40] c0000000005f8404 get_tree_bdev+0x2b4/0x350 [c000000015db7ae0] c0000000007ef058 ext4_get_tree+0x28/0x40 [c000000015db7b00] c0000000005f6344 vfs_get_tree+0x44/0x100 [c000000015db7b70] c00000000063c408 path_mount+0xdd8/0xe70 [c000000015db7c40] c00000000063c8f0 sys_mount+0x450/0x550 [c000000015db7d50] c000000000035770 system_call_exception+0x4a0/0x4e0 [c000000015db7e10] c00000000000c74c system_call_common+0xec/0x250"}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/6a6beb074186a0452368a023a261c7d0eaebe838", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://git.kernel.org/stable/c/803fb0e8240cc16585a5c9df76add1dfaa781773", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://git.kernel.org/stable/c/b07eedd0222e9548ffc568ec429bb1f61d21a39c", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://git.kernel.org/stable/c/bfdc502a4a4c058bf4cbb1df0c297761d528f54d", "name": "", "refsource": "", "tags": ["Patch"]}, {"url": "https://git.kernel.org/stable/c/cd6d719534af993210306f8a13f9cb3e615f7c8d", "name": "", "refsource": "", "tags": ["Patch"]}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}]}}, "impact": {"baseMetricV3": {"exploitabilityScore": 1.8, "impactScore": 3.6, "cvssV3": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "baseScore": 5.5, "baseSeverity": "MEDIUM", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH"}}}, "configurations": {"CVE_data_version": "4.0", "nodes": [{"operator": "OR", "negate": false, "children": [], "cpe_match": [{"vulnerable": true, "cpe23Uri": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "matchCriteriaId": "B9CDD38D-425B-44B2-A60F-7E0DB2E4A472", "cpe_name": [], "versionEndExcluding": "5.10.110"}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "matchCriteriaId": "27C42AE8-B387-43E2-938A-E1C8B40BE6D5", "cpe_name": [], "versionStartIncluding": "5.11", "versionEndExcluding": "5.15.33"}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "matchCriteriaId": "20C43679-0439-405A-B97F-685BEE50613B", "cpe_name": [], "versionStartIncluding": "5.16", "versionEndExcluding": "5.16.19"}, {"vulnerable": true, "cpe23Uri": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "matchCriteriaId": "210C679C-CF84-44A3-8939-E629C87E54BF", "cpe_name": [], "versionStartIncluding": "5.17", "versionEndExcluding": "5.17.2"}]}]}}