{"publishedDate": "2025-10-04T16:15Z", "lastModifiedDate": "2025-10-04T16:15Z", "cve": {"data_type": "CVE", "data_format": "MITRE", "data_version": "1.0", "CVE_data_meta": {"ID": "CVE-2022-50471", "ASSIGNER": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, "description": {"description_data": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nxen/gntdev: Accommodate VMA splitting\n\nPrior to this commit, the gntdev driver code did not handle the\nfollowing scenario correctly with paravirtualized (PV) Xen domains:\n\n* User process sets up a gntdev mapping composed of two grant mappings\n  (i.e., two pages shared by another Xen domain).\n* User process munmap()s one of the pages.\n* User process munmap()s the remaining page.\n* User process exits.\n\nIn the scenario above, the user process would cause the kernel to log\nthe following messages in dmesg for the first munmap(), and the second\nmunmap() call would result in similar log messages:\n\n  BUG: Bad page map in process doublemap.test  pte:... pmd:...\n  page:0000000057c97bff refcount:1 mapcount:-1 \\\n    mapping:0000000000000000 index:0x0 pfn:...\n  ...\n  page dumped because: bad pte\n  ...\n  file:gntdev fault:0x0 mmap:gntdev_mmap [xen_gntdev] readpage:0x0\n  ...\n  Call Trace:\n   <TASK>\n   dump_stack_lvl+0x46/0x5e\n   print_bad_pte.cold+0x66/0xb6\n   unmap_page_range+0x7e5/0xdc0\n   unmap_vmas+0x78/0xf0\n   unmap_region+0xa8/0x110\n   __do_munmap+0x1ea/0x4e0\n   __vm_munmap+0x75/0x120\n   __x64_sys_munmap+0x28/0x40\n   do_syscall_64+0x38/0x90\n   entry_SYSCALL_64_after_hwframe+0x61/0xcb\n   ...\n\nFor each munmap() call, the Xen hypervisor (if built with CONFIG_DEBUG)\nwould print out the following and trigger a general protection fault in\nthe affected Xen PV domain:\n\n  (XEN) d0v... Attempt to implicitly unmap d0's grant PTE ...\n  (XEN) d0v... Attempt to implicitly unmap d0's grant PTE ...\n\nAs of this writing, gntdev_grant_map structure's vma field (referred to\nas map->vma below) is mainly used for checking the start and end\naddresses of mappings. However, with split VMAs, these may change, and\nthere could be more than one VMA associated with a gntdev mapping.\nHence, remove the use of map->vma and rely on map->pages_vm_start for\nthe original start address and on (map->count << PAGE_SHIFT) for the\noriginal mapping size. Let the invalidate() and find_special_page()\nhooks use these.\n\nAlso, given that there can be multiple VMAs associated with a gntdev\nmapping, move the \"mmu_interval_notifier_remove(&map->notifier)\" call to\nthe end of gntdev_put_map, so that the MMU notifier is only removed\nafter the closing of the last remaining VMA.\n\nFinally, use an atomic to prevent inadvertent gntdev mapping re-use,\ninstead of using the map->live_grants atomic counter and/or the map->vma\npointer (the latter of which is now removed). This prevents the\nuserspace from mmap()'ing (with MAP_FIXED) a gntdev mapping over the\nsame address range as a previously set up gntdev mapping. This scenario\ncan be summarized with the following call-trace, which was valid prior\nto this commit:\n\n  mmap\n    gntdev_mmap\n  mmap (repeat mmap with MAP_FIXED over the same address range)\n    gntdev_invalidate\n      unmap_grant_pages (sets 'being_removed' entries to true)\n        gnttab_unmap_refs_async\n    unmap_single_vma\n    gntdev_mmap (maps the shared pages again)\n  munmap\n    gntdev_invalidate\n      unmap_grant_pages\n        (no-op because 'being_removed' entries are true)\n    unmap_single_vma (For PV domains, Xen reports that a granted page\n      is being unmapped and triggers a general protection fault in the\n      affected domain, if Xen was built with CONFIG_DEBUG)\n\nThe fix for this last scenario could be worth its own commit, but we\nopted for a single commit, because removing the gntdev_grant_map\nstructure's vma field requires guarding the entry to gntdev_mmap(), and\nthe live_grants atomic counter is not sufficient on its own to prevent\nthe mmap() over a pre-existing mapping."}]}, "references": {"reference_data": [{"url": "https://git.kernel.org/stable/c/3c6a888e352283a14f37b9b433cd598a1a3a7dd0", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/4fb4053d90caa9985b87ec0e0c32c66a55bdfa3a", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/5c13a4a0291b30191eff9ead8d010e1ca43a4d0c", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/7c16d0a4e6a436b4e7c92bead3fab55aaa4c1141", "name": "", "refsource": "", "tags": []}, {"url": "https://git.kernel.org/stable/c/cdafa219ace013c594e2491158ad1b51f9923dde", "name": "", "refsource": "", "tags": []}]}, "problemtype": {"problemtype_data": [{"description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}]}}, "impact": {}, "configurations": {"CVE_data_version": "4.0", "nodes": []}}